// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2022.2 (lin64) Build 3671981 Fri Oct 14 04:59:54 MDT 2022
// Date        : Wed Sep 20 19:17:52 2023
// Host        : epics-X9DAi running 64-bit Ubuntu 22.04.2 LTS
// Command     : write_verilog -force -mode funcsim -rename_top decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix -prefix
//               decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ system_gt_quad_base_0_0_sim_netlist.v
// Design      : system_gt_quad_base_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xcvc1902-vsva2197-2MP-e-S
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "system_gt_quad_base_0_0,system_gt_quad_base_0_0_inst,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "system_gt_quad_base_0_0_inst,Vivado 2022.2" *) 
(* NotValidForBitStream *)
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix
   (rxmarginclk,
    hsclk0_lcpllreset,
    hsclk0_rpllreset,
    hsclk1_lcpllreset,
    hsclk1_rpllreset,
    hsclk0_lcplllock,
    hsclk1_lcplllock,
    hsclk0_rplllock,
    hsclk1_rplllock,
    gtpowergood,
    ch0_pcierstb,
    ch1_pcierstb,
    ch2_pcierstb,
    ch3_pcierstb,
    pcielinkreachtarget,
    pcieltssm,
    rxmarginreqack,
    rxmarginrescmd,
    rxmarginreslanenum,
    rxmarginrespayld,
    rxmarginresreq,
    rxmarginreqcmd,
    rxmarginreqlanenum,
    rxmarginreqpayld,
    rxmarginreqreq,
    rxmarginresack,
    ch0_iloreset,
    ch1_iloreset,
    ch2_iloreset,
    ch3_iloreset,
    ch0_iloresetdone,
    ch1_iloresetdone,
    ch2_iloresetdone,
    ch3_iloresetdone,
    ch0_phystatus,
    ch1_phystatus,
    ch2_phystatus,
    ch3_phystatus,
    hsclk0_lcpllfbclklost,
    hsclk0_lcpllrefclklost,
    hsclk0_lcpllrefclkmonitor,
    hsclk0_rpllfbclklost,
    hsclk0_rpllrefclklost,
    hsclk0_rpllrefclkmonitor,
    hsclk1_lcpllfbclklost,
    hsclk1_lcpllrefclklost,
    hsclk1_lcpllrefclkmonitor,
    hsclk1_rpllfbclklost,
    hsclk1_rpllrefclklost,
    hsclk1_rpllrefclkmonitor,
    hsclk0_lcpllpd,
    hsclk0_rpllpd,
    hsclk0_lcpllresetbypassmode,
    hsclk0_lcpllsdmtoggle,
    hsclk0_rpllresetbypassmode,
    hsclk0_rpllsdmtoggle,
    hsclk1_lcpllpd,
    hsclk1_lcpllresetbypassmode,
    hsclk1_lcpllsdmtoggle,
    hsclk1_rpllpd,
    hsclk1_rpllresetbypassmode,
    hsclk1_rpllsdmtoggle,
    refclk0_gtrefclkpd,
    refclk1_gtrefclkpd,
    hsclk0_lcpllrefclksel,
    hsclk1_lcpllrefclksel,
    hsclk0_rpllrefclksel,
    hsclk1_rpllrefclksel,
    hsclk0_lcpllfbdiv,
    hsclk0_rpllfbdiv,
    hsclk1_lcpllfbdiv,
    hsclk1_rpllfbdiv,
    hsclk0_rxrecclkout0,
    hsclk0_rxrecclkout1,
    hsclk1_rxrecclkout0,
    hsclk1_rxrecclkout1,
    hsclk0_lcpllsdmdata,
    hsclk1_lcpllsdmdata,
    hsclk0_rpllsdmdata,
    hsclk1_rpllsdmdata,
    hsclk0_lcpllresetmask,
    hsclk1_lcpllresetmask,
    hsclk0_rpllresetmask,
    hsclk1_rpllresetmask,
    ch0_txdata,
    ch0_txheader,
    ch0_txsequence,
    ch0_gttxreset,
    ch0_txprogdivreset,
    ch0_txuserrdy,
    ch0_txphalignresetmask,
    ch0_txcominit,
    ch0_txcomsas,
    ch0_txcomwake,
    ch0_txdapicodeovrden,
    ch0_txdapicodereset,
    ch0_txdetectrx,
    ch0_txlatclk,
    ch0_txphdlytstclk,
    ch0_txdlyalignreq,
    ch0_txelecidle,
    ch0_txinhibit,
    ch0_txmldchaindone,
    ch0_txmldchainreq,
    ch0_txoneszeros,
    ch0_txpausedelayalign,
    ch0_txpcsresetmask,
    ch0_txphalignreq,
    ch0_txphdlypd,
    ch0_txphdlyreset,
    ch0_txphsetinitreq,
    ch0_txphshift180,
    ch0_txpicodeovrden,
    ch0_txpicodereset,
    ch0_txpippmen,
    ch0_txpisopd,
    ch0_txpolarity,
    ch0_txprbsforceerr,
    ch0_txswing,
    ch0_txsyncallin,
    ch0_tx10gstat,
    ch0_txcomfinish,
    ch0_txdccdone,
    ch0_txdlyalignerr,
    ch0_txdlyalignprog,
    ch0_txphaligndone,
    ch0_txphalignerr,
    ch0_txphalignoutrsvd,
    ch0_txphdlyresetdone,
    ch0_txphsetinitdone,
    ch0_txphshift180done,
    ch0_txsyncdone,
    ch0_txbufstatus,
    ch0_txctrl0,
    ch0_txctrl1,
    ch0_txdeemph,
    ch0_txpd,
    ch0_txresetmode,
    ch0_txmstreset,
    ch0_txmstdatapathreset,
    ch0_txmstresetdone,
    ch0_txmargin,
    ch0_txpmaresetmask,
    ch0_txprbssel,
    ch0_txdiffctrl,
    ch0_txpippmstepsize,
    ch0_txpostcursor,
    ch0_txprecursor,
    ch0_txmaincursor,
    ch0_txctrl2,
    ch0_txrate,
    ch0_txprogdivresetdone,
    ch0_txpmaresetdone,
    ch0_txresetdone,
    ch0_txdataextendrsvd,
    ch0_txoutclk,
    ch0_txusrclk,
    ch1_txdata,
    ch1_txheader,
    ch1_txsequence,
    ch1_gttxreset,
    ch1_txprogdivreset,
    ch1_txuserrdy,
    ch1_txphalignresetmask,
    ch1_txcominit,
    ch1_txcomsas,
    ch1_txcomwake,
    ch1_txdapicodeovrden,
    ch1_txdapicodereset,
    ch1_txdetectrx,
    ch1_txlatclk,
    ch1_txphdlytstclk,
    ch1_txdlyalignreq,
    ch1_txelecidle,
    ch1_txinhibit,
    ch1_txmldchaindone,
    ch1_txmldchainreq,
    ch1_txoneszeros,
    ch1_txpausedelayalign,
    ch1_txpcsresetmask,
    ch1_txphalignreq,
    ch1_txphdlypd,
    ch1_txphdlyreset,
    ch1_txphsetinitreq,
    ch1_txphshift180,
    ch1_txpicodeovrden,
    ch1_txpicodereset,
    ch1_txpippmen,
    ch1_txpisopd,
    ch1_txpolarity,
    ch1_txprbsforceerr,
    ch1_txswing,
    ch1_txsyncallin,
    ch1_tx10gstat,
    ch1_txcomfinish,
    ch1_txdccdone,
    ch1_txdlyalignerr,
    ch1_txdlyalignprog,
    ch1_txphaligndone,
    ch1_txphalignerr,
    ch1_txphalignoutrsvd,
    ch1_txphdlyresetdone,
    ch1_txphsetinitdone,
    ch1_txphshift180done,
    ch1_txsyncdone,
    ch1_txbufstatus,
    ch1_txctrl0,
    ch1_txctrl1,
    ch1_txdeemph,
    ch1_txpd,
    ch1_txresetmode,
    ch1_txmstreset,
    ch1_txmstdatapathreset,
    ch1_txmstresetdone,
    ch1_txmargin,
    ch1_txpmaresetmask,
    ch1_txprbssel,
    ch1_txdiffctrl,
    ch1_txpippmstepsize,
    ch1_txpostcursor,
    ch1_txprecursor,
    ch1_txmaincursor,
    ch1_txctrl2,
    ch1_txrate,
    ch1_txprogdivresetdone,
    ch1_txpmaresetdone,
    ch1_txresetdone,
    ch1_txdataextendrsvd,
    ch1_txoutclk,
    ch1_txusrclk,
    ch2_txdata,
    ch2_txheader,
    ch2_txsequence,
    ch2_gttxreset,
    ch2_txprogdivreset,
    ch2_txuserrdy,
    ch2_txphalignresetmask,
    ch2_txcominit,
    ch2_txcomsas,
    ch2_txcomwake,
    ch2_txdapicodeovrden,
    ch2_txdapicodereset,
    ch2_txdetectrx,
    ch2_txlatclk,
    ch2_txphdlytstclk,
    ch2_txdlyalignreq,
    ch2_txelecidle,
    ch2_txinhibit,
    ch2_txmldchaindone,
    ch2_txmldchainreq,
    ch2_txoneszeros,
    ch2_txpausedelayalign,
    ch2_txpcsresetmask,
    ch2_txphalignreq,
    ch2_txphdlypd,
    ch2_txphdlyreset,
    ch2_txphsetinitreq,
    ch2_txphshift180,
    ch2_txpicodeovrden,
    ch2_txpicodereset,
    ch2_txpippmen,
    ch2_txpisopd,
    ch2_txpolarity,
    ch2_txprbsforceerr,
    ch2_txswing,
    ch2_txsyncallin,
    ch2_tx10gstat,
    ch2_txcomfinish,
    ch2_txdccdone,
    ch2_txdlyalignerr,
    ch2_txdlyalignprog,
    ch2_txphaligndone,
    ch2_txphalignerr,
    ch2_txphalignoutrsvd,
    ch2_txphdlyresetdone,
    ch2_txphsetinitdone,
    ch2_txphshift180done,
    ch2_txsyncdone,
    ch2_txbufstatus,
    ch2_txctrl0,
    ch2_txctrl1,
    ch2_txdeemph,
    ch2_txpd,
    ch2_txresetmode,
    ch2_txmstreset,
    ch2_txmstdatapathreset,
    ch2_txmstresetdone,
    ch2_txmargin,
    ch2_txpmaresetmask,
    ch2_txprbssel,
    ch2_txdiffctrl,
    ch2_txpippmstepsize,
    ch2_txpostcursor,
    ch2_txprecursor,
    ch2_txmaincursor,
    ch2_txctrl2,
    ch2_txrate,
    ch2_txprogdivresetdone,
    ch2_txpmaresetdone,
    ch2_txresetdone,
    ch2_txdataextendrsvd,
    ch2_txoutclk,
    ch2_txusrclk,
    ch3_txdata,
    ch3_txheader,
    ch3_txsequence,
    ch3_gttxreset,
    ch3_txprogdivreset,
    ch3_txuserrdy,
    ch3_txphalignresetmask,
    ch3_txcominit,
    ch3_txcomsas,
    ch3_txcomwake,
    ch3_txdapicodeovrden,
    ch3_txdapicodereset,
    ch3_txdetectrx,
    ch3_txlatclk,
    ch3_txphdlytstclk,
    ch3_txdlyalignreq,
    ch3_txelecidle,
    ch3_txinhibit,
    ch3_txmldchaindone,
    ch3_txmldchainreq,
    ch3_txoneszeros,
    ch3_txpausedelayalign,
    ch3_txpcsresetmask,
    ch3_txphalignreq,
    ch3_txphdlypd,
    ch3_txphdlyreset,
    ch3_txphsetinitreq,
    ch3_txphshift180,
    ch3_txpicodeovrden,
    ch3_txpicodereset,
    ch3_txpippmen,
    ch3_txpisopd,
    ch3_txpolarity,
    ch3_txprbsforceerr,
    ch3_txswing,
    ch3_txsyncallin,
    ch3_tx10gstat,
    ch3_txcomfinish,
    ch3_txdccdone,
    ch3_txdlyalignerr,
    ch3_txdlyalignprog,
    ch3_txphaligndone,
    ch3_txphalignerr,
    ch3_txphalignoutrsvd,
    ch3_txphdlyresetdone,
    ch3_txphsetinitdone,
    ch3_txphshift180done,
    ch3_txsyncdone,
    ch3_txbufstatus,
    ch3_txctrl0,
    ch3_txctrl1,
    ch3_txdeemph,
    ch3_txpd,
    ch3_txresetmode,
    ch3_txmstreset,
    ch3_txmstdatapathreset,
    ch3_txmstresetdone,
    ch3_txmargin,
    ch3_txpmaresetmask,
    ch3_txprbssel,
    ch3_txdiffctrl,
    ch3_txpippmstepsize,
    ch3_txpostcursor,
    ch3_txprecursor,
    ch3_txmaincursor,
    ch3_txctrl2,
    ch3_txrate,
    ch3_txprogdivresetdone,
    ch3_txpmaresetdone,
    ch3_txresetdone,
    ch3_txdataextendrsvd,
    ch3_txoutclk,
    ch3_txusrclk,
    ch0_rxdata,
    ch0_rxdatavalid,
    ch0_rxheader,
    ch0_rxgearboxslip,
    ch0_rxlatclk,
    ch0_gtrxreset,
    ch0_rxprogdivreset,
    ch0_rxuserrdy,
    ch0_rxprogdivresetdone,
    ch0_rxpmaresetdone,
    ch0_rxresetdone,
    ch0_rx10gstat,
    ch0_rxbufstatus,
    ch0_rxbyteisaligned,
    ch0_rxbyterealign,
    ch0_rxcdrhold,
    ch0_rxcdrlock,
    ch0_rxcdrovrden,
    ch0_rxcdrphdone,
    ch0_rxcdrreset,
    ch0_rxchanbondseq,
    ch0_rxchanisaligned,
    ch0_rxchanrealign,
    ch0_rxchbondi,
    ch0_rxchbondo,
    ch0_rxclkcorcnt,
    ch0_rxcominitdet,
    ch0_rxcommadet,
    ch0_rxcomsasdet,
    ch0_rxcomwakedet,
    ch0_rxctrl0,
    ch0_rxctrl1,
    ch0_rxctrl2,
    ch0_rxctrl3,
    ch0_rxdapicodeovrden,
    ch0_rxdapicodereset,
    ch0_rxdlyalignerr,
    ch0_rxdlyalignprog,
    ch0_rxdlyalignreq,
    ch0_rxelecidle,
    ch0_rxeqtraining,
    ch0_rxfinealigndone,
    ch0_rxheadervalid,
    ch0_rxlpmen,
    ch0_rxmldchaindone,
    ch0_rxmldchainreq,
    ch0_rxmlfinealignreq,
    ch0_rxoobreset,
    ch0_rxosintdone,
    ch0_rxpcsresetmask,
    ch0_rxpd,
    ch0_rxphaligndone,
    ch0_rxphalignerr,
    ch0_rxphalignreq,
    ch0_rxphalignresetmask,
    ch0_rxphdlypd,
    ch0_rxphdlyreset,
    ch0_rxphdlyresetdone,
    ch0_rxphsetinitdone,
    ch0_rxphsetinitreq,
    ch0_rxphshift180,
    ch0_rxphshift180done,
    ch0_rxpmaresetmask,
    ch0_rxpolarity,
    ch0_rxprbscntreset,
    ch0_rxprbserr,
    ch0_rxprbslocked,
    ch0_rxprbssel,
    ch0_rxrate,
    ch0_rxresetmode,
    ch0_rxmstreset,
    ch0_rxmstdatapathreset,
    ch0_rxmstresetdone,
    ch0_rxslide,
    ch0_rxsliderdy,
    ch0_rxstartofseq,
    ch0_rxstatus,
    ch0_rxsyncallin,
    ch0_rxsyncdone,
    ch0_rxtermination,
    ch0_rxvalid,
    ch0_cdrbmcdrreq,
    ch0_cdrfreqos,
    ch0_cdrincpctrl,
    ch0_cdrstepdir,
    ch0_cdrstepsq,
    ch0_cdrstepsx,
    ch0_eyescanreset,
    ch0_eyescantrigger,
    ch0_eyescandataerror,
    ch0_cfokovrdrdy0,
    ch0_cfokovrdrdy1,
    ch0_rxdataextendrsvd,
    ch0_rxdccdone,
    ch0_rxosintstarted,
    ch0_rxosintstrobedone,
    ch0_rxosintstrobestarted,
    ch0_cfokovrdfinish,
    ch0_cfokovrdpulse,
    ch0_cfokovrdstart,
    ch0_rxoutclk,
    ch0_rxusrclk,
    ch1_rxdata,
    ch1_rxdatavalid,
    ch1_rxheader,
    ch1_rxgearboxslip,
    ch1_rxlatclk,
    ch1_gtrxreset,
    ch1_rxprogdivreset,
    ch1_rxuserrdy,
    ch1_rxprogdivresetdone,
    ch1_rxpmaresetdone,
    ch1_rxresetdone,
    ch1_rx10gstat,
    ch1_rxbufstatus,
    ch1_rxbyteisaligned,
    ch1_rxbyterealign,
    ch1_rxcdrhold,
    ch1_rxcdrlock,
    ch1_rxcdrovrden,
    ch1_rxcdrphdone,
    ch1_rxcdrreset,
    ch1_rxchanbondseq,
    ch1_rxchanisaligned,
    ch1_rxchanrealign,
    ch1_rxchbondi,
    ch1_rxchbondo,
    ch1_rxclkcorcnt,
    ch1_rxcominitdet,
    ch1_rxcommadet,
    ch1_rxcomsasdet,
    ch1_rxcomwakedet,
    ch1_rxctrl0,
    ch1_rxctrl1,
    ch1_rxctrl2,
    ch1_rxctrl3,
    ch1_rxdapicodeovrden,
    ch1_rxdapicodereset,
    ch1_rxdlyalignerr,
    ch1_rxdlyalignprog,
    ch1_rxdlyalignreq,
    ch1_rxelecidle,
    ch1_rxeqtraining,
    ch1_rxfinealigndone,
    ch1_rxheadervalid,
    ch1_rxlpmen,
    ch1_rxmldchaindone,
    ch1_rxmldchainreq,
    ch1_rxmlfinealignreq,
    ch1_rxoobreset,
    ch1_rxosintdone,
    ch1_rxpcsresetmask,
    ch1_rxpd,
    ch1_rxphaligndone,
    ch1_rxphalignerr,
    ch1_rxphalignreq,
    ch1_rxphalignresetmask,
    ch1_rxphdlypd,
    ch1_rxphdlyreset,
    ch1_rxphdlyresetdone,
    ch1_rxphsetinitdone,
    ch1_rxphsetinitreq,
    ch1_rxphshift180,
    ch1_rxphshift180done,
    ch1_rxpmaresetmask,
    ch1_rxpolarity,
    ch1_rxprbscntreset,
    ch1_rxprbserr,
    ch1_rxprbslocked,
    ch1_rxprbssel,
    ch1_rxrate,
    ch1_rxresetmode,
    ch1_rxmstreset,
    ch1_rxmstdatapathreset,
    ch1_rxmstresetdone,
    ch1_rxslide,
    ch1_rxsliderdy,
    ch1_rxstartofseq,
    ch1_rxstatus,
    ch1_rxsyncallin,
    ch1_rxsyncdone,
    ch1_rxtermination,
    ch1_rxvalid,
    ch1_cdrbmcdrreq,
    ch1_cdrfreqos,
    ch1_cdrincpctrl,
    ch1_cdrstepdir,
    ch1_cdrstepsq,
    ch1_cdrstepsx,
    ch1_eyescanreset,
    ch1_eyescantrigger,
    ch1_eyescandataerror,
    ch1_cfokovrdrdy0,
    ch1_cfokovrdrdy1,
    ch1_rxdataextendrsvd,
    ch1_rxdccdone,
    ch1_rxosintstarted,
    ch1_rxosintstrobedone,
    ch1_rxosintstrobestarted,
    ch1_cfokovrdfinish,
    ch1_cfokovrdpulse,
    ch1_cfokovrdstart,
    ch1_rxoutclk,
    ch1_rxusrclk,
    ch2_rxdata,
    ch2_rxdatavalid,
    ch2_rxheader,
    ch2_rxgearboxslip,
    ch2_rxlatclk,
    ch2_gtrxreset,
    ch2_rxprogdivreset,
    ch2_rxuserrdy,
    ch2_rxprogdivresetdone,
    ch2_rxpmaresetdone,
    ch2_rxresetdone,
    ch2_rx10gstat,
    ch2_rxbufstatus,
    ch2_rxbyteisaligned,
    ch2_rxbyterealign,
    ch2_rxcdrhold,
    ch2_rxcdrlock,
    ch2_rxcdrovrden,
    ch2_rxcdrphdone,
    ch2_rxcdrreset,
    ch2_rxchanbondseq,
    ch2_rxchanisaligned,
    ch2_rxchanrealign,
    ch2_rxchbondi,
    ch2_rxchbondo,
    ch2_rxclkcorcnt,
    ch2_rxcominitdet,
    ch2_rxcommadet,
    ch2_rxcomsasdet,
    ch2_rxcomwakedet,
    ch2_rxctrl0,
    ch2_rxctrl1,
    ch2_rxctrl2,
    ch2_rxctrl3,
    ch2_rxdapicodeovrden,
    ch2_rxdapicodereset,
    ch2_rxdlyalignerr,
    ch2_rxdlyalignprog,
    ch2_rxdlyalignreq,
    ch2_rxelecidle,
    ch2_rxeqtraining,
    ch2_rxfinealigndone,
    ch2_rxheadervalid,
    ch2_rxlpmen,
    ch2_rxmldchaindone,
    ch2_rxmldchainreq,
    ch2_rxmlfinealignreq,
    ch2_rxoobreset,
    ch2_rxosintdone,
    ch2_rxpcsresetmask,
    ch2_rxpd,
    ch2_rxphaligndone,
    ch2_rxphalignerr,
    ch2_rxphalignreq,
    ch2_rxphalignresetmask,
    ch2_rxphdlypd,
    ch2_rxphdlyreset,
    ch2_rxphdlyresetdone,
    ch2_rxphsetinitdone,
    ch2_rxphsetinitreq,
    ch2_rxphshift180,
    ch2_rxphshift180done,
    ch2_rxpmaresetmask,
    ch2_rxpolarity,
    ch2_rxprbscntreset,
    ch2_rxprbserr,
    ch2_rxprbslocked,
    ch2_rxprbssel,
    ch2_rxrate,
    ch2_rxresetmode,
    ch2_rxmstreset,
    ch2_rxmstdatapathreset,
    ch2_rxmstresetdone,
    ch2_rxslide,
    ch2_rxsliderdy,
    ch2_rxstartofseq,
    ch2_rxstatus,
    ch2_rxsyncallin,
    ch2_rxsyncdone,
    ch2_rxtermination,
    ch2_rxvalid,
    ch2_cdrbmcdrreq,
    ch2_cdrfreqos,
    ch2_cdrincpctrl,
    ch2_cdrstepdir,
    ch2_cdrstepsq,
    ch2_cdrstepsx,
    ch2_eyescanreset,
    ch2_eyescantrigger,
    ch2_eyescandataerror,
    ch2_cfokovrdrdy0,
    ch2_cfokovrdrdy1,
    ch2_rxdataextendrsvd,
    ch2_rxdccdone,
    ch2_rxosintstarted,
    ch2_rxosintstrobedone,
    ch2_rxosintstrobestarted,
    ch2_cfokovrdfinish,
    ch2_cfokovrdpulse,
    ch2_cfokovrdstart,
    ch2_rxoutclk,
    ch2_rxusrclk,
    ch3_rxdata,
    ch3_rxdatavalid,
    ch3_rxheader,
    ch3_rxgearboxslip,
    ch3_rxlatclk,
    ch3_gtrxreset,
    ch3_rxprogdivreset,
    ch3_rxuserrdy,
    ch3_rxprogdivresetdone,
    ch3_rxpmaresetdone,
    ch3_rxresetdone,
    ch3_rx10gstat,
    ch3_rxbufstatus,
    ch3_rxbyteisaligned,
    ch3_rxbyterealign,
    ch3_rxcdrhold,
    ch3_rxcdrlock,
    ch3_rxcdrovrden,
    ch3_rxcdrphdone,
    ch3_rxcdrreset,
    ch3_rxchanbondseq,
    ch3_rxchanisaligned,
    ch3_rxchanrealign,
    ch3_rxchbondi,
    ch3_rxchbondo,
    ch3_rxclkcorcnt,
    ch3_rxcominitdet,
    ch3_rxcommadet,
    ch3_rxcomsasdet,
    ch3_rxcomwakedet,
    ch3_rxctrl0,
    ch3_rxctrl1,
    ch3_rxctrl2,
    ch3_rxctrl3,
    ch3_rxdapicodeovrden,
    ch3_rxdapicodereset,
    ch3_rxdlyalignerr,
    ch3_rxdlyalignprog,
    ch3_rxdlyalignreq,
    ch3_rxelecidle,
    ch3_rxeqtraining,
    ch3_rxfinealigndone,
    ch3_rxheadervalid,
    ch3_rxlpmen,
    ch3_rxmldchaindone,
    ch3_rxmldchainreq,
    ch3_rxmlfinealignreq,
    ch3_rxoobreset,
    ch3_rxosintdone,
    ch3_rxpcsresetmask,
    ch3_rxpd,
    ch3_rxphaligndone,
    ch3_rxphalignerr,
    ch3_rxphalignreq,
    ch3_rxphalignresetmask,
    ch3_rxphdlypd,
    ch3_rxphdlyreset,
    ch3_rxphdlyresetdone,
    ch3_rxphsetinitdone,
    ch3_rxphsetinitreq,
    ch3_rxphshift180,
    ch3_rxphshift180done,
    ch3_rxpmaresetmask,
    ch3_rxpolarity,
    ch3_rxprbscntreset,
    ch3_rxprbserr,
    ch3_rxprbslocked,
    ch3_rxprbssel,
    ch3_rxrate,
    ch3_rxresetmode,
    ch3_rxmstreset,
    ch3_rxmstdatapathreset,
    ch3_rxmstresetdone,
    ch3_rxslide,
    ch3_rxsliderdy,
    ch3_rxstartofseq,
    ch3_rxstatus,
    ch3_rxsyncallin,
    ch3_rxsyncdone,
    ch3_rxtermination,
    ch3_rxvalid,
    ch3_cdrbmcdrreq,
    ch3_cdrfreqos,
    ch3_cdrincpctrl,
    ch3_cdrstepdir,
    ch3_cdrstepsq,
    ch3_cdrstepsx,
    ch3_eyescanreset,
    ch3_eyescantrigger,
    ch3_eyescandataerror,
    ch3_cfokovrdrdy0,
    ch3_cfokovrdrdy1,
    ch3_rxdataextendrsvd,
    ch3_rxdccdone,
    ch3_rxosintstarted,
    ch3_rxosintstrobedone,
    ch3_rxosintstrobestarted,
    ch3_cfokovrdfinish,
    ch3_cfokovrdpulse,
    ch3_cfokovrdstart,
    ch3_rxoutclk,
    ch3_rxusrclk,
    ch0_bufgtce,
    ch0_bufgtrst,
    ch0_bufgtcemask,
    ch0_bufgtrstmask,
    ch0_bufgtdiv,
    ch0_clkrsvd0,
    ch0_clkrsvd1,
    ch0_dmonitorclk,
    ch0_phyesmadaptsave,
    ch0_iloresetmask,
    ch0_loopback,
    ch0_dmonfiforeset,
    ch0_pcsrsvdin,
    ch0_gtrsvd,
    ch0_tstin,
    ch0_pcsrsvdout,
    ch0_pinrsvdas,
    ch0_dmonitoroutclk,
    ch0_resetexception,
    ch0_dmonitorout,
    ch0_phyready,
    ch0_hsdppcsreset,
    ch1_bufgtce,
    ch1_bufgtrst,
    ch1_bufgtcemask,
    ch1_bufgtrstmask,
    ch1_bufgtdiv,
    ch1_clkrsvd0,
    ch1_clkrsvd1,
    ch1_dmonitorclk,
    ch1_phyesmadaptsave,
    ch1_iloresetmask,
    ch1_loopback,
    ch1_dmonfiforeset,
    ch1_pcsrsvdin,
    ch1_gtrsvd,
    ch1_tstin,
    ch1_pcsrsvdout,
    ch1_pinrsvdas,
    ch1_dmonitoroutclk,
    ch1_resetexception,
    ch1_dmonitorout,
    ch1_phyready,
    ch1_hsdppcsreset,
    ch2_bufgtce,
    ch2_bufgtrst,
    ch2_bufgtcemask,
    ch2_bufgtrstmask,
    ch2_bufgtdiv,
    ch2_clkrsvd0,
    ch2_clkrsvd1,
    ch2_dmonitorclk,
    ch2_phyesmadaptsave,
    ch2_iloresetmask,
    ch2_loopback,
    ch2_dmonfiforeset,
    ch2_pcsrsvdin,
    ch2_gtrsvd,
    ch2_tstin,
    ch2_pcsrsvdout,
    ch2_pinrsvdas,
    ch2_dmonitoroutclk,
    ch2_resetexception,
    ch2_dmonitorout,
    ch2_phyready,
    ch2_hsdppcsreset,
    ch3_bufgtce,
    ch3_bufgtrst,
    ch3_bufgtcemask,
    ch3_bufgtrstmask,
    ch3_bufgtdiv,
    ch3_clkrsvd0,
    ch3_clkrsvd1,
    ch3_dmonitorclk,
    ch3_phyesmadaptsave,
    ch3_iloresetmask,
    ch3_loopback,
    ch3_dmonfiforeset,
    ch3_pcsrsvdin,
    ch3_gtrsvd,
    ch3_tstin,
    ch3_pcsrsvdout,
    ch3_pinrsvdas,
    ch3_dmonitoroutclk,
    ch3_resetexception,
    ch3_dmonitorout,
    ch3_phyready,
    ch3_hsdppcsreset,
    resetdone_northin,
    resetdone_southin,
    resetdone_northout,
    resetdone_southout,
    txpinorthin,
    rxpinorthin,
    txpisouthin,
    rxpisouthin,
    pipenorthin,
    pipesouthin,
    txpinorthout,
    txpisouthout,
    rxpinorthout,
    rxpisouthout,
    pipenorthout,
    pipesouthout,
    GT_REFCLK0,
    bgbypassb,
    bgmonitorenb,
    bgpdb,
    bgrcalovrdenb,
    bgrcalovrd,
    debugtraceready,
    debugtraceclk,
    rcalenb,
    trigackout0,
    trigin0,
    ubenable,
    ubiolmbrst,
    ubmbrst,
    ubintr,
    ubrxuart,
    ctrlrsvdin0,
    ctrlrsvdin1,
    gpi,
    refclk0_clktestsig,
    refclk1_clktestsig,
    correcterr,
    debugtracetvalid,
    debugtracetdata,
    refclk0_gtrefclkpdint,
    refclk0_clktestsigint,
    refclk1_gtrefclkpdint,
    refclk1_clktestsigint,
    trigackin0,
    trigout0,
    ubinterrupt,
    ubtxuart,
    uncorrecterr,
    ctrlrsvdout,
    gpo,
    hsclk0_rxrecclksel,
    hsclk1_rxrecclksel,
    altclk,
    hsclk0_lcpllclkrsvd0,
    hsclk0_lcpllclkrsvd1,
    hsclk0_rpllclkrsvd0,
    hsclk0_rpllclkrsvd1,
    hsclk1_lcpllclkrsvd0,
    hsclk1_lcpllclkrsvd1,
    hsclk1_rpllclkrsvd0,
    hsclk1_rpllclkrsvd1,
    hsclk0_lcpllrsvd0,
    hsclk0_lcpllrsvd1,
    hsclk0_rpllrsvd0,
    hsclk0_rpllrsvd1,
    hsclk1_lcpllrsvd0,
    hsclk1_lcpllrsvd1,
    hsclk1_rpllrsvd0,
    hsclk1_rpllrsvd1,
    hsclk0_lcpllrsvdout,
    hsclk1_lcpllrsvdout,
    hsclk0_rpllrsvdout,
    hsclk1_rpllrsvdout,
    apb3clk,
    apb3paddr,
    apb3penable,
    apb3presetn,
    apb3prdata,
    apb3psel,
    apb3pslverr,
    apb3pready,
    apb3pwdata,
    apb3pwrite,
    rxp,
    rxn,
    txp,
    txn);
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginclk" *) input rxmarginclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk0_lcpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk0_lcpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk0_lcpllreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk0_rpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk0_rpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk0_rpllreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk1_lcpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk1_lcpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk1_lcpllreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 hsclk1_rpllreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME hsclk1_rpllreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input hsclk1_rpllreset;
  output hsclk0_lcplllock;
  output hsclk1_lcplllock;
  output hsclk0_rplllock;
  output hsclk1_rplllock;
  output gtpowergood;
  input ch0_pcierstb;
  input ch1_pcierstb;
  input ch2_pcierstb;
  input ch3_pcierstb;
  input pcielinkreachtarget;
  input [5:0]pcieltssm;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqack" *) output rxmarginreqack;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginrescmd" *) output [3:0]rxmarginrescmd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreslanenum" *) output [1:0]rxmarginreslanenum;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginrespayld" *) output [7:0]rxmarginrespayld;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginresreq" *) output rxmarginresreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqcmd" *) input [3:0]rxmarginreqcmd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqlanenum" *) input [1:0]rxmarginreqlanenum;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqpayld" *) input [7:0]rxmarginreqpayld;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginreqreq" *) input rxmarginreqreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rxmargin_intf:1.0 gt_rxmargin_intf rxmarginresack" *) input rxmarginresack;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch0_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch0_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch0_iloreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch1_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch1_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch1_iloreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch2_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch2_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch2_iloreset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ch3_iloreset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ch3_iloreset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input ch3_iloreset;
  output ch0_iloresetdone;
  output ch1_iloresetdone;
  output ch2_iloresetdone;
  output ch3_iloresetdone;
  output ch0_phystatus;
  output ch1_phystatus;
  output ch2_phystatus;
  output ch3_phystatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLFBCLKLOST" *) output hsclk0_lcpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLREFCLKLOST" *) output hsclk0_lcpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLREFCLKMONITOR" *) output hsclk0_lcpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLFBCLKLOST" *) output hsclk0_rpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLREFCLKLOST" *) output hsclk0_rpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLREFCLKMONITOR" *) output hsclk0_rpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLFBCLKLOST" *) output hsclk1_lcpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLREFCLKLOST" *) output hsclk1_lcpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLREFCLKMONITOR" *) output hsclk1_lcpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLFBCLKLOST" *) output hsclk1_rpllfbclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLREFCLKLOST" *) output hsclk1_rpllrefclklost;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLREFCLKMONITOR" *) output hsclk1_rpllrefclkmonitor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLPD" *) input hsclk0_lcpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLPD" *) input hsclk0_rpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRESETBYPASSMODE" *) input hsclk0_lcpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLSDMTOGGLE" *) input hsclk0_lcpllsdmtoggle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRESETBYPASSMODE" *) input hsclk0_rpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLSDMTOGGLE" *) input hsclk0_rpllsdmtoggle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLPD" *) input hsclk1_lcpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRESETBYPASSMODE" *) input hsclk1_lcpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLSDMTOGGLE" *) input hsclk1_lcpllsdmtoggle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLPD" *) input hsclk1_rpllpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRESETBYPASSMODE" *) input hsclk1_rpllresetbypassmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLSDMTOGGLE" *) input hsclk1_rpllsdmtoggle;
  input refclk0_gtrefclkpd;
  input refclk1_gtrefclkpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLREFCLKSEL" *) input [2:0]hsclk0_lcpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLREFCLKSEL" *) input [2:0]hsclk1_lcpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLREFCLKSEL" *) input [2:0]hsclk0_rpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLREFCLKSEL" *) input [2:0]hsclk1_rpllrefclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLFBDIV" *) input [7:0]hsclk0_lcpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLFBDIV" *) input [7:0]hsclk0_rpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLFBDIV" *) input [7:0]hsclk1_lcpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLFBDIV" *) input [7:0]hsclk1_rpllfbdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RXRECCLKOUT0" *) output hsclk0_rxrecclkout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RXRECCLKOUT1" *) output hsclk0_rxrecclkout1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RXRECCLKOUT0" *) output hsclk1_rxrecclkout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RXRECCLKOUT1" *) output hsclk1_rxrecclkout1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLSDMDATA" *) input [25:0]hsclk0_lcpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLSDMDATA" *) input [25:0]hsclk1_lcpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLSDMDATA" *) input [25:0]hsclk0_rpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLSDMDATA" *) input [25:0]hsclk1_rpllsdmdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRESETMASK" *) input [1:0]hsclk0_lcpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRESETMASK" *) input [1:0]hsclk1_lcpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRESETMASK" *) input [1:0]hsclk0_rpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRESETMASK" *) input [1:0]hsclk1_rpllresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdata" *) input [127:0]ch0_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txheader" *) input [5:0]ch0_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsequence" *) input [6:0]ch0_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_gttxreset" *) input ch0_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprogdivreset" *) input ch0_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txuserrdy" *) input ch0_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch0_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcominit" *) input ch0_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcomsas" *) input ch0_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcomwake" *) input ch0_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapicodeovrden" *) input ch0_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdapicodereset" *) input ch0_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdetectrx" *) input ch0_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txlatclk" *) input ch0_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlytstclk" *) input ch0_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdlyalignreq" *) input ch0_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txelecidle" *) input ch0_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txinhibit" *) input ch0_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmldchaindone" *) input ch0_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmldchainreq" *) input ch0_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txoneszeros" *) input ch0_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpausedelayalign" *) input ch0_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpcsresetmask" *) input ch0_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignreq" *) input ch0_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlypd" *) input ch0_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlyreset" *) input ch0_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphsetinitreq" *) input ch0_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphshift180" *) input ch0_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpicodeovrden" *) input ch0_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpicodereset" *) input ch0_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpippmen" *) input ch0_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpisopd" *) input ch0_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpolarity" *) input ch0_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprbsforceerr" *) input ch0_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txswing" *) input ch0_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsyncallin" *) input ch0_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_tx10gstat" *) output ch0_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txcomfinish" *) output ch0_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdccdone" *) output ch0_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdlyalignerr" *) output ch0_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdlyalignprog" *) output ch0_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphaligndone" *) output ch0_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignerr" *) output ch0_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphalignoutrsvd" *) output ch0_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphdlyresetdone" *) output ch0_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphsetinitdone" *) output ch0_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txphshift180done" *) output ch0_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txsyncdone" *) output ch0_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch0_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txctrl0" *) input [15:0]ch0_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txctrl1" *) input [15:0]ch0_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdeemph" *) input [1:0]ch0_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpd" *) input [1:0]ch0_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txresetmode" *) input [1:0]ch0_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmstreset" *) input ch0_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmstdatapathreset" *) input ch0_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmstresetdone" *) output ch0_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmargin" *) input [2:0]ch0_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch0_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprbssel" *) input [3:0]ch0_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch0_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch0_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch0_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprecursor" *) input [4:0]ch0_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch0_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txctrl2" *) input [7:0]ch0_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txrate" *) input [7:0]ch0_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txprogdivresetdone" *) output ch0_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txpmaresetdone" *) output ch0_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txresetdone" *) output ch0_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX0_GT_IP_Interface ch_txdataextendrsvd" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX0_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 0, MASTERCLK_SRC 1, GT_DIRECTION DUPLEX, TX_SETTINGS LR0_SETTINGS {TX_LINE_RATE 4.0 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 400 TX_ACTUAL_REFCLK_FREQUENCY 400 TX_FRACN_ENABLED true TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING 64B66B_ASYNC TX_USER_DATA_WIDTH 64 TX_INT_DATA_WIDTH 64 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXPROGDIVCLK TXPROGDIV_FREQ_ENABLE true TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 60.606 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE GT_TYPE GTY}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input [7:0]ch0_txdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX0_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX0_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER 1, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_txoutclk" *) output ch0_txoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 TX0_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX0_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_txoutclk" *) input ch0_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdata" *) input [127:0]ch1_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txheader" *) input [5:0]ch1_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsequence" *) input [6:0]ch1_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_gttxreset" *) input ch1_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprogdivreset" *) input ch1_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txuserrdy" *) input ch1_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch1_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcominit" *) input ch1_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcomsas" *) input ch1_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcomwake" *) input ch1_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapicodeovrden" *) input ch1_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdapicodereset" *) input ch1_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdetectrx" *) input ch1_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txlatclk" *) input ch1_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlytstclk" *) input ch1_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdlyalignreq" *) input ch1_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txelecidle" *) input ch1_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txinhibit" *) input ch1_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmldchaindone" *) input ch1_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmldchainreq" *) input ch1_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txoneszeros" *) input ch1_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpausedelayalign" *) input ch1_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpcsresetmask" *) input ch1_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignreq" *) input ch1_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlypd" *) input ch1_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlyreset" *) input ch1_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphsetinitreq" *) input ch1_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphshift180" *) input ch1_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpicodeovrden" *) input ch1_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpicodereset" *) input ch1_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpippmen" *) input ch1_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpisopd" *) input ch1_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpolarity" *) input ch1_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprbsforceerr" *) input ch1_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txswing" *) input ch1_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsyncallin" *) input ch1_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_tx10gstat" *) output ch1_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txcomfinish" *) output ch1_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdccdone" *) output ch1_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdlyalignerr" *) output ch1_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdlyalignprog" *) output ch1_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphaligndone" *) output ch1_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignerr" *) output ch1_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphalignoutrsvd" *) output ch1_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphdlyresetdone" *) output ch1_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphsetinitdone" *) output ch1_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txphshift180done" *) output ch1_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txsyncdone" *) output ch1_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch1_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txctrl0" *) input [15:0]ch1_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txctrl1" *) input [15:0]ch1_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdeemph" *) input [1:0]ch1_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpd" *) input [1:0]ch1_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txresetmode" *) input [1:0]ch1_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmstreset" *) input ch1_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmstdatapathreset" *) input ch1_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmstresetdone" *) output ch1_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmargin" *) input [2:0]ch1_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch1_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprbssel" *) input [3:0]ch1_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch1_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch1_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch1_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprecursor" *) input [4:0]ch1_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch1_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txctrl2" *) input [7:0]ch1_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txrate" *) input [7:0]ch1_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txprogdivresetdone" *) output ch1_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txpmaresetdone" *) output ch1_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txresetdone" *) output ch1_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX1_GT_IP_Interface ch_txdataextendrsvd" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX1_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 1, MASTERCLK_SRC 0, GT_DIRECTION DUPLEX, TX_SETTINGS LR0_SETTINGS {TX_LINE_RATE 4.0 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 400 TX_ACTUAL_REFCLK_FREQUENCY 400 TX_FRACN_ENABLED true TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING 64B66B_ASYNC TX_USER_DATA_WIDTH 64 TX_INT_DATA_WIDTH 64 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXPROGDIVCLK TXPROGDIV_FREQ_ENABLE true TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 60.606 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE GT_TYPE GTY}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input [7:0]ch1_txdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX1_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX1_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch1_txoutclk" *) output ch1_txoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 TX1_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX1_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_txoutclk" *) input ch1_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdata" *) input [127:0]ch2_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txheader" *) input [5:0]ch2_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsequence" *) input [6:0]ch2_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_gttxreset" *) input ch2_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprogdivreset" *) input ch2_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txuserrdy" *) input ch2_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch2_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcominit" *) input ch2_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcomsas" *) input ch2_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcomwake" *) input ch2_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapicodeovrden" *) input ch2_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdapicodereset" *) input ch2_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdetectrx" *) input ch2_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txlatclk" *) input ch2_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlytstclk" *) input ch2_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdlyalignreq" *) input ch2_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txelecidle" *) input ch2_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txinhibit" *) input ch2_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmldchaindone" *) input ch2_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmldchainreq" *) input ch2_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txoneszeros" *) input ch2_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpausedelayalign" *) input ch2_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpcsresetmask" *) input ch2_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignreq" *) input ch2_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlypd" *) input ch2_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlyreset" *) input ch2_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphsetinitreq" *) input ch2_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphshift180" *) input ch2_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpicodeovrden" *) input ch2_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpicodereset" *) input ch2_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpippmen" *) input ch2_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpisopd" *) input ch2_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpolarity" *) input ch2_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprbsforceerr" *) input ch2_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txswing" *) input ch2_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsyncallin" *) input ch2_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_tx10gstat" *) output ch2_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txcomfinish" *) output ch2_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdccdone" *) output ch2_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdlyalignerr" *) output ch2_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdlyalignprog" *) output ch2_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphaligndone" *) output ch2_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignerr" *) output ch2_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphalignoutrsvd" *) output ch2_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphdlyresetdone" *) output ch2_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphsetinitdone" *) output ch2_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txphshift180done" *) output ch2_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txsyncdone" *) output ch2_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch2_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txctrl0" *) input [15:0]ch2_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txctrl1" *) input [15:0]ch2_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdeemph" *) input [1:0]ch2_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpd" *) input [1:0]ch2_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txresetmode" *) input [1:0]ch2_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmstreset" *) input ch2_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmstdatapathreset" *) input ch2_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmstresetdone" *) output ch2_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmargin" *) input [2:0]ch2_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch2_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprbssel" *) input [3:0]ch2_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch2_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch2_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch2_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprecursor" *) input [4:0]ch2_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch2_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txctrl2" *) input [7:0]ch2_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txrate" *) input [7:0]ch2_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txprogdivresetdone" *) output ch2_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txpmaresetdone" *) output ch2_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txresetdone" *) output ch2_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX2_GT_IP_Interface ch_txdataextendrsvd" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX2_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 2, MASTERCLK_SRC 0, GT_DIRECTION DUPLEX, TX_SETTINGS LR0_SETTINGS {TX_LINE_RATE 4.0 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 400 TX_ACTUAL_REFCLK_FREQUENCY 400 TX_FRACN_ENABLED true TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING 64B66B_ASYNC TX_USER_DATA_WIDTH 64 TX_INT_DATA_WIDTH 64 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXPROGDIVCLK TXPROGDIV_FREQ_ENABLE true TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 60.606 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE GT_TYPE GTY}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input [7:0]ch2_txdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX2_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX2_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch2_txoutclk" *) output ch2_txoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 TX2_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX2_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_txoutclk" *) input ch2_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdata" *) input [127:0]ch3_txdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txheader" *) input [5:0]ch3_txheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsequence" *) input [6:0]ch3_txsequence;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_gttxreset" *) input ch3_gttxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprogdivreset" *) input ch3_txprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txuserrdy" *) input ch3_txuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignresetmask" *) input [1:0]ch3_txphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcominit" *) input ch3_txcominit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcomsas" *) input ch3_txcomsas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcomwake" *) input ch3_txcomwake;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapicodeovrden" *) input ch3_txdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdapicodereset" *) input ch3_txdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdetectrx" *) input ch3_txdetectrx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txlatclk" *) input ch3_txlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlytstclk" *) input ch3_txphdlytstclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdlyalignreq" *) input ch3_txdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txelecidle" *) input ch3_txelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txinhibit" *) input ch3_txinhibit;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmldchaindone" *) input ch3_txmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmldchainreq" *) input ch3_txmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txoneszeros" *) input ch3_txoneszeros;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpausedelayalign" *) input ch3_txpausedelayalign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpcsresetmask" *) input ch3_txpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignreq" *) input ch3_txphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlypd" *) input ch3_txphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlyreset" *) input ch3_txphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphsetinitreq" *) input ch3_txphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphshift180" *) input ch3_txphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpicodeovrden" *) input ch3_txpicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpicodereset" *) input ch3_txpicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpippmen" *) input ch3_txpippmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpisopd" *) input ch3_txpisopd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpolarity" *) input ch3_txpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprbsforceerr" *) input ch3_txprbsforceerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txswing" *) input ch3_txswing;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsyncallin" *) input ch3_txsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_tx10gstat" *) output ch3_tx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txcomfinish" *) output ch3_txcomfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdccdone" *) output ch3_txdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdlyalignerr" *) output ch3_txdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdlyalignprog" *) output ch3_txdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphaligndone" *) output ch3_txphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignerr" *) output ch3_txphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphalignoutrsvd" *) output ch3_txphalignoutrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphdlyresetdone" *) output ch3_txphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphsetinitdone" *) output ch3_txphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txphshift180done" *) output ch3_txphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txsyncdone" *) output ch3_txsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txbufstatus" *) output [1:0]ch3_txbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txctrl0" *) input [15:0]ch3_txctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txctrl1" *) input [15:0]ch3_txctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdeemph" *) input [1:0]ch3_txdeemph;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpd" *) input [1:0]ch3_txpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txresetmode" *) input [1:0]ch3_txresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmstreset" *) input ch3_txmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmstdatapathreset" *) input ch3_txmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmstresetdone" *) output ch3_txmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmargin" *) input [2:0]ch3_txmargin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpmaresetmask" *) input [2:0]ch3_txpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprbssel" *) input [3:0]ch3_txprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdiffctrl" *) input [4:0]ch3_txdiffctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpippmstepsize" *) input [4:0]ch3_txpippmstepsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpostcursor" *) input [4:0]ch3_txpostcursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprecursor" *) input [4:0]ch3_txprecursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txmaincursor" *) input [6:0]ch3_txmaincursor;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txctrl2" *) input [7:0]ch3_txctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txrate" *) input [7:0]ch3_txrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txprogdivresetdone" *) output ch3_txprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txpmaresetdone" *) output ch3_txpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txresetdone" *) output ch3_txresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_tx_interface:1.0 TX3_GT_IP_Interface ch_txdataextendrsvd" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX3_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 3, MASTERCLK_SRC 0, GT_DIRECTION DUPLEX, TX_SETTINGS LR0_SETTINGS {TX_LINE_RATE 4.0 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 400 TX_ACTUAL_REFCLK_FREQUENCY 400 TX_FRACN_ENABLED true TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING 64B66B_ASYNC TX_USER_DATA_WIDTH 64 TX_INT_DATA_WIDTH 64 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXPROGDIVCLK TXPROGDIV_FREQ_ENABLE true TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 60.606 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE GT_TYPE GTY}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input [7:0]ch3_txdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 TX3_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX3_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch3_txoutclk" *) output ch3_txoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 TX3_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME TX3_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_txoutclk" *) input ch3_txusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdata" *) output [127:0]ch0_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch0_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxheader" *) output [5:0]ch0_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxgearboxslip" *) input ch0_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxlatclk" *) input ch0_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_gtrxreset" *) input ch0_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprogdivreset" *) input ch0_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxuserrdy" *) input ch0_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprogdivresetdone" *) output ch0_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpmaresetdone" *) output ch0_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxresetdone" *) output ch0_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch0_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch0_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxbyteisaligned" *) output ch0_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxbyterealign" *) output ch0_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrhold" *) input ch0_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrlock" *) output ch0_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrovrden" *) input ch0_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrphdone" *) output ch0_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcdrreset" *) input ch0_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchanbondseq" *) output ch0_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchanisaligned" *) output ch0_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchanrealign" *) output ch0_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch0_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch0_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch0_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcominitdet" *) output ch0_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcommadet" *) output ch0_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcomsasdet" *) output ch0_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxcomwakedet" *) output ch0_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch0_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch0_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch0_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch0_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapicodeovrden" *) input ch0_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdapicodereset" *) input ch0_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdlyalignerr" *) output ch0_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdlyalignprog" *) output ch0_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdlyalignreq" *) input ch0_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxelecidle" *) output ch0_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxeqtraining" *) input ch0_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxfinealigndone" *) output ch0_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch0_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxlpmen" *) input ch0_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmldchaindone" *) input ch0_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmldchainreq" *) input ch0_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmlfinealignreq" *) input ch0_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxoobreset" *) input ch0_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxosintdone" *) output ch0_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch0_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpd" *) input [1:0]ch0_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphaligndone" *) output ch0_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphalignerr" *) output ch0_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphalignreq" *) input ch0_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch0_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphdlypd" *) input ch0_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphdlyreset" *) input ch0_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphdlyresetdone" *) output ch0_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphsetinitdone" *) output ch0_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphsetinitreq" *) input ch0_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphshift180" *) input ch0_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxphshift180done" *) output ch0_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch0_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxpolarity" *) input ch0_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbscntreset" *) input ch0_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbserr" *) output ch0_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbslocked" *) output ch0_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch0_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxrate" *) input [7:0]ch0_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch0_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmstreset" *) input ch0_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmstdatapathreset" *) input ch0_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxmstresetdone" *) output ch0_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxslide" *) input ch0_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsliderdy" *) output ch0_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch0_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxstatus" *) output [2:0]ch0_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsyncallin" *) input ch0_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxsyncdone" *) output ch0_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxtermination" *) input ch0_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxvalid" *) output ch0_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrbmcdrreq" *) input ch0_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrfreqos" *) input ch0_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrincpctrl" *) input ch0_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrstepdir" *) input ch0_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrstepsq" *) input ch0_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cdrstepsx" *) input ch0_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_eyescanreset" *) input ch0_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_eyescantrigger" *) input ch0_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_eyescandataerror" *) output ch0_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cfokovrdrdy0" *) output ch0_cfokovrdrdy0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cfokovrdrdy1" *) output ch0_cfokovrdrdy1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdataextendrsvd" *) output [7:0]ch0_rxdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxdccdone" *) output ch0_rxdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxosintstarted" *) output ch0_rxosintstarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxosintstrobedone" *) output ch0_rxosintstrobedone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_rxosintstrobestarted" *) output ch0_rxosintstrobestarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cfokovrdfinish" *) input ch0_cfokovrdfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cfokovrdpulse" *) input ch0_cfokovrdpulse;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX0_GT_IP_Interface ch_cfokovrdstart" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX0_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 0, MASTERCLK_SRC 1, GT_DIRECTION DUPLEX, RX_SETTINGS LR0_SETTINGS {PRESET GTY-JESD204_64B66B INTERNAL_PRESET JESD204_64B66B GT_TYPE GTY RX_LINE_RATE 4.0 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 400 RX_ACTUAL_REFCLK_FREQUENCY 400 RX_FRACN_ENABLED true RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING 64B66B_ASYNC RX_USER_DATA_WIDTH 64 RX_INT_DATA_WIDTH 64 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 60.606 INS_LOSS_NYQ 12 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 10 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input ch0_cfokovrdstart;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX0_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX0_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER 1, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_rxoutclk" *) output ch0_rxoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 RX0_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX0_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_rxoutclk" *) input ch0_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdata" *) output [127:0]ch1_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch1_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxheader" *) output [5:0]ch1_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxgearboxslip" *) input ch1_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxlatclk" *) input ch1_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_gtrxreset" *) input ch1_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprogdivreset" *) input ch1_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxuserrdy" *) input ch1_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprogdivresetdone" *) output ch1_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpmaresetdone" *) output ch1_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxresetdone" *) output ch1_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch1_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch1_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxbyteisaligned" *) output ch1_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxbyterealign" *) output ch1_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrhold" *) input ch1_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrlock" *) output ch1_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrovrden" *) input ch1_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrphdone" *) output ch1_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcdrreset" *) input ch1_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchanbondseq" *) output ch1_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchanisaligned" *) output ch1_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchanrealign" *) output ch1_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch1_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch1_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch1_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcominitdet" *) output ch1_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcommadet" *) output ch1_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcomsasdet" *) output ch1_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxcomwakedet" *) output ch1_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch1_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch1_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch1_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch1_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapicodeovrden" *) input ch1_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdapicodereset" *) input ch1_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdlyalignerr" *) output ch1_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdlyalignprog" *) output ch1_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdlyalignreq" *) input ch1_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxelecidle" *) output ch1_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxeqtraining" *) input ch1_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxfinealigndone" *) output ch1_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch1_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxlpmen" *) input ch1_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmldchaindone" *) input ch1_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmldchainreq" *) input ch1_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmlfinealignreq" *) input ch1_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxoobreset" *) input ch1_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxosintdone" *) output ch1_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch1_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpd" *) input [1:0]ch1_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphaligndone" *) output ch1_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphalignerr" *) output ch1_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphalignreq" *) input ch1_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch1_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphdlypd" *) input ch1_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphdlyreset" *) input ch1_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphdlyresetdone" *) output ch1_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphsetinitdone" *) output ch1_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphsetinitreq" *) input ch1_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphshift180" *) input ch1_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxphshift180done" *) output ch1_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch1_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxpolarity" *) input ch1_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbscntreset" *) input ch1_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbserr" *) output ch1_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbslocked" *) output ch1_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch1_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxrate" *) input [7:0]ch1_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch1_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmstreset" *) input ch1_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmstdatapathreset" *) input ch1_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxmstresetdone" *) output ch1_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxslide" *) input ch1_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsliderdy" *) output ch1_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch1_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxstatus" *) output [2:0]ch1_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsyncallin" *) input ch1_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxsyncdone" *) output ch1_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxtermination" *) input ch1_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxvalid" *) output ch1_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrbmcdrreq" *) input ch1_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrfreqos" *) input ch1_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrincpctrl" *) input ch1_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrstepdir" *) input ch1_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrstepsq" *) input ch1_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cdrstepsx" *) input ch1_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_eyescanreset" *) input ch1_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_eyescantrigger" *) input ch1_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_eyescandataerror" *) output ch1_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cfokovrdrdy0" *) output ch1_cfokovrdrdy0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cfokovrdrdy1" *) output ch1_cfokovrdrdy1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdataextendrsvd" *) output [7:0]ch1_rxdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxdccdone" *) output ch1_rxdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxosintstarted" *) output ch1_rxosintstarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxosintstrobedone" *) output ch1_rxosintstrobedone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_rxosintstrobestarted" *) output ch1_rxosintstrobestarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cfokovrdfinish" *) input ch1_cfokovrdfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cfokovrdpulse" *) input ch1_cfokovrdpulse;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX1_GT_IP_Interface ch_cfokovrdstart" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX1_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 1, MASTERCLK_SRC 0, GT_DIRECTION DUPLEX, RX_SETTINGS LR0_SETTINGS {PRESET GTY-JESD204_64B66B INTERNAL_PRESET JESD204_64B66B GT_TYPE GTY RX_LINE_RATE 4.0 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 400 RX_ACTUAL_REFCLK_FREQUENCY 400 RX_FRACN_ENABLED true RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING 64B66B_ASYNC RX_USER_DATA_WIDTH 64 RX_INT_DATA_WIDTH 64 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 60.606 INS_LOSS_NYQ 12 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 10 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input ch1_cfokovrdstart;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX1_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX1_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch1_rxoutclk" *) output ch1_rxoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 RX1_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX1_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_rxoutclk" *) input ch1_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdata" *) output [127:0]ch2_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch2_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxheader" *) output [5:0]ch2_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxgearboxslip" *) input ch2_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxlatclk" *) input ch2_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_gtrxreset" *) input ch2_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprogdivreset" *) input ch2_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxuserrdy" *) input ch2_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprogdivresetdone" *) output ch2_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpmaresetdone" *) output ch2_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxresetdone" *) output ch2_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch2_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch2_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxbyteisaligned" *) output ch2_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxbyterealign" *) output ch2_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrhold" *) input ch2_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrlock" *) output ch2_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrovrden" *) input ch2_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrphdone" *) output ch2_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcdrreset" *) input ch2_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchanbondseq" *) output ch2_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchanisaligned" *) output ch2_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchanrealign" *) output ch2_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch2_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch2_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch2_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcominitdet" *) output ch2_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcommadet" *) output ch2_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcomsasdet" *) output ch2_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxcomwakedet" *) output ch2_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch2_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch2_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch2_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch2_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapicodeovrden" *) input ch2_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdapicodereset" *) input ch2_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdlyalignerr" *) output ch2_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdlyalignprog" *) output ch2_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdlyalignreq" *) input ch2_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxelecidle" *) output ch2_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxeqtraining" *) input ch2_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxfinealigndone" *) output ch2_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch2_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxlpmen" *) input ch2_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmldchaindone" *) input ch2_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmldchainreq" *) input ch2_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmlfinealignreq" *) input ch2_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxoobreset" *) input ch2_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxosintdone" *) output ch2_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch2_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpd" *) input [1:0]ch2_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphaligndone" *) output ch2_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphalignerr" *) output ch2_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphalignreq" *) input ch2_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch2_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphdlypd" *) input ch2_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphdlyreset" *) input ch2_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphdlyresetdone" *) output ch2_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphsetinitdone" *) output ch2_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphsetinitreq" *) input ch2_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphshift180" *) input ch2_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxphshift180done" *) output ch2_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch2_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxpolarity" *) input ch2_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbscntreset" *) input ch2_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbserr" *) output ch2_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbslocked" *) output ch2_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch2_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxrate" *) input [7:0]ch2_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch2_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmstreset" *) input ch2_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmstdatapathreset" *) input ch2_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxmstresetdone" *) output ch2_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxslide" *) input ch2_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsliderdy" *) output ch2_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch2_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxstatus" *) output [2:0]ch2_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsyncallin" *) input ch2_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxsyncdone" *) output ch2_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxtermination" *) input ch2_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxvalid" *) output ch2_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrbmcdrreq" *) input ch2_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrfreqos" *) input ch2_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrincpctrl" *) input ch2_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrstepdir" *) input ch2_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrstepsq" *) input ch2_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cdrstepsx" *) input ch2_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_eyescanreset" *) input ch2_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_eyescantrigger" *) input ch2_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_eyescandataerror" *) output ch2_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cfokovrdrdy0" *) output ch2_cfokovrdrdy0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cfokovrdrdy1" *) output ch2_cfokovrdrdy1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdataextendrsvd" *) output [7:0]ch2_rxdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxdccdone" *) output ch2_rxdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxosintstarted" *) output ch2_rxosintstarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxosintstrobedone" *) output ch2_rxosintstrobedone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_rxosintstrobestarted" *) output ch2_rxosintstrobestarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cfokovrdfinish" *) input ch2_cfokovrdfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cfokovrdpulse" *) input ch2_cfokovrdpulse;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX2_GT_IP_Interface ch_cfokovrdstart" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX2_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 2, MASTERCLK_SRC 0, GT_DIRECTION DUPLEX, RX_SETTINGS LR0_SETTINGS {PRESET GTY-JESD204_64B66B INTERNAL_PRESET JESD204_64B66B GT_TYPE GTY RX_LINE_RATE 4.0 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 400 RX_ACTUAL_REFCLK_FREQUENCY 400 RX_FRACN_ENABLED true RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING 64B66B_ASYNC RX_USER_DATA_WIDTH 64 RX_INT_DATA_WIDTH 64 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 60.606 INS_LOSS_NYQ 12 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 10 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input ch2_cfokovrdstart;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX2_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX2_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch2_rxoutclk" *) output ch2_rxoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 RX2_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX2_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_rxoutclk" *) input ch2_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdata" *) output [127:0]ch3_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdatavalid" *) output [1:0]ch3_rxdatavalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxheader" *) output [5:0]ch3_rxheader;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxgearboxslip" *) input ch3_rxgearboxslip;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxlatclk" *) input ch3_rxlatclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_gtrxreset" *) input ch3_gtrxreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprogdivreset" *) input ch3_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxuserrdy" *) input ch3_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprogdivresetdone" *) output ch3_rxprogdivresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpmaresetdone" *) output ch3_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxresetdone" *) output ch3_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rx10gstat" *) output [7:0]ch3_rx10gstat;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxbufstatus" *) output [2:0]ch3_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxbyteisaligned" *) output ch3_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxbyterealign" *) output ch3_rxbyterealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrhold" *) input ch3_rxcdrhold;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrlock" *) output ch3_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrovrden" *) input ch3_rxcdrovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrphdone" *) output ch3_rxcdrphdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcdrreset" *) input ch3_rxcdrreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchanbondseq" *) output ch3_rxchanbondseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchanisaligned" *) output ch3_rxchanisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchanrealign" *) output ch3_rxchanrealign;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchbondi" *) input [4:0]ch3_rxchbondi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxchbondo" *) output [4:0]ch3_rxchbondo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxclkcorcnt" *) output [1:0]ch3_rxclkcorcnt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcominitdet" *) output ch3_rxcominitdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcommadet" *) output ch3_rxcommadet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcomsasdet" *) output ch3_rxcomsasdet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxcomwakedet" *) output ch3_rxcomwakedet;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl0" *) output [15:0]ch3_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl1" *) output [15:0]ch3_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl2" *) output [7:0]ch3_rxctrl2;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxctrl3" *) output [7:0]ch3_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapicodeovrden" *) input ch3_rxdapicodeovrden;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdapicodereset" *) input ch3_rxdapicodereset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdlyalignerr" *) output ch3_rxdlyalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdlyalignprog" *) output ch3_rxdlyalignprog;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdlyalignreq" *) input ch3_rxdlyalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxelecidle" *) output ch3_rxelecidle;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxeqtraining" *) input ch3_rxeqtraining;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxfinealigndone" *) output ch3_rxfinealigndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxheadervalid" *) output [1:0]ch3_rxheadervalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxlpmen" *) input ch3_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmldchaindone" *) input ch3_rxmldchaindone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmldchainreq" *) input ch3_rxmldchainreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmlfinealignreq" *) input ch3_rxmlfinealignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxoobreset" *) input ch3_rxoobreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxosintdone" *) output ch3_rxosintdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpcsresetmask" *) input [4:0]ch3_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpd" *) input [1:0]ch3_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphaligndone" *) output ch3_rxphaligndone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphalignerr" *) output ch3_rxphalignerr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphalignreq" *) input ch3_rxphalignreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphalignresetmask" *) input [1:0]ch3_rxphalignresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphdlypd" *) input ch3_rxphdlypd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphdlyreset" *) input ch3_rxphdlyreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphdlyresetdone" *) output ch3_rxphdlyresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphsetinitdone" *) output ch3_rxphsetinitdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphsetinitreq" *) input ch3_rxphsetinitreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphshift180" *) input ch3_rxphshift180;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxphshift180done" *) output ch3_rxphshift180done;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpmaresetmask" *) input [6:0]ch3_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxpolarity" *) input ch3_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbscntreset" *) input ch3_rxprbscntreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbserr" *) output ch3_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbslocked" *) output ch3_rxprbslocked;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxprbssel" *) input [3:0]ch3_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxrate" *) input [7:0]ch3_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxresetmode" *) input [1:0]ch3_rxresetmode;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmstreset" *) input ch3_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmstdatapathreset" *) input ch3_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxmstresetdone" *) output ch3_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxslide" *) input ch3_rxslide;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsliderdy" *) output ch3_rxsliderdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxstartofseq" *) output [1:0]ch3_rxstartofseq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxstatus" *) output [2:0]ch3_rxstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsyncallin" *) input ch3_rxsyncallin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxsyncdone" *) output ch3_rxsyncdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxtermination" *) input ch3_rxtermination;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxvalid" *) output ch3_rxvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrbmcdrreq" *) input ch3_cdrbmcdrreq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrfreqos" *) input ch3_cdrfreqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrincpctrl" *) input ch3_cdrincpctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrstepdir" *) input ch3_cdrstepdir;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrstepsq" *) input ch3_cdrstepsq;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cdrstepsx" *) input ch3_cdrstepsx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_eyescanreset" *) input ch3_eyescanreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_eyescantrigger" *) input ch3_eyescantrigger;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_eyescandataerror" *) output ch3_eyescandataerror;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cfokovrdrdy0" *) output ch3_cfokovrdrdy0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cfokovrdrdy1" *) output ch3_cfokovrdrdy1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdataextendrsvd" *) output [7:0]ch3_rxdataextendrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxdccdone" *) output ch3_rxdccdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxosintstarted" *) output ch3_rxosintstarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxosintstrobedone" *) output ch3_rxosintstrobedone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_rxosintstrobestarted" *) output ch3_rxosintstrobestarted;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cfokovrdfinish" *) input ch3_cfokovrdfinish;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cfokovrdpulse" *) input ch3_cfokovrdpulse;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 RX3_GT_IP_Interface ch_cfokovrdstart" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX3_GT_IP_Interface, PARENT_ID system_gt_bridge_ip_0_0, CHNL_NUMBER 3, MASTERCLK_SRC 0, GT_DIRECTION DUPLEX, RX_SETTINGS LR0_SETTINGS {PRESET GTY-JESD204_64B66B INTERNAL_PRESET JESD204_64B66B GT_TYPE GTY RX_LINE_RATE 4.0 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 400 RX_ACTUAL_REFCLK_FREQUENCY 400 RX_FRACN_ENABLED true RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING 64B66B_ASYNC RX_USER_DATA_WIDTH 64 RX_INT_DATA_WIDTH 64 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 60.606 INS_LOSS_NYQ 12 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 10 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY REG_CONF_INTF APB3_INTF BYPASS_DRC_58G false, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE false" *) input ch3_cfokovrdstart;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_outclk:1.0 RX3_OUTCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX3_OUTCLK, FREQ_HZ 60606100.0, IS_MASTER false, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch3_rxoutclk" *) output ch3_rxoutclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 RX3_USRCLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RX3_USRCLK, FREQ_HZ 60606100.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN system_gt_quad_base_0_0_ch0_rxoutclk" *) input ch3_rxusrclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtce" *) output ch0_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtrst" *) output ch0_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtcemask" *) output [3:0]ch0_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtrstmask" *) output [3:0]ch0_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT0_BUFGT ch_bufgtdiv" *) output [11:0]ch0_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_clkrsvd0" *) input ch0_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_clkrsvd1" *) input ch0_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonitorclk" *) input ch0_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_phyesmadaptsave" *) input ch0_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_iloresetmask" *) input ch0_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_loopback" *) input [2:0]ch0_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonfiforeset" *) input ch0_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_pcsrsvdin" *) input [15:0]ch0_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_gtrsvd" *) input [15:0]ch0_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_tstin" *) input [19:0]ch0_tstin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_pcsrsvdout" *) output [15:0]ch0_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_pinrsvdas" *) output [15:0]ch0_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonitoroutclk" *) output ch0_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_resetexception" *) output ch0_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_dmonitorout" *) output [31:0]ch0_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_phyready" *) output ch0_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH0_DEBUG ch_hsdppcsreset" *) input ch0_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtce" *) output ch1_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtrst" *) output ch1_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtcemask" *) output [3:0]ch1_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtrstmask" *) output [3:0]ch1_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT1_BUFGT ch_bufgtdiv" *) output [11:0]ch1_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_clkrsvd0" *) input ch1_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_clkrsvd1" *) input ch1_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonitorclk" *) input ch1_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_phyesmadaptsave" *) input ch1_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_iloresetmask" *) input ch1_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_loopback" *) input [2:0]ch1_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonfiforeset" *) input ch1_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_pcsrsvdin" *) input [15:0]ch1_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_gtrsvd" *) input [15:0]ch1_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_tstin" *) input [19:0]ch1_tstin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_pcsrsvdout" *) output [15:0]ch1_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_pinrsvdas" *) output [15:0]ch1_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonitoroutclk" *) output ch1_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_resetexception" *) output ch1_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_dmonitorout" *) output [31:0]ch1_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_phyready" *) output ch1_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH1_DEBUG ch_hsdppcsreset" *) input ch1_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtce" *) output ch2_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtrst" *) output ch2_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtcemask" *) output [3:0]ch2_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtrstmask" *) output [3:0]ch2_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT2_BUFGT ch_bufgtdiv" *) output [11:0]ch2_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_clkrsvd0" *) input ch2_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_clkrsvd1" *) input ch2_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonitorclk" *) input ch2_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_phyesmadaptsave" *) input ch2_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_iloresetmask" *) input ch2_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_loopback" *) input [2:0]ch2_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonfiforeset" *) input ch2_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_pcsrsvdin" *) input [15:0]ch2_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_gtrsvd" *) input [15:0]ch2_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_tstin" *) input [19:0]ch2_tstin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_pcsrsvdout" *) output [15:0]ch2_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_pinrsvdas" *) output [15:0]ch2_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonitoroutclk" *) output ch2_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_resetexception" *) output ch2_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_dmonitorout" *) output [31:0]ch2_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_phyready" *) output ch2_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH2_DEBUG ch_hsdppcsreset" *) input ch2_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtce" *) output ch3_bufgtce;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtrst" *) output ch3_bufgtrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtcemask" *) output [3:0]ch3_bufgtcemask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtrstmask" *) output [3:0]ch3_bufgtrstmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_bufgt:1.0 GT3_BUFGT ch_bufgtdiv" *) output [11:0]ch3_bufgtdiv;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_clkrsvd0" *) input ch3_clkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_clkrsvd1" *) input ch3_clkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonitorclk" *) input ch3_dmonitorclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_phyesmadaptsave" *) input ch3_phyesmadaptsave;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_iloresetmask" *) input ch3_iloresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_loopback" *) input [2:0]ch3_loopback;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonfiforeset" *) input ch3_dmonfiforeset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_pcsrsvdin" *) input [15:0]ch3_pcsrsvdin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_gtrsvd" *) input [15:0]ch3_gtrsvd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_tstin" *) input [19:0]ch3_tstin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_pcsrsvdout" *) output [15:0]ch3_pcsrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_pinrsvdas" *) output [15:0]ch3_pinrsvdas;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonitoroutclk" *) output ch3_dmonitoroutclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_resetexception" *) output ch3_resetexception;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_dmonitorout" *) output [31:0]ch3_dmonitorout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_phyready" *) output ch3_phyready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_channel_debug:1.0 CH3_DEBUG ch_hsdppcsreset" *) input ch3_hsdppcsreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RESETDONE_NORTHIN" *) input [1:0]resetdone_northin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RESETDONE_SOUTHOUT" *) input [1:0]resetdone_southin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RESETDONE_NORTHIN" *) output [1:0]resetdone_northout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RESETDONE_SOUTHOUT" *) output [1:0]resetdone_southout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT TXPINORTHIN" *) input [3:0]txpinorthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RXPINORTHIN" *) input [3:0]rxpinorthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN TXPISOUTHOUT" *) input [3:0]txpisouthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RXPISOUTHOUT" *) input [3:0]rxpisouthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT PIPENORTHIN" *) input [5:0]pipenorthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN PIPESOUTHOUT" *) input [5:0]pipesouthin;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN txpinorthin" *) output [3:0]txpinorthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT TXPISOUTHOUT" *) output [3:0]txpisouthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN RXPINORTHIN" *) output [3:0]rxpinorthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT RXPISOUTHOUT" *) output [3:0]rxpisouthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHOUT_SOUTHIN PIPENORTHIN" *) output [5:0]pipenorthout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_northsouth:1.0 GT_NORTHIN_SOUTHOUT PIPESOUTHOUT" *) output [5:0]pipesouthout;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 GT_REFCLK0 CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_REFCLK0, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, INSERT_VIP 0" *) input GT_REFCLK0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgbypassb" *) input bgbypassb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgmonitorenb" *) input bgmonitorenb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgpdb" *) input bgpdb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgrcalovrdenb" *) input bgrcalovrdenb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG bgrcalovrd" *) input [4:0]bgrcalovrd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtraceready" *) input debugtraceready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtraceclk" *) input debugtraceclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG rcalenb" *) input rcalenb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigackout0" *) input trigackout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigin0" *) input trigin0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubenable" *) input ubenable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubiolmbrst" *) input ubiolmbrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubmbrst" *) input ubmbrst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubintr" *) input [11:0]ubintr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubrxuart" *) input ubrxuart;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ctrlrsvdin0" *) input [15:0]ctrlrsvdin0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ctrlrsvdin1" *) input [13:0]ctrlrsvdin1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG gpi" *) input [15:0]gpi;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk0_clktestsig" *) input refclk0_clktestsig;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk1_clktestsig" *) input refclk1_clktestsig;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG correcterr" *) output correcterr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtracetvalid" *) output debugtracetvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG debugtracedata" *) output [15:0]debugtracetdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk0_gtrefclkpdint" *) output refclk0_gtrefclkpdint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk0_clktestsigint" *) output refclk0_clktestsigint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk1_gtrefclkpdint" *) output refclk1_gtrefclkpdint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG refclk1_clktestsigint" *) output refclk1_clktestsigint;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigackin0" *) output trigackin0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG trigout0" *) output trigout0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubinterrupt" *) output ubinterrupt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ubtxuart" *) output ubtxuart;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG uncorrecterr" *) output uncorrecterr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG ctrlrsvdout" *) output [31:0]ctrlrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG gpo" *) output [15:0]gpo;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG hsclk0_rxrecclksel" *) output [1:0]hsclk0_rxrecclksel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_debug:1.0 GT_DEBUG hsclk1_rxrecclksel" *) output [1:0]hsclk1_rxrecclksel;
  input altclk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLCLKRSVD0" *) input hsclk0_lcpllclkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLCLKRSVD1" *) input hsclk0_lcpllclkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLCLKRSVD0" *) input hsclk0_rpllclkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLCLKRSVD1" *) input hsclk0_rpllclkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLCLKRSVD0" *) input hsclk1_lcpllclkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLCLKRSVD1" *) input hsclk1_lcpllclkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLCLKRSVD0" *) input hsclk1_rpllclkrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLCLKRSVD1" *) input hsclk1_rpllclkrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRSVD0" *) input [7:0]hsclk0_lcpllrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRSVD1" *) input [7:0]hsclk0_lcpllrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRSVD0" *) input [7:0]hsclk0_rpllrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRSVD1" *) input [7:0]hsclk0_rpllrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRSVD0" *) input [7:0]hsclk1_lcpllrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRSVD1" *) input [7:0]hsclk1_lcpllrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRSVD0" *) input [7:0]hsclk1_rpllrsvd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRSVD1" *) input [7:0]hsclk1_rpllrsvd1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_LCPLLRSVDOUT" *) output [7:0]hsclk0_lcpllrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_LCPLLRSVDOUT" *) output [7:0]hsclk1_lcpllrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK0_DEBUG HSCLK_RPLLRSVDOUT" *) output [7:0]hsclk0_rpllrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_hsclk_debug:1.0 HSCLK1_DEBUG HSCLK_RPLLRSVDOUT" *) output [7:0]hsclk1_rpllrsvdout;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 apb3clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME apb3clk, FREQ_HZ 99999901, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN bd_cc32_pspmc_0_0_pl0_ref_clk, INSERT_VIP 0" *) input apb3clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PADDR" *) input [15:0]apb3paddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PENABLE" *) input apb3penable;
  input apb3presetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PRDATA" *) output [31:0]apb3prdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PSEL" *) input apb3psel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PSLVERR" *) output apb3pslverr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PREADY" *) output apb3pready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PWDATA" *) input [31:0]apb3pwdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:apb:1.0 APB3_INTF PWRITE" *) input apb3pwrite;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GRX_P" *) input [3:0]rxp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GRX_N" *) input [3:0]rxn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GTX_P" *) output [3:0]txp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt:1.0 GT_Serial GTX_N" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_Serial, CAN_DEBUG false" *) output [3:0]txn;

  wire GT_REFCLK0;
  wire altclk;
  wire apb3clk;
  wire [15:0]apb3paddr;
  wire apb3penable;
  wire [31:0]apb3prdata;
  wire apb3pready;
  wire apb3presetn;
  wire apb3psel;
  wire apb3pslverr;
  wire [31:0]apb3pwdata;
  wire apb3pwrite;
  wire bgbypassb;
  wire bgmonitorenb;
  wire bgpdb;
  wire [4:0]bgrcalovrd;
  wire bgrcalovrdenb;
  wire ch0_bufgtce;
  wire [3:0]ch0_bufgtcemask;
  wire [11:0]ch0_bufgtdiv;
  wire ch0_bufgtrst;
  wire [3:0]ch0_bufgtrstmask;
  wire ch0_cdrbmcdrreq;
  wire ch0_cdrfreqos;
  wire ch0_cdrincpctrl;
  wire ch0_cdrstepdir;
  wire ch0_cdrstepsq;
  wire ch0_cdrstepsx;
  wire ch0_cfokovrdfinish;
  wire ch0_cfokovrdpulse;
  wire ch0_cfokovrdrdy0;
  wire ch0_cfokovrdrdy1;
  wire ch0_cfokovrdstart;
  wire ch0_clkrsvd0;
  wire ch0_clkrsvd1;
  wire ch0_dmonfiforeset;
  wire ch0_dmonitorclk;
  wire [31:0]ch0_dmonitorout;
  wire ch0_dmonitoroutclk;
  wire ch0_eyescandataerror;
  wire ch0_eyescanreset;
  wire ch0_eyescantrigger;
  wire [15:0]ch0_gtrsvd;
  wire ch0_gtrxreset;
  wire ch0_gttxreset;
  wire ch0_hsdppcsreset;
  wire ch0_iloreset;
  wire ch0_iloresetdone;
  wire ch0_iloresetmask;
  wire [2:0]ch0_loopback;
  wire ch0_pcierstb;
  wire [15:0]ch0_pcsrsvdin;
  wire [15:0]ch0_pcsrsvdout;
  wire ch0_phyesmadaptsave;
  wire ch0_phyready;
  wire ch0_phystatus;
  wire [15:0]ch0_pinrsvdas;
  wire ch0_resetexception;
  wire [7:0]ch0_rx10gstat;
  wire [2:0]ch0_rxbufstatus;
  wire ch0_rxbyteisaligned;
  wire ch0_rxbyterealign;
  wire ch0_rxcdrhold;
  wire ch0_rxcdrlock;
  wire ch0_rxcdrovrden;
  wire ch0_rxcdrphdone;
  wire ch0_rxcdrreset;
  wire ch0_rxchanbondseq;
  wire ch0_rxchanisaligned;
  wire ch0_rxchanrealign;
  wire [4:0]ch0_rxchbondi;
  wire [4:0]ch0_rxchbondo;
  wire [1:0]ch0_rxclkcorcnt;
  wire ch0_rxcominitdet;
  wire ch0_rxcommadet;
  wire ch0_rxcomsasdet;
  wire ch0_rxcomwakedet;
  wire [15:0]ch0_rxctrl0;
  wire [15:0]ch0_rxctrl1;
  wire [7:0]ch0_rxctrl2;
  wire [7:0]ch0_rxctrl3;
  wire ch0_rxdapicodeovrden;
  wire ch0_rxdapicodereset;
  wire [127:0]ch0_rxdata;
  wire [7:0]ch0_rxdataextendrsvd;
  wire [1:0]ch0_rxdatavalid;
  wire ch0_rxdccdone;
  wire ch0_rxdlyalignerr;
  wire ch0_rxdlyalignprog;
  wire ch0_rxdlyalignreq;
  wire ch0_rxelecidle;
  wire ch0_rxeqtraining;
  wire ch0_rxfinealigndone;
  wire ch0_rxgearboxslip;
  wire [5:0]ch0_rxheader;
  wire [1:0]ch0_rxheadervalid;
  wire ch0_rxlatclk;
  wire ch0_rxlpmen;
  wire ch0_rxmldchaindone;
  wire ch0_rxmldchainreq;
  wire ch0_rxmlfinealignreq;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire ch0_rxmstresetdone;
  wire ch0_rxoobreset;
  wire ch0_rxosintdone;
  wire ch0_rxosintstarted;
  wire ch0_rxosintstrobedone;
  wire ch0_rxosintstrobestarted;
  wire ch0_rxoutclk;
  wire [4:0]ch0_rxpcsresetmask;
  wire [1:0]ch0_rxpd;
  wire ch0_rxphaligndone;
  wire ch0_rxphalignerr;
  wire ch0_rxphalignreq;
  wire [1:0]ch0_rxphalignresetmask;
  wire ch0_rxphdlypd;
  wire ch0_rxphdlyreset;
  wire ch0_rxphdlyresetdone;
  wire ch0_rxphsetinitdone;
  wire ch0_rxphsetinitreq;
  wire ch0_rxphshift180;
  wire ch0_rxphshift180done;
  wire ch0_rxpmaresetdone;
  wire [6:0]ch0_rxpmaresetmask;
  wire ch0_rxpolarity;
  wire ch0_rxprbscntreset;
  wire ch0_rxprbserr;
  wire ch0_rxprbslocked;
  wire [3:0]ch0_rxprbssel;
  wire ch0_rxprogdivreset;
  wire ch0_rxprogdivresetdone;
  wire [7:0]ch0_rxrate;
  wire ch0_rxresetdone;
  wire [1:0]ch0_rxresetmode;
  wire ch0_rxslide;
  wire ch0_rxsliderdy;
  wire [1:0]ch0_rxstartofseq;
  wire [2:0]ch0_rxstatus;
  wire ch0_rxsyncallin;
  wire ch0_rxsyncdone;
  wire ch0_rxtermination;
  wire ch0_rxuserrdy;
  wire ch0_rxusrclk;
  wire ch0_rxvalid;
  wire [19:0]ch0_tstin;
  wire ch0_tx10gstat;
  wire [1:0]ch0_txbufstatus;
  wire ch0_txcomfinish;
  wire ch0_txcominit;
  wire ch0_txcomsas;
  wire ch0_txcomwake;
  wire [15:0]ch0_txctrl0;
  wire [15:0]ch0_txctrl1;
  wire [7:0]ch0_txctrl2;
  wire ch0_txdapicodeovrden;
  wire ch0_txdapicodereset;
  wire [127:0]ch0_txdata;
  wire [7:0]ch0_txdataextendrsvd;
  wire ch0_txdccdone;
  wire [1:0]ch0_txdeemph;
  wire ch0_txdetectrx;
  wire [4:0]ch0_txdiffctrl;
  wire ch0_txdlyalignerr;
  wire ch0_txdlyalignprog;
  wire ch0_txdlyalignreq;
  wire ch0_txelecidle;
  wire [5:0]ch0_txheader;
  wire ch0_txinhibit;
  wire ch0_txlatclk;
  wire [6:0]ch0_txmaincursor;
  wire [2:0]ch0_txmargin;
  wire ch0_txmldchaindone;
  wire ch0_txmldchainreq;
  wire ch0_txmstdatapathreset;
  wire ch0_txmstreset;
  wire ch0_txmstresetdone;
  wire ch0_txoneszeros;
  wire ch0_txoutclk;
  wire ch0_txpausedelayalign;
  wire ch0_txpcsresetmask;
  wire [1:0]ch0_txpd;
  wire ch0_txphaligndone;
  wire ch0_txphalignerr;
  wire ch0_txphalignoutrsvd;
  wire ch0_txphalignreq;
  wire [1:0]ch0_txphalignresetmask;
  wire ch0_txphdlypd;
  wire ch0_txphdlyreset;
  wire ch0_txphdlyresetdone;
  wire ch0_txphdlytstclk;
  wire ch0_txphsetinitdone;
  wire ch0_txphsetinitreq;
  wire ch0_txphshift180;
  wire ch0_txphshift180done;
  wire ch0_txpicodeovrden;
  wire ch0_txpicodereset;
  wire ch0_txpippmen;
  wire [4:0]ch0_txpippmstepsize;
  wire ch0_txpisopd;
  wire ch0_txpmaresetdone;
  wire [2:0]ch0_txpmaresetmask;
  wire ch0_txpolarity;
  wire [4:0]ch0_txpostcursor;
  wire ch0_txprbsforceerr;
  wire [3:0]ch0_txprbssel;
  wire [4:0]ch0_txprecursor;
  wire ch0_txprogdivreset;
  wire ch0_txprogdivresetdone;
  wire [7:0]ch0_txrate;
  wire ch0_txresetdone;
  wire [1:0]ch0_txresetmode;
  wire [6:0]ch0_txsequence;
  wire ch0_txswing;
  wire ch0_txsyncallin;
  wire ch0_txsyncdone;
  wire ch0_txuserrdy;
  wire ch0_txusrclk;
  wire ch1_bufgtce;
  wire [3:0]ch1_bufgtcemask;
  wire [11:0]ch1_bufgtdiv;
  wire ch1_bufgtrst;
  wire [3:0]ch1_bufgtrstmask;
  wire ch1_cdrbmcdrreq;
  wire ch1_cdrfreqos;
  wire ch1_cdrincpctrl;
  wire ch1_cdrstepdir;
  wire ch1_cdrstepsq;
  wire ch1_cdrstepsx;
  wire ch1_cfokovrdfinish;
  wire ch1_cfokovrdpulse;
  wire ch1_cfokovrdrdy0;
  wire ch1_cfokovrdrdy1;
  wire ch1_cfokovrdstart;
  wire ch1_clkrsvd0;
  wire ch1_clkrsvd1;
  wire ch1_dmonfiforeset;
  wire ch1_dmonitorclk;
  wire [31:0]ch1_dmonitorout;
  wire ch1_dmonitoroutclk;
  wire ch1_eyescandataerror;
  wire ch1_eyescanreset;
  wire ch1_eyescantrigger;
  wire [15:0]ch1_gtrsvd;
  wire ch1_gtrxreset;
  wire ch1_gttxreset;
  wire ch1_hsdppcsreset;
  wire ch1_iloreset;
  wire ch1_iloresetdone;
  wire ch1_iloresetmask;
  wire [2:0]ch1_loopback;
  wire ch1_pcierstb;
  wire [15:0]ch1_pcsrsvdin;
  wire [15:0]ch1_pcsrsvdout;
  wire ch1_phyesmadaptsave;
  wire ch1_phyready;
  wire ch1_phystatus;
  wire [15:0]ch1_pinrsvdas;
  wire ch1_resetexception;
  wire [7:0]ch1_rx10gstat;
  wire [2:0]ch1_rxbufstatus;
  wire ch1_rxbyteisaligned;
  wire ch1_rxbyterealign;
  wire ch1_rxcdrhold;
  wire ch1_rxcdrlock;
  wire ch1_rxcdrovrden;
  wire ch1_rxcdrphdone;
  wire ch1_rxcdrreset;
  wire ch1_rxchanbondseq;
  wire ch1_rxchanisaligned;
  wire ch1_rxchanrealign;
  wire [4:0]ch1_rxchbondi;
  wire [4:0]ch1_rxchbondo;
  wire [1:0]ch1_rxclkcorcnt;
  wire ch1_rxcominitdet;
  wire ch1_rxcommadet;
  wire ch1_rxcomsasdet;
  wire ch1_rxcomwakedet;
  wire [15:0]ch1_rxctrl0;
  wire [15:0]ch1_rxctrl1;
  wire [7:0]ch1_rxctrl2;
  wire [7:0]ch1_rxctrl3;
  wire ch1_rxdapicodeovrden;
  wire ch1_rxdapicodereset;
  wire [127:0]ch1_rxdata;
  wire [7:0]ch1_rxdataextendrsvd;
  wire [1:0]ch1_rxdatavalid;
  wire ch1_rxdccdone;
  wire ch1_rxdlyalignerr;
  wire ch1_rxdlyalignprog;
  wire ch1_rxdlyalignreq;
  wire ch1_rxelecidle;
  wire ch1_rxeqtraining;
  wire ch1_rxfinealigndone;
  wire ch1_rxgearboxslip;
  wire [5:0]ch1_rxheader;
  wire [1:0]ch1_rxheadervalid;
  wire ch1_rxlatclk;
  wire ch1_rxlpmen;
  wire ch1_rxmldchaindone;
  wire ch1_rxmldchainreq;
  wire ch1_rxmlfinealignreq;
  wire ch1_rxmstdatapathreset;
  wire ch1_rxmstreset;
  wire ch1_rxmstresetdone;
  wire ch1_rxoobreset;
  wire ch1_rxosintdone;
  wire ch1_rxosintstarted;
  wire ch1_rxosintstrobedone;
  wire ch1_rxosintstrobestarted;
  wire ch1_rxoutclk;
  wire [4:0]ch1_rxpcsresetmask;
  wire [1:0]ch1_rxpd;
  wire ch1_rxphaligndone;
  wire ch1_rxphalignerr;
  wire ch1_rxphalignreq;
  wire [1:0]ch1_rxphalignresetmask;
  wire ch1_rxphdlypd;
  wire ch1_rxphdlyreset;
  wire ch1_rxphdlyresetdone;
  wire ch1_rxphsetinitdone;
  wire ch1_rxphsetinitreq;
  wire ch1_rxphshift180;
  wire ch1_rxphshift180done;
  wire ch1_rxpmaresetdone;
  wire [6:0]ch1_rxpmaresetmask;
  wire ch1_rxpolarity;
  wire ch1_rxprbscntreset;
  wire ch1_rxprbserr;
  wire ch1_rxprbslocked;
  wire [3:0]ch1_rxprbssel;
  wire ch1_rxprogdivreset;
  wire ch1_rxprogdivresetdone;
  wire [7:0]ch1_rxrate;
  wire ch1_rxresetdone;
  wire [1:0]ch1_rxresetmode;
  wire ch1_rxslide;
  wire ch1_rxsliderdy;
  wire [1:0]ch1_rxstartofseq;
  wire [2:0]ch1_rxstatus;
  wire ch1_rxsyncallin;
  wire ch1_rxsyncdone;
  wire ch1_rxtermination;
  wire ch1_rxuserrdy;
  wire ch1_rxusrclk;
  wire ch1_rxvalid;
  wire [19:0]ch1_tstin;
  wire ch1_tx10gstat;
  wire [1:0]ch1_txbufstatus;
  wire ch1_txcomfinish;
  wire ch1_txcominit;
  wire ch1_txcomsas;
  wire ch1_txcomwake;
  wire [15:0]ch1_txctrl0;
  wire [15:0]ch1_txctrl1;
  wire [7:0]ch1_txctrl2;
  wire ch1_txdapicodeovrden;
  wire ch1_txdapicodereset;
  wire [127:0]ch1_txdata;
  wire [7:0]ch1_txdataextendrsvd;
  wire ch1_txdccdone;
  wire [1:0]ch1_txdeemph;
  wire ch1_txdetectrx;
  wire [4:0]ch1_txdiffctrl;
  wire ch1_txdlyalignerr;
  wire ch1_txdlyalignprog;
  wire ch1_txdlyalignreq;
  wire ch1_txelecidle;
  wire [5:0]ch1_txheader;
  wire ch1_txinhibit;
  wire ch1_txlatclk;
  wire [6:0]ch1_txmaincursor;
  wire [2:0]ch1_txmargin;
  wire ch1_txmldchaindone;
  wire ch1_txmldchainreq;
  wire ch1_txmstdatapathreset;
  wire ch1_txmstreset;
  wire ch1_txmstresetdone;
  wire ch1_txoneszeros;
  wire ch1_txoutclk;
  wire ch1_txpausedelayalign;
  wire ch1_txpcsresetmask;
  wire [1:0]ch1_txpd;
  wire ch1_txphaligndone;
  wire ch1_txphalignerr;
  wire ch1_txphalignoutrsvd;
  wire ch1_txphalignreq;
  wire [1:0]ch1_txphalignresetmask;
  wire ch1_txphdlypd;
  wire ch1_txphdlyreset;
  wire ch1_txphdlyresetdone;
  wire ch1_txphdlytstclk;
  wire ch1_txphsetinitdone;
  wire ch1_txphsetinitreq;
  wire ch1_txphshift180;
  wire ch1_txphshift180done;
  wire ch1_txpicodeovrden;
  wire ch1_txpicodereset;
  wire ch1_txpippmen;
  wire [4:0]ch1_txpippmstepsize;
  wire ch1_txpisopd;
  wire ch1_txpmaresetdone;
  wire [2:0]ch1_txpmaresetmask;
  wire ch1_txpolarity;
  wire [4:0]ch1_txpostcursor;
  wire ch1_txprbsforceerr;
  wire [3:0]ch1_txprbssel;
  wire [4:0]ch1_txprecursor;
  wire ch1_txprogdivreset;
  wire ch1_txprogdivresetdone;
  wire [7:0]ch1_txrate;
  wire ch1_txresetdone;
  wire [1:0]ch1_txresetmode;
  wire [6:0]ch1_txsequence;
  wire ch1_txswing;
  wire ch1_txsyncallin;
  wire ch1_txsyncdone;
  wire ch1_txuserrdy;
  wire ch1_txusrclk;
  wire ch2_bufgtce;
  wire [3:0]ch2_bufgtcemask;
  wire [11:0]ch2_bufgtdiv;
  wire ch2_bufgtrst;
  wire [3:0]ch2_bufgtrstmask;
  wire ch2_cdrbmcdrreq;
  wire ch2_cdrfreqos;
  wire ch2_cdrincpctrl;
  wire ch2_cdrstepdir;
  wire ch2_cdrstepsq;
  wire ch2_cdrstepsx;
  wire ch2_cfokovrdfinish;
  wire ch2_cfokovrdpulse;
  wire ch2_cfokovrdrdy0;
  wire ch2_cfokovrdrdy1;
  wire ch2_cfokovrdstart;
  wire ch2_clkrsvd0;
  wire ch2_clkrsvd1;
  wire ch2_dmonfiforeset;
  wire ch2_dmonitorclk;
  wire [31:0]ch2_dmonitorout;
  wire ch2_dmonitoroutclk;
  wire ch2_eyescandataerror;
  wire ch2_eyescanreset;
  wire ch2_eyescantrigger;
  wire [15:0]ch2_gtrsvd;
  wire ch2_gtrxreset;
  wire ch2_gttxreset;
  wire ch2_hsdppcsreset;
  wire ch2_iloreset;
  wire ch2_iloresetdone;
  wire ch2_iloresetmask;
  wire [2:0]ch2_loopback;
  wire ch2_pcierstb;
  wire [15:0]ch2_pcsrsvdin;
  wire [15:0]ch2_pcsrsvdout;
  wire ch2_phyesmadaptsave;
  wire ch2_phyready;
  wire ch2_phystatus;
  wire [15:0]ch2_pinrsvdas;
  wire ch2_resetexception;
  wire [7:0]ch2_rx10gstat;
  wire [2:0]ch2_rxbufstatus;
  wire ch2_rxbyteisaligned;
  wire ch2_rxbyterealign;
  wire ch2_rxcdrhold;
  wire ch2_rxcdrlock;
  wire ch2_rxcdrovrden;
  wire ch2_rxcdrphdone;
  wire ch2_rxcdrreset;
  wire ch2_rxchanbondseq;
  wire ch2_rxchanisaligned;
  wire ch2_rxchanrealign;
  wire [4:0]ch2_rxchbondi;
  wire [4:0]ch2_rxchbondo;
  wire [1:0]ch2_rxclkcorcnt;
  wire ch2_rxcominitdet;
  wire ch2_rxcommadet;
  wire ch2_rxcomsasdet;
  wire ch2_rxcomwakedet;
  wire [15:0]ch2_rxctrl0;
  wire [15:0]ch2_rxctrl1;
  wire [7:0]ch2_rxctrl2;
  wire [7:0]ch2_rxctrl3;
  wire ch2_rxdapicodeovrden;
  wire ch2_rxdapicodereset;
  wire [127:0]ch2_rxdata;
  wire [7:0]ch2_rxdataextendrsvd;
  wire [1:0]ch2_rxdatavalid;
  wire ch2_rxdccdone;
  wire ch2_rxdlyalignerr;
  wire ch2_rxdlyalignprog;
  wire ch2_rxdlyalignreq;
  wire ch2_rxelecidle;
  wire ch2_rxeqtraining;
  wire ch2_rxfinealigndone;
  wire ch2_rxgearboxslip;
  wire [5:0]ch2_rxheader;
  wire [1:0]ch2_rxheadervalid;
  wire ch2_rxlatclk;
  wire ch2_rxlpmen;
  wire ch2_rxmldchaindone;
  wire ch2_rxmldchainreq;
  wire ch2_rxmlfinealignreq;
  wire ch2_rxmstdatapathreset;
  wire ch2_rxmstreset;
  wire ch2_rxmstresetdone;
  wire ch2_rxoobreset;
  wire ch2_rxosintdone;
  wire ch2_rxosintstarted;
  wire ch2_rxosintstrobedone;
  wire ch2_rxosintstrobestarted;
  wire ch2_rxoutclk;
  wire [4:0]ch2_rxpcsresetmask;
  wire [1:0]ch2_rxpd;
  wire ch2_rxphaligndone;
  wire ch2_rxphalignerr;
  wire ch2_rxphalignreq;
  wire [1:0]ch2_rxphalignresetmask;
  wire ch2_rxphdlypd;
  wire ch2_rxphdlyreset;
  wire ch2_rxphdlyresetdone;
  wire ch2_rxphsetinitdone;
  wire ch2_rxphsetinitreq;
  wire ch2_rxphshift180;
  wire ch2_rxphshift180done;
  wire ch2_rxpmaresetdone;
  wire [6:0]ch2_rxpmaresetmask;
  wire ch2_rxpolarity;
  wire ch2_rxprbscntreset;
  wire ch2_rxprbserr;
  wire ch2_rxprbslocked;
  wire [3:0]ch2_rxprbssel;
  wire ch2_rxprogdivreset;
  wire ch2_rxprogdivresetdone;
  wire [7:0]ch2_rxrate;
  wire ch2_rxresetdone;
  wire [1:0]ch2_rxresetmode;
  wire ch2_rxslide;
  wire ch2_rxsliderdy;
  wire [1:0]ch2_rxstartofseq;
  wire [2:0]ch2_rxstatus;
  wire ch2_rxsyncallin;
  wire ch2_rxsyncdone;
  wire ch2_rxtermination;
  wire ch2_rxuserrdy;
  wire ch2_rxusrclk;
  wire ch2_rxvalid;
  wire [19:0]ch2_tstin;
  wire ch2_tx10gstat;
  wire [1:0]ch2_txbufstatus;
  wire ch2_txcomfinish;
  wire ch2_txcominit;
  wire ch2_txcomsas;
  wire ch2_txcomwake;
  wire [15:0]ch2_txctrl0;
  wire [15:0]ch2_txctrl1;
  wire [7:0]ch2_txctrl2;
  wire ch2_txdapicodeovrden;
  wire ch2_txdapicodereset;
  wire [127:0]ch2_txdata;
  wire [7:0]ch2_txdataextendrsvd;
  wire ch2_txdccdone;
  wire [1:0]ch2_txdeemph;
  wire ch2_txdetectrx;
  wire [4:0]ch2_txdiffctrl;
  wire ch2_txdlyalignerr;
  wire ch2_txdlyalignprog;
  wire ch2_txdlyalignreq;
  wire ch2_txelecidle;
  wire [5:0]ch2_txheader;
  wire ch2_txinhibit;
  wire ch2_txlatclk;
  wire [6:0]ch2_txmaincursor;
  wire [2:0]ch2_txmargin;
  wire ch2_txmldchaindone;
  wire ch2_txmldchainreq;
  wire ch2_txmstdatapathreset;
  wire ch2_txmstreset;
  wire ch2_txmstresetdone;
  wire ch2_txoneszeros;
  wire ch2_txoutclk;
  wire ch2_txpausedelayalign;
  wire ch2_txpcsresetmask;
  wire [1:0]ch2_txpd;
  wire ch2_txphaligndone;
  wire ch2_txphalignerr;
  wire ch2_txphalignoutrsvd;
  wire ch2_txphalignreq;
  wire [1:0]ch2_txphalignresetmask;
  wire ch2_txphdlypd;
  wire ch2_txphdlyreset;
  wire ch2_txphdlyresetdone;
  wire ch2_txphdlytstclk;
  wire ch2_txphsetinitdone;
  wire ch2_txphsetinitreq;
  wire ch2_txphshift180;
  wire ch2_txphshift180done;
  wire ch2_txpicodeovrden;
  wire ch2_txpicodereset;
  wire ch2_txpippmen;
  wire [4:0]ch2_txpippmstepsize;
  wire ch2_txpisopd;
  wire ch2_txpmaresetdone;
  wire [2:0]ch2_txpmaresetmask;
  wire ch2_txpolarity;
  wire [4:0]ch2_txpostcursor;
  wire ch2_txprbsforceerr;
  wire [3:0]ch2_txprbssel;
  wire [4:0]ch2_txprecursor;
  wire ch2_txprogdivreset;
  wire ch2_txprogdivresetdone;
  wire [7:0]ch2_txrate;
  wire ch2_txresetdone;
  wire [1:0]ch2_txresetmode;
  wire [6:0]ch2_txsequence;
  wire ch2_txswing;
  wire ch2_txsyncallin;
  wire ch2_txsyncdone;
  wire ch2_txuserrdy;
  wire ch2_txusrclk;
  wire ch3_bufgtce;
  wire [3:0]ch3_bufgtcemask;
  wire [11:0]ch3_bufgtdiv;
  wire ch3_bufgtrst;
  wire [3:0]ch3_bufgtrstmask;
  wire ch3_cdrbmcdrreq;
  wire ch3_cdrfreqos;
  wire ch3_cdrincpctrl;
  wire ch3_cdrstepdir;
  wire ch3_cdrstepsq;
  wire ch3_cdrstepsx;
  wire ch3_cfokovrdfinish;
  wire ch3_cfokovrdpulse;
  wire ch3_cfokovrdrdy0;
  wire ch3_cfokovrdrdy1;
  wire ch3_cfokovrdstart;
  wire ch3_clkrsvd0;
  wire ch3_clkrsvd1;
  wire ch3_dmonfiforeset;
  wire ch3_dmonitorclk;
  wire [31:0]ch3_dmonitorout;
  wire ch3_dmonitoroutclk;
  wire ch3_eyescandataerror;
  wire ch3_eyescanreset;
  wire ch3_eyescantrigger;
  wire [15:0]ch3_gtrsvd;
  wire ch3_gtrxreset;
  wire ch3_gttxreset;
  wire ch3_hsdppcsreset;
  wire ch3_iloreset;
  wire ch3_iloresetdone;
  wire ch3_iloresetmask;
  wire [2:0]ch3_loopback;
  wire ch3_pcierstb;
  wire [15:0]ch3_pcsrsvdin;
  wire [15:0]ch3_pcsrsvdout;
  wire ch3_phyesmadaptsave;
  wire ch3_phyready;
  wire ch3_phystatus;
  wire [15:0]ch3_pinrsvdas;
  wire ch3_resetexception;
  wire [7:0]ch3_rx10gstat;
  wire [2:0]ch3_rxbufstatus;
  wire ch3_rxbyteisaligned;
  wire ch3_rxbyterealign;
  wire ch3_rxcdrhold;
  wire ch3_rxcdrlock;
  wire ch3_rxcdrovrden;
  wire ch3_rxcdrphdone;
  wire ch3_rxcdrreset;
  wire ch3_rxchanbondseq;
  wire ch3_rxchanisaligned;
  wire ch3_rxchanrealign;
  wire [4:0]ch3_rxchbondi;
  wire [4:0]ch3_rxchbondo;
  wire [1:0]ch3_rxclkcorcnt;
  wire ch3_rxcominitdet;
  wire ch3_rxcommadet;
  wire ch3_rxcomsasdet;
  wire ch3_rxcomwakedet;
  wire [15:0]ch3_rxctrl0;
  wire [15:0]ch3_rxctrl1;
  wire [7:0]ch3_rxctrl2;
  wire [7:0]ch3_rxctrl3;
  wire ch3_rxdapicodeovrden;
  wire ch3_rxdapicodereset;
  wire [127:0]ch3_rxdata;
  wire [7:0]ch3_rxdataextendrsvd;
  wire [1:0]ch3_rxdatavalid;
  wire ch3_rxdccdone;
  wire ch3_rxdlyalignerr;
  wire ch3_rxdlyalignprog;
  wire ch3_rxdlyalignreq;
  wire ch3_rxelecidle;
  wire ch3_rxeqtraining;
  wire ch3_rxfinealigndone;
  wire ch3_rxgearboxslip;
  wire [5:0]ch3_rxheader;
  wire [1:0]ch3_rxheadervalid;
  wire ch3_rxlatclk;
  wire ch3_rxlpmen;
  wire ch3_rxmldchaindone;
  wire ch3_rxmldchainreq;
  wire ch3_rxmlfinealignreq;
  wire ch3_rxmstdatapathreset;
  wire ch3_rxmstreset;
  wire ch3_rxmstresetdone;
  wire ch3_rxoobreset;
  wire ch3_rxosintdone;
  wire ch3_rxosintstarted;
  wire ch3_rxosintstrobedone;
  wire ch3_rxosintstrobestarted;
  wire ch3_rxoutclk;
  wire [4:0]ch3_rxpcsresetmask;
  wire [1:0]ch3_rxpd;
  wire ch3_rxphaligndone;
  wire ch3_rxphalignerr;
  wire ch3_rxphalignreq;
  wire [1:0]ch3_rxphalignresetmask;
  wire ch3_rxphdlypd;
  wire ch3_rxphdlyreset;
  wire ch3_rxphdlyresetdone;
  wire ch3_rxphsetinitdone;
  wire ch3_rxphsetinitreq;
  wire ch3_rxphshift180;
  wire ch3_rxphshift180done;
  wire ch3_rxpmaresetdone;
  wire [6:0]ch3_rxpmaresetmask;
  wire ch3_rxpolarity;
  wire ch3_rxprbscntreset;
  wire ch3_rxprbserr;
  wire ch3_rxprbslocked;
  wire [3:0]ch3_rxprbssel;
  wire ch3_rxprogdivreset;
  wire ch3_rxprogdivresetdone;
  wire [7:0]ch3_rxrate;
  wire ch3_rxresetdone;
  wire [1:0]ch3_rxresetmode;
  wire ch3_rxslide;
  wire ch3_rxsliderdy;
  wire [1:0]ch3_rxstartofseq;
  wire [2:0]ch3_rxstatus;
  wire ch3_rxsyncallin;
  wire ch3_rxsyncdone;
  wire ch3_rxtermination;
  wire ch3_rxuserrdy;
  wire ch3_rxusrclk;
  wire ch3_rxvalid;
  wire [19:0]ch3_tstin;
  wire ch3_tx10gstat;
  wire [1:0]ch3_txbufstatus;
  wire ch3_txcomfinish;
  wire ch3_txcominit;
  wire ch3_txcomsas;
  wire ch3_txcomwake;
  wire [15:0]ch3_txctrl0;
  wire [15:0]ch3_txctrl1;
  wire [7:0]ch3_txctrl2;
  wire ch3_txdapicodeovrden;
  wire ch3_txdapicodereset;
  wire [127:0]ch3_txdata;
  wire [7:0]ch3_txdataextendrsvd;
  wire ch3_txdccdone;
  wire [1:0]ch3_txdeemph;
  wire ch3_txdetectrx;
  wire [4:0]ch3_txdiffctrl;
  wire ch3_txdlyalignerr;
  wire ch3_txdlyalignprog;
  wire ch3_txdlyalignreq;
  wire ch3_txelecidle;
  wire [5:0]ch3_txheader;
  wire ch3_txinhibit;
  wire ch3_txlatclk;
  wire [6:0]ch3_txmaincursor;
  wire [2:0]ch3_txmargin;
  wire ch3_txmldchaindone;
  wire ch3_txmldchainreq;
  wire ch3_txmstdatapathreset;
  wire ch3_txmstreset;
  wire ch3_txmstresetdone;
  wire ch3_txoneszeros;
  wire ch3_txoutclk;
  wire ch3_txpausedelayalign;
  wire ch3_txpcsresetmask;
  wire [1:0]ch3_txpd;
  wire ch3_txphaligndone;
  wire ch3_txphalignerr;
  wire ch3_txphalignoutrsvd;
  wire ch3_txphalignreq;
  wire [1:0]ch3_txphalignresetmask;
  wire ch3_txphdlypd;
  wire ch3_txphdlyreset;
  wire ch3_txphdlyresetdone;
  wire ch3_txphdlytstclk;
  wire ch3_txphsetinitdone;
  wire ch3_txphsetinitreq;
  wire ch3_txphshift180;
  wire ch3_txphshift180done;
  wire ch3_txpicodeovrden;
  wire ch3_txpicodereset;
  wire ch3_txpippmen;
  wire [4:0]ch3_txpippmstepsize;
  wire ch3_txpisopd;
  wire ch3_txpmaresetdone;
  wire [2:0]ch3_txpmaresetmask;
  wire ch3_txpolarity;
  wire [4:0]ch3_txpostcursor;
  wire ch3_txprbsforceerr;
  wire [3:0]ch3_txprbssel;
  wire [4:0]ch3_txprecursor;
  wire ch3_txprogdivreset;
  wire ch3_txprogdivresetdone;
  wire [7:0]ch3_txrate;
  wire ch3_txresetdone;
  wire [1:0]ch3_txresetmode;
  wire [6:0]ch3_txsequence;
  wire ch3_txswing;
  wire ch3_txsyncallin;
  wire ch3_txsyncdone;
  wire ch3_txuserrdy;
  wire ch3_txusrclk;
  wire correcterr;
  wire [15:0]ctrlrsvdin0;
  wire [13:0]ctrlrsvdin1;
  wire [31:0]ctrlrsvdout;
  wire debugtraceclk;
  wire debugtraceready;
  wire [15:0]debugtracetdata;
  wire debugtracetvalid;
  wire [15:0]gpi;
  wire [15:0]gpo;
  wire gtpowergood;
  wire hsclk0_lcpllclkrsvd0;
  wire hsclk0_lcpllclkrsvd1;
  wire hsclk0_lcpllfbclklost;
  wire [7:0]hsclk0_lcpllfbdiv;
  wire hsclk0_lcplllock;
  wire hsclk0_lcpllpd;
  wire hsclk0_lcpllrefclklost;
  wire hsclk0_lcpllrefclkmonitor;
  wire [2:0]hsclk0_lcpllrefclksel;
  wire hsclk0_lcpllreset;
  wire hsclk0_lcpllresetbypassmode;
  wire [1:0]hsclk0_lcpllresetmask;
  wire [7:0]hsclk0_lcpllrsvd0;
  wire [7:0]hsclk0_lcpllrsvd1;
  wire [7:0]hsclk0_lcpllrsvdout;
  wire [25:0]hsclk0_lcpllsdmdata;
  wire hsclk0_lcpllsdmtoggle;
  wire hsclk0_rpllclkrsvd0;
  wire hsclk0_rpllclkrsvd1;
  wire hsclk0_rpllfbclklost;
  wire [7:0]hsclk0_rpllfbdiv;
  wire hsclk0_rplllock;
  wire hsclk0_rpllpd;
  wire hsclk0_rpllrefclklost;
  wire hsclk0_rpllrefclkmonitor;
  wire [2:0]hsclk0_rpllrefclksel;
  wire hsclk0_rpllreset;
  wire hsclk0_rpllresetbypassmode;
  wire [1:0]hsclk0_rpllresetmask;
  wire [7:0]hsclk0_rpllrsvd0;
  wire [7:0]hsclk0_rpllrsvd1;
  wire [7:0]hsclk0_rpllrsvdout;
  wire [25:0]hsclk0_rpllsdmdata;
  wire hsclk0_rpllsdmtoggle;
  wire hsclk0_rxrecclkout0;
  wire hsclk0_rxrecclkout1;
  wire [1:0]hsclk0_rxrecclksel;
  wire hsclk1_lcpllclkrsvd0;
  wire hsclk1_lcpllclkrsvd1;
  wire hsclk1_lcpllfbclklost;
  wire [7:0]hsclk1_lcpllfbdiv;
  wire hsclk1_lcplllock;
  wire hsclk1_lcpllpd;
  wire hsclk1_lcpllrefclklost;
  wire hsclk1_lcpllrefclkmonitor;
  wire [2:0]hsclk1_lcpllrefclksel;
  wire hsclk1_lcpllreset;
  wire hsclk1_lcpllresetbypassmode;
  wire [1:0]hsclk1_lcpllresetmask;
  wire [7:0]hsclk1_lcpllrsvd0;
  wire [7:0]hsclk1_lcpllrsvd1;
  wire [7:0]hsclk1_lcpllrsvdout;
  wire [25:0]hsclk1_lcpllsdmdata;
  wire hsclk1_lcpllsdmtoggle;
  wire hsclk1_rpllclkrsvd0;
  wire hsclk1_rpllclkrsvd1;
  wire hsclk1_rpllfbclklost;
  wire [7:0]hsclk1_rpllfbdiv;
  wire hsclk1_rplllock;
  wire hsclk1_rpllpd;
  wire hsclk1_rpllrefclklost;
  wire hsclk1_rpllrefclkmonitor;
  wire [2:0]hsclk1_rpllrefclksel;
  wire hsclk1_rpllreset;
  wire hsclk1_rpllresetbypassmode;
  wire [1:0]hsclk1_rpllresetmask;
  wire [7:0]hsclk1_rpllrsvd0;
  wire [7:0]hsclk1_rpllrsvd1;
  wire [7:0]hsclk1_rpllrsvdout;
  wire [25:0]hsclk1_rpllsdmdata;
  wire hsclk1_rpllsdmtoggle;
  wire hsclk1_rxrecclkout0;
  wire hsclk1_rxrecclkout1;
  wire [1:0]hsclk1_rxrecclksel;
  wire pcielinkreachtarget;
  wire [5:0]pcieltssm;
  wire [5:0]pipenorthin;
  wire [5:0]pipenorthout;
  wire [5:0]pipesouthin;
  wire [5:0]pipesouthout;
  wire rcalenb;
  wire refclk0_clktestsig;
  wire refclk0_clktestsigint;
  wire refclk0_gtrefclkpd;
  wire refclk0_gtrefclkpdint;
  wire refclk1_clktestsig;
  wire refclk1_clktestsigint;
  wire refclk1_gtrefclkpd;
  wire refclk1_gtrefclkpdint;
  wire [1:0]resetdone_northin;
  wire [1:0]resetdone_northout;
  wire [1:0]resetdone_southin;
  wire [1:0]resetdone_southout;
  wire rxmarginclk;
  wire rxmarginreqack;
  wire [3:0]rxmarginreqcmd;
  wire [1:0]rxmarginreqlanenum;
  wire [7:0]rxmarginreqpayld;
  wire rxmarginreqreq;
  wire rxmarginresack;
  wire [3:0]rxmarginrescmd;
  wire [1:0]rxmarginreslanenum;
  wire [7:0]rxmarginrespayld;
  wire rxmarginresreq;
  wire [3:0]rxn;
  wire [3:0]rxp;
  wire [3:0]rxpinorthin;
  wire [3:0]rxpinorthout;
  wire [3:0]rxpisouthin;
  wire [3:0]rxpisouthout;
  wire trigackin0;
  wire trigackout0;
  wire trigin0;
  wire trigout0;
  wire [3:0]txn;
  wire [3:0]txp;
  wire [3:0]txpinorthin;
  wire [3:0]txpinorthout;
  wire [3:0]txpisouthin;
  wire [3:0]txpisouthout;
  wire ubenable;
  wire ubinterrupt;
  wire [11:0]ubintr;
  wire ubiolmbrst;
  wire ubmbrst;
  wire ubrxuart;
  wire ubtxuart;
  wire uncorrecterr;
  wire NLW_inst_s_axi_lite_arready_UNCONNECTED;
  wire NLW_inst_s_axi_lite_awready_UNCONNECTED;
  wire NLW_inst_s_axi_lite_bvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_rvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_wready_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_lite_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_lite_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_lite_rresp_UNCONNECTED;

  (* A_CFG0 = "1856" *) 
  (* A_CFG1 = "1309822482" *) 
  (* A_CFG2 = "1610612736" *) 
  (* A_CFG3 = "-536870912" *) 
  (* A_CFG4 = "1610612736" *) 
  (* A_CFG5 = "-536870912" *) 
  (* CH0_ADAPT_APT_CFG = "0" *) 
  (* CH0_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH0_ADAPT_DFE_CFG = "64" *) 
  (* CH0_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH0_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH0_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH0_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH0_ADAPT_GEN_CFG0 = "3276800" *) 
  (* CH0_ADAPT_GEN_CFG1 = "0" *) 
  (* CH0_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH0_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH0_ADAPT_H01_CFG = "18875040" *) 
  (* CH0_ADAPT_H23_CFG = "27263392" *) 
  (* CH0_ADAPT_H45_CFG = "27263392" *) 
  (* CH0_ADAPT_H67_CFG = "27263392" *) 
  (* CH0_ADAPT_H89_CFG = "27263392" *) 
  (* CH0_ADAPT_HAB_CFG = "27263392" *) 
  (* CH0_ADAPT_HCD_CFG = "27263392" *) 
  (* CH0_ADAPT_HEF_CFG = "27263904" *) 
  (* CH0_ADAPT_KH_CFG0 = "537427519" *) 
  (* CH0_ADAPT_KH_CFG1 = "0" *) 
  (* CH0_ADAPT_KH_CFG2 = "17312" *) 
  (* CH0_ADAPT_KH_CFG3 = "0" *) 
  (* CH0_ADAPT_KH_CFG4 = "31648" *) 
  (* CH0_ADAPT_KH_CFG5 = "0" *) 
  (* CH0_ADAPT_KL_CFG0 = "32288" *) 
  (* CH0_ADAPT_KL_CFG1 = "17312" *) 
  (* CH0_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH0_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH0_ADAPT_LCK_CFG2 = "0" *) 
  (* CH0_ADAPT_LCK_CFG3 = "0" *) 
  (* CH0_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH0_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH0_CHCLK_ILO_CFG = "6553651" *) 
  (* CH0_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH0_CHCLK_RSV_CFG = "0" *) 
  (* CH0_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH0_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH0_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH0_CHCLK_RXPI_CFG = "5244940" *) 
  (* CH0_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH0_CHCLK_TXPI_CFG0 = "4655119" *) 
  (* CH0_CHL_RSV_CFG0 = "-1073741815" *) 
  (* CH0_CHL_RSV_CFG1 = "0" *) 
  (* CH0_CHL_RSV_CFG2 = "0" *) 
  (* CH0_CHL_RSV_CFG3 = "0" *) 
  (* CH0_CHL_RSV_CFG4 = "0" *) 
  (* CH0_DA_CFG = "655370" *) 
  (* CH0_EYESCAN_CFG0 = "2048" *) 
  (* CH0_EYESCAN_CFG1 = "0" *) 
  (* CH0_EYESCAN_CFG10 = "0" *) 
  (* CH0_EYESCAN_CFG11 = "0" *) 
  (* CH0_EYESCAN_CFG12 = "0" *) 
  (* CH0_EYESCAN_CFG13 = "0" *) 
  (* CH0_EYESCAN_CFG14 = "0" *) 
  (* CH0_EYESCAN_CFG15 = "0" *) 
  (* CH0_EYESCAN_CFG16 = "0" *) 
  (* CH0_EYESCAN_CFG2 = "0" *) 
  (* CH0_EYESCAN_CFG3 = "0" *) 
  (* CH0_EYESCAN_CFG4 = "0" *) 
  (* CH0_EYESCAN_CFG5 = "0" *) 
  (* CH0_EYESCAN_CFG6 = "0" *) 
  (* CH0_EYESCAN_CFG7 = "0" *) 
  (* CH0_EYESCAN_CFG8 = "0" *) 
  (* CH0_EYESCAN_CFG9 = "0" *) 
  (* CH0_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH0_FABRIC_INTF_CFG1 = "33792" *) 
  (* CH0_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH0_FABRIC_INTF_CFG3 = "0" *) 
  (* CH0_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH0_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH0_INSTANTIATED = "1" *) 
  (* CH0_MONITOR_CFG = "0" *) 
  (* CH0_PIPE_CTRL_CFG0 = "280672" *) 
  (* CH0_PIPE_CTRL_CFG1 = "2097811" *) 
  (* CH0_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH0_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH0_PIPE_CTRL_CFG3 = "77070639" *) 
  (* CH0_PIPE_CTRL_CFG4 = "4456448" *) 
  (* CH0_PIPE_CTRL_CFG5 = "536870912" *) 
  (* CH0_PIPE_CTRL_CFG6 = "1032847460" *) 
  (* CH0_PIPE_CTRL_CFG7 = "68276509" *) 
  (* CH0_PIPE_CTRL_CFG8 = "33841432" *) 
  (* CH0_PIPE_CTRL_CFG9 = "-2138046464" *) 
  (* CH0_PIPE_TX_EQ_CFG0 = "175467480" *) 
  (* CH0_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH0_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH0_PIPE_TX_EQ_CFG3 = "402" *) 
  (* CH0_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH0_RESET_CFG = "135266341" *) 
  (* CH0_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH0_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH0_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH0_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH0_RESET_TIME_CFG0 = "34636801" *) 
  (* CH0_RESET_TIME_CFG1 = "34636833" *) 
  (* CH0_RESET_TIME_CFG2 = "34636833" *) 
  (* CH0_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH0_RXOUTCLK_FREQ = "60.606100" *) 
  (* CH0_RXOUTCLK_REF_FREQ = "400" *) 
  (* CH0_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH0_RX_CDR_CFG0 = "-1274740670" *) 
  (* CH0_RX_CDR_CFG1 = "1610612992" *) 
  (* CH0_RX_CDR_CFG2 = "134236745" *) 
  (* CH0_RX_CDR_CFG3 = "744694" *) 
  (* CH0_RX_CDR_CFG4 = "607924224" *) 
  (* CH0_RX_CRC_CFG0 = "30848" *) 
  (* CH0_RX_CRC_CFG1 = "505290270" *) 
  (* CH0_RX_CRC_CFG2 = "505290270" *) 
  (* CH0_RX_CRC_CFG3 = "-1" *) 
  (* CH0_RX_CTLE_CFG0 = "31195392" *) 
  (* CH0_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH0_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH0_RX_DFE_CFG0 = "-805153784" *) 
  (* CH0_RX_ELASTIC_BUF_CFG0 = "4204412" *) 
  (* CH0_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH0_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH0_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH0_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH0_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH0_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH0_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH0_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH0_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH0_RX_MISC_CFG0 = "1342177280" *) 
  (* CH0_RX_OOB_CFG0 = "609534468" *) 
  (* CH0_RX_OOB_CFG1 = "16925124" *) 
  (* CH0_RX_PAD_CFG0 = "0" *) 
  (* CH0_RX_PAD_CFG1 = "272910714" *) 
  (* CH0_RX_PCS_CFG0 = "674623792" *) 
  (* CH0_RX_PCS_CFG1 = "-1274804224" *) 
  (* CH0_RX_PCS_CFG2 = "241" *) 
  (* CH0_RX_PCS_CFG3 = "471404303" *) 
  (* CH0_RX_PCS_CFG4 = "1115725826" *) 
  (* CH0_RX_PHALIGN_CFG0 = "1146883" *) 
  (* CH0_RX_PHALIGN_CFG1 = "1485013002" *) 
  (* CH0_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH0_RX_PHALIGN_CFG3 = "1476624384" *) 
  (* CH0_RX_PHALIGN_CFG4 = "522" *) 
  (* CH0_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH0_SIM_MODE = "FAST" *) 
  (* CH0_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH0_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH0_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH0_TXOUTCLK_FREQ = "60.606100" *) 
  (* CH0_TXOUTCLK_REF_FREQ = "400" *) 
  (* CH0_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH0_TX_10G_CFG0 = "0" *) 
  (* CH0_TX_10G_CFG1 = "1073741824" *) 
  (* CH0_TX_10G_CFG2 = "0" *) 
  (* CH0_TX_10G_CFG3 = "0" *) 
  (* CH0_TX_ANA_CFG0 = "208" *) 
  (* CH0_TX_CRC_CFG0 = "30720" *) 
  (* CH0_TX_CRC_CFG1 = "505290270" *) 
  (* CH0_TX_CRC_CFG2 = "505290270" *) 
  (* CH0_TX_CRC_CFG3 = "-1" *) 
  (* CH0_TX_DRV_CFG0 = "4194304" *) 
  (* CH0_TX_DRV_CFG1 = "6144" *) 
  (* CH0_TX_PCS_CFG0 = "1650458929" *) 
  (* CH0_TX_PCS_CFG1 = "674583932" *) 
  (* CH0_TX_PCS_CFG2 = "357954218" *) 
  (* CH0_TX_PCS_CFG3 = "699011" *) 
  (* CH0_TX_PHALIGN_CFG0 = "1146880" *) 
  (* CH0_TX_PHALIGN_CFG1 = "46428165" *) 
  (* CH0_TX_PHALIGN_CFG2 = "360504" *) 
  (* CH0_TX_PHALIGN_CFG3 = "0" *) 
  (* CH0_TX_PHALIGN_CFG4 = "404095200" *) 
  (* CH0_TX_PHALIGN_CFG5 = "256" *) 
  (* CH0_TX_PIPPM_CFG = "33554432" *) 
  (* CH0_TX_SER_CFG0 = "0" *) 
  (* CH1_ADAPT_APT_CFG = "0" *) 
  (* CH1_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH1_ADAPT_DFE_CFG = "64" *) 
  (* CH1_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH1_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH1_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH1_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH1_ADAPT_GEN_CFG0 = "3276800" *) 
  (* CH1_ADAPT_GEN_CFG1 = "0" *) 
  (* CH1_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH1_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH1_ADAPT_H01_CFG = "18875040" *) 
  (* CH1_ADAPT_H23_CFG = "27263392" *) 
  (* CH1_ADAPT_H45_CFG = "27263392" *) 
  (* CH1_ADAPT_H67_CFG = "27263392" *) 
  (* CH1_ADAPT_H89_CFG = "27263392" *) 
  (* CH1_ADAPT_HAB_CFG = "27263392" *) 
  (* CH1_ADAPT_HCD_CFG = "27263392" *) 
  (* CH1_ADAPT_HEF_CFG = "27263904" *) 
  (* CH1_ADAPT_KH_CFG0 = "537427519" *) 
  (* CH1_ADAPT_KH_CFG1 = "0" *) 
  (* CH1_ADAPT_KH_CFG2 = "17312" *) 
  (* CH1_ADAPT_KH_CFG3 = "0" *) 
  (* CH1_ADAPT_KH_CFG4 = "31648" *) 
  (* CH1_ADAPT_KH_CFG5 = "0" *) 
  (* CH1_ADAPT_KL_CFG0 = "32288" *) 
  (* CH1_ADAPT_KL_CFG1 = "17312" *) 
  (* CH1_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH1_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH1_ADAPT_LCK_CFG2 = "0" *) 
  (* CH1_ADAPT_LCK_CFG3 = "0" *) 
  (* CH1_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH1_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH1_CHCLK_ILO_CFG = "6553651" *) 
  (* CH1_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH1_CHCLK_RSV_CFG = "0" *) 
  (* CH1_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH1_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH1_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH1_CHCLK_RXPI_CFG = "5244940" *) 
  (* CH1_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH1_CHCLK_TXPI_CFG0 = "4655119" *) 
  (* CH1_CHL_RSV_CFG0 = "-1073741815" *) 
  (* CH1_CHL_RSV_CFG1 = "0" *) 
  (* CH1_CHL_RSV_CFG2 = "0" *) 
  (* CH1_CHL_RSV_CFG3 = "0" *) 
  (* CH1_CHL_RSV_CFG4 = "0" *) 
  (* CH1_DA_CFG = "655370" *) 
  (* CH1_EYESCAN_CFG0 = "2048" *) 
  (* CH1_EYESCAN_CFG1 = "0" *) 
  (* CH1_EYESCAN_CFG10 = "0" *) 
  (* CH1_EYESCAN_CFG11 = "0" *) 
  (* CH1_EYESCAN_CFG12 = "0" *) 
  (* CH1_EYESCAN_CFG13 = "0" *) 
  (* CH1_EYESCAN_CFG14 = "0" *) 
  (* CH1_EYESCAN_CFG15 = "0" *) 
  (* CH1_EYESCAN_CFG16 = "0" *) 
  (* CH1_EYESCAN_CFG2 = "0" *) 
  (* CH1_EYESCAN_CFG3 = "0" *) 
  (* CH1_EYESCAN_CFG4 = "0" *) 
  (* CH1_EYESCAN_CFG5 = "0" *) 
  (* CH1_EYESCAN_CFG6 = "0" *) 
  (* CH1_EYESCAN_CFG7 = "0" *) 
  (* CH1_EYESCAN_CFG8 = "0" *) 
  (* CH1_EYESCAN_CFG9 = "0" *) 
  (* CH1_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH1_FABRIC_INTF_CFG1 = "33792" *) 
  (* CH1_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH1_FABRIC_INTF_CFG3 = "0" *) 
  (* CH1_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH1_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH1_INSTANTIATED = "1" *) 
  (* CH1_MONITOR_CFG = "0" *) 
  (* CH1_PIPE_CTRL_CFG0 = "280672" *) 
  (* CH1_PIPE_CTRL_CFG1 = "2097811" *) 
  (* CH1_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH1_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH1_PIPE_CTRL_CFG3 = "77070639" *) 
  (* CH1_PIPE_CTRL_CFG4 = "4456448" *) 
  (* CH1_PIPE_CTRL_CFG5 = "536870912" *) 
  (* CH1_PIPE_CTRL_CFG6 = "1018691684" *) 
  (* CH1_PIPE_CTRL_CFG7 = "68276509" *) 
  (* CH1_PIPE_CTRL_CFG8 = "33841432" *) 
  (* CH1_PIPE_CTRL_CFG9 = "-2138036698" *) 
  (* CH1_PIPE_TX_EQ_CFG0 = "175467480" *) 
  (* CH1_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH1_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH1_PIPE_TX_EQ_CFG3 = "402" *) 
  (* CH1_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH1_RESET_CFG = "135266341" *) 
  (* CH1_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH1_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH1_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH1_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH1_RESET_TIME_CFG0 = "34636801" *) 
  (* CH1_RESET_TIME_CFG1 = "34636833" *) 
  (* CH1_RESET_TIME_CFG2 = "34636833" *) 
  (* CH1_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH1_RXOUTCLK_FREQ = "60.606100" *) 
  (* CH1_RXOUTCLK_REF_FREQ = "400" *) 
  (* CH1_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH1_RX_CDR_CFG0 = "-1274740670" *) 
  (* CH1_RX_CDR_CFG1 = "1610612992" *) 
  (* CH1_RX_CDR_CFG2 = "134236745" *) 
  (* CH1_RX_CDR_CFG3 = "744694" *) 
  (* CH1_RX_CDR_CFG4 = "607924224" *) 
  (* CH1_RX_CRC_CFG0 = "30848" *) 
  (* CH1_RX_CRC_CFG1 = "505290270" *) 
  (* CH1_RX_CRC_CFG2 = "505290270" *) 
  (* CH1_RX_CRC_CFG3 = "-1" *) 
  (* CH1_RX_CTLE_CFG0 = "31195392" *) 
  (* CH1_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH1_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH1_RX_DFE_CFG0 = "-805153784" *) 
  (* CH1_RX_ELASTIC_BUF_CFG0 = "4204412" *) 
  (* CH1_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH1_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH1_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH1_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH1_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH1_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH1_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH1_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH1_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH1_RX_MISC_CFG0 = "1342177280" *) 
  (* CH1_RX_OOB_CFG0 = "609534468" *) 
  (* CH1_RX_OOB_CFG1 = "16925124" *) 
  (* CH1_RX_PAD_CFG0 = "0" *) 
  (* CH1_RX_PAD_CFG1 = "272910714" *) 
  (* CH1_RX_PCS_CFG0 = "674623792" *) 
  (* CH1_RX_PCS_CFG1 = "-1274804224" *) 
  (* CH1_RX_PCS_CFG2 = "241" *) 
  (* CH1_RX_PCS_CFG3 = "471404303" *) 
  (* CH1_RX_PCS_CFG4 = "1115725826" *) 
  (* CH1_RX_PHALIGN_CFG0 = "1081347" *) 
  (* CH1_RX_PHALIGN_CFG1 = "1485013006" *) 
  (* CH1_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH1_RX_PHALIGN_CFG3 = "1476624384" *) 
  (* CH1_RX_PHALIGN_CFG4 = "522" *) 
  (* CH1_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH1_SIM_MODE = "FAST" *) 
  (* CH1_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH1_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH1_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH1_TXOUTCLK_FREQ = "60.606100" *) 
  (* CH1_TXOUTCLK_REF_FREQ = "400" *) 
  (* CH1_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
  (* CH1_TX_10G_CFG0 = "0" *) 
  (* CH1_TX_10G_CFG1 = "1073741824" *) 
  (* CH1_TX_10G_CFG2 = "0" *) 
  (* CH1_TX_10G_CFG3 = "0" *) 
  (* CH1_TX_ANA_CFG0 = "208" *) 
  (* CH1_TX_CRC_CFG0 = "30720" *) 
  (* CH1_TX_CRC_CFG1 = "505290270" *) 
  (* CH1_TX_CRC_CFG2 = "505290270" *) 
  (* CH1_TX_CRC_CFG3 = "-1" *) 
  (* CH1_TX_DRV_CFG0 = "4194304" *) 
  (* CH1_TX_DRV_CFG1 = "6144" *) 
  (* CH1_TX_PCS_CFG0 = "1650458929" *) 
  (* CH1_TX_PCS_CFG1 = "674583932" *) 
  (* CH1_TX_PCS_CFG2 = "357954218" *) 
  (* CH1_TX_PCS_CFG3 = "699011" *) 
  (* CH1_TX_PHALIGN_CFG0 = "1081344" *) 
  (* CH1_TX_PHALIGN_CFG1 = "46428167" *) 
  (* CH1_TX_PHALIGN_CFG2 = "360504" *) 
  (* CH1_TX_PHALIGN_CFG3 = "0" *) 
  (* CH1_TX_PHALIGN_CFG4 = "404095200" *) 
  (* CH1_TX_PHALIGN_CFG5 = "256" *) 
  (* CH1_TX_PIPPM_CFG = "33554432" *) 
  (* CH1_TX_SER_CFG0 = "0" *) 
  (* CH2_ADAPT_APT_CFG = "0" *) 
  (* CH2_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH2_ADAPT_DFE_CFG = "64" *) 
  (* CH2_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH2_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH2_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH2_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH2_ADAPT_GEN_CFG0 = "3276800" *) 
  (* CH2_ADAPT_GEN_CFG1 = "0" *) 
  (* CH2_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH2_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH2_ADAPT_H01_CFG = "18875040" *) 
  (* CH2_ADAPT_H23_CFG = "27263392" *) 
  (* CH2_ADAPT_H45_CFG = "27263392" *) 
  (* CH2_ADAPT_H67_CFG = "27263392" *) 
  (* CH2_ADAPT_H89_CFG = "27263392" *) 
  (* CH2_ADAPT_HAB_CFG = "27263392" *) 
  (* CH2_ADAPT_HCD_CFG = "27263392" *) 
  (* CH2_ADAPT_HEF_CFG = "27263904" *) 
  (* CH2_ADAPT_KH_CFG0 = "537427519" *) 
  (* CH2_ADAPT_KH_CFG1 = "0" *) 
  (* CH2_ADAPT_KH_CFG2 = "17312" *) 
  (* CH2_ADAPT_KH_CFG3 = "0" *) 
  (* CH2_ADAPT_KH_CFG4 = "31648" *) 
  (* CH2_ADAPT_KH_CFG5 = "0" *) 
  (* CH2_ADAPT_KL_CFG0 = "32288" *) 
  (* CH2_ADAPT_KL_CFG1 = "17312" *) 
  (* CH2_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH2_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH2_ADAPT_LCK_CFG2 = "0" *) 
  (* CH2_ADAPT_LCK_CFG3 = "0" *) 
  (* CH2_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH2_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH2_CHCLK_ILO_CFG = "6553651" *) 
  (* CH2_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH2_CHCLK_RSV_CFG = "0" *) 
  (* CH2_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH2_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH2_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH2_CHCLK_RXPI_CFG = "5244940" *) 
  (* CH2_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH2_CHCLK_TXPI_CFG0 = "4655119" *) 
  (* CH2_CHL_RSV_CFG0 = "-1073741815" *) 
  (* CH2_CHL_RSV_CFG1 = "0" *) 
  (* CH2_CHL_RSV_CFG2 = "0" *) 
  (* CH2_CHL_RSV_CFG3 = "0" *) 
  (* CH2_CHL_RSV_CFG4 = "0" *) 
  (* CH2_DA_CFG = "655370" *) 
  (* CH2_EYESCAN_CFG0 = "2048" *) 
  (* CH2_EYESCAN_CFG1 = "0" *) 
  (* CH2_EYESCAN_CFG10 = "0" *) 
  (* CH2_EYESCAN_CFG11 = "0" *) 
  (* CH2_EYESCAN_CFG12 = "0" *) 
  (* CH2_EYESCAN_CFG13 = "0" *) 
  (* CH2_EYESCAN_CFG14 = "0" *) 
  (* CH2_EYESCAN_CFG15 = "0" *) 
  (* CH2_EYESCAN_CFG16 = "0" *) 
  (* CH2_EYESCAN_CFG2 = "0" *) 
  (* CH2_EYESCAN_CFG3 = "0" *) 
  (* CH2_EYESCAN_CFG4 = "0" *) 
  (* CH2_EYESCAN_CFG5 = "0" *) 
  (* CH2_EYESCAN_CFG6 = "0" *) 
  (* CH2_EYESCAN_CFG7 = "0" *) 
  (* CH2_EYESCAN_CFG8 = "0" *) 
  (* CH2_EYESCAN_CFG9 = "0" *) 
  (* CH2_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH2_FABRIC_INTF_CFG1 = "33792" *) 
  (* CH2_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH2_FABRIC_INTF_CFG3 = "0" *) 
  (* CH2_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH2_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH2_INSTANTIATED = "1" *) 
  (* CH2_MONITOR_CFG = "0" *) 
  (* CH2_PIPE_CTRL_CFG0 = "280672" *) 
  (* CH2_PIPE_CTRL_CFG1 = "2097810" *) 
  (* CH2_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH2_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH2_PIPE_CTRL_CFG3 = "77070639" *) 
  (* CH2_PIPE_CTRL_CFG4 = "4456448" *) 
  (* CH2_PIPE_CTRL_CFG5 = "536870912" *) 
  (* CH2_PIPE_CTRL_CFG6 = "1018691684" *) 
  (* CH2_PIPE_CTRL_CFG7 = "68276509" *) 
  (* CH2_PIPE_CTRL_CFG8 = "33841432" *) 
  (* CH2_PIPE_CTRL_CFG9 = "-2138036698" *) 
  (* CH2_PIPE_TX_EQ_CFG0 = "175467480" *) 
  (* CH2_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH2_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH2_PIPE_TX_EQ_CFG3 = "402" *) 
  (* CH2_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH2_RESET_CFG = "135266341" *) 
  (* CH2_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH2_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH2_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH2_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH2_RESET_TIME_CFG0 = "34636801" *) 
  (* CH2_RESET_TIME_CFG1 = "34636833" *) 
  (* CH2_RESET_TIME_CFG2 = "34636833" *) 
  (* CH2_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH2_RXOUTCLK_FREQ = "60.606100" *) 
  (* CH2_RXOUTCLK_REF_FREQ = "400" *) 
  (* CH2_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH2_RX_CDR_CFG0 = "-1274740670" *) 
  (* CH2_RX_CDR_CFG1 = "1610612992" *) 
  (* CH2_RX_CDR_CFG2 = "134236745" *) 
  (* CH2_RX_CDR_CFG3 = "744694" *) 
  (* CH2_RX_CDR_CFG4 = "607924224" *) 
  (* CH2_RX_CRC_CFG0 = "30848" *) 
  (* CH2_RX_CRC_CFG1 = "505290270" *) 
  (* CH2_RX_CRC_CFG2 = "505290270" *) 
  (* CH2_RX_CRC_CFG3 = "-1" *) 
  (* CH2_RX_CTLE_CFG0 = "31195392" *) 
  (* CH2_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH2_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH2_RX_DFE_CFG0 = "-805153784" *) 
  (* CH2_RX_ELASTIC_BUF_CFG0 = "4204412" *) 
  (* CH2_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH2_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH2_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH2_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH2_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH2_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH2_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH2_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH2_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH2_RX_MISC_CFG0 = "1342177280" *) 
  (* CH2_RX_OOB_CFG0 = "609534468" *) 
  (* CH2_RX_OOB_CFG1 = "16925124" *) 
  (* CH2_RX_PAD_CFG0 = "0" *) 
  (* CH2_RX_PAD_CFG1 = "272910714" *) 
  (* CH2_RX_PCS_CFG0 = "674623792" *) 
  (* CH2_RX_PCS_CFG1 = "-1274804224" *) 
  (* CH2_RX_PCS_CFG2 = "241" *) 
  (* CH2_RX_PCS_CFG3 = "471404303" *) 
  (* CH2_RX_PCS_CFG4 = "1115725826" *) 
  (* CH2_RX_PHALIGN_CFG0 = "1081347" *) 
  (* CH2_RX_PHALIGN_CFG1 = "1485013006" *) 
  (* CH2_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH2_RX_PHALIGN_CFG3 = "1476624384" *) 
  (* CH2_RX_PHALIGN_CFG4 = "522" *) 
  (* CH2_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH2_SIM_MODE = "FAST" *) 
  (* CH2_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH2_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH2_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH2_TXOUTCLK_FREQ = "60.606100" *) 
  (* CH2_TXOUTCLK_REF_FREQ = "400" *) 
  (* CH2_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH2_TX_10G_CFG0 = "0" *) 
  (* CH2_TX_10G_CFG1 = "1073741824" *) 
  (* CH2_TX_10G_CFG2 = "0" *) 
  (* CH2_TX_10G_CFG3 = "0" *) 
  (* CH2_TX_ANA_CFG0 = "208" *) 
  (* CH2_TX_CRC_CFG0 = "30720" *) 
  (* CH2_TX_CRC_CFG1 = "505290270" *) 
  (* CH2_TX_CRC_CFG2 = "505290270" *) 
  (* CH2_TX_CRC_CFG3 = "-1" *) 
  (* CH2_TX_DRV_CFG0 = "4194304" *) 
  (* CH2_TX_DRV_CFG1 = "6144" *) 
  (* CH2_TX_PCS_CFG0 = "1650458929" *) 
  (* CH2_TX_PCS_CFG1 = "674583932" *) 
  (* CH2_TX_PCS_CFG2 = "357954218" *) 
  (* CH2_TX_PCS_CFG3 = "699011" *) 
  (* CH2_TX_PHALIGN_CFG0 = "1081344" *) 
  (* CH2_TX_PHALIGN_CFG1 = "46428167" *) 
  (* CH2_TX_PHALIGN_CFG2 = "360504" *) 
  (* CH2_TX_PHALIGN_CFG3 = "0" *) 
  (* CH2_TX_PHALIGN_CFG4 = "404095200" *) 
  (* CH2_TX_PHALIGN_CFG5 = "256" *) 
  (* CH2_TX_PIPPM_CFG = "33554432" *) 
  (* CH2_TX_SER_CFG0 = "0" *) 
  (* CH3_ADAPT_APT_CFG = "0" *) 
  (* CH3_ADAPT_CAL_CFG = "-2115083264" *) 
  (* CH3_ADAPT_DFE_CFG = "64" *) 
  (* CH3_ADAPT_GC_CFG0 = "9441392" *) 
  (* CH3_ADAPT_GC_CFG1 = "178259936" *) 
  (* CH3_ADAPT_GC_CFG2 = "2097384" *) 
  (* CH3_ADAPT_GC_CFG3 = "178258912" *) 
  (* CH3_ADAPT_GEN_CFG0 = "3276800" *) 
  (* CH3_ADAPT_GEN_CFG1 = "0" *) 
  (* CH3_ADAPT_GEN_CFG2 = "-2013265921" *) 
  (* CH3_ADAPT_GEN_CFG3 = "268435456" *) 
  (* CH3_ADAPT_H01_CFG = "18875040" *) 
  (* CH3_ADAPT_H23_CFG = "27263392" *) 
  (* CH3_ADAPT_H45_CFG = "27263392" *) 
  (* CH3_ADAPT_H67_CFG = "27263392" *) 
  (* CH3_ADAPT_H89_CFG = "27263392" *) 
  (* CH3_ADAPT_HAB_CFG = "27263392" *) 
  (* CH3_ADAPT_HCD_CFG = "27263392" *) 
  (* CH3_ADAPT_HEF_CFG = "27263904" *) 
  (* CH3_ADAPT_KH_CFG0 = "537427519" *) 
  (* CH3_ADAPT_KH_CFG1 = "0" *) 
  (* CH3_ADAPT_KH_CFG2 = "17312" *) 
  (* CH3_ADAPT_KH_CFG3 = "0" *) 
  (* CH3_ADAPT_KH_CFG4 = "31648" *) 
  (* CH3_ADAPT_KH_CFG5 = "0" *) 
  (* CH3_ADAPT_KL_CFG0 = "32288" *) 
  (* CH3_ADAPT_KL_CFG1 = "17312" *) 
  (* CH3_ADAPT_LCK_CFG0 = "16384" *) 
  (* CH3_ADAPT_LCK_CFG1 = "16384" *) 
  (* CH3_ADAPT_LCK_CFG2 = "0" *) 
  (* CH3_ADAPT_LCK_CFG3 = "0" *) 
  (* CH3_ADAPT_LOP_CFG = "-301988256" *) 
  (* CH3_ADAPT_OS_CFG = "-2147483360" *) 
  (* CH3_CHCLK_ILO_CFG = "6553651" *) 
  (* CH3_CHCLK_MISC_CFG = "-125706465" *) 
  (* CH3_CHCLK_RSV_CFG = "0" *) 
  (* CH3_CHCLK_RXCAL_CFG = "138166272" *) 
  (* CH3_CHCLK_RXCAL_CFG1 = "0" *) 
  (* CH3_CHCLK_RXCAL_CFG2 = "0" *) 
  (* CH3_CHCLK_RXPI_CFG = "5244940" *) 
  (* CH3_CHCLK_TXCAL_CFG = "4194336" *) 
  (* CH3_CHCLK_TXPI_CFG0 = "4655119" *) 
  (* CH3_CHL_RSV_CFG0 = "-1073741815" *) 
  (* CH3_CHL_RSV_CFG1 = "0" *) 
  (* CH3_CHL_RSV_CFG2 = "0" *) 
  (* CH3_CHL_RSV_CFG3 = "0" *) 
  (* CH3_CHL_RSV_CFG4 = "0" *) 
  (* CH3_DA_CFG = "655370" *) 
  (* CH3_EYESCAN_CFG0 = "2048" *) 
  (* CH3_EYESCAN_CFG1 = "0" *) 
  (* CH3_EYESCAN_CFG10 = "0" *) 
  (* CH3_EYESCAN_CFG11 = "0" *) 
  (* CH3_EYESCAN_CFG12 = "0" *) 
  (* CH3_EYESCAN_CFG13 = "0" *) 
  (* CH3_EYESCAN_CFG14 = "0" *) 
  (* CH3_EYESCAN_CFG15 = "0" *) 
  (* CH3_EYESCAN_CFG16 = "0" *) 
  (* CH3_EYESCAN_CFG2 = "0" *) 
  (* CH3_EYESCAN_CFG3 = "0" *) 
  (* CH3_EYESCAN_CFG4 = "0" *) 
  (* CH3_EYESCAN_CFG5 = "0" *) 
  (* CH3_EYESCAN_CFG6 = "0" *) 
  (* CH3_EYESCAN_CFG7 = "0" *) 
  (* CH3_EYESCAN_CFG8 = "0" *) 
  (* CH3_EYESCAN_CFG9 = "0" *) 
  (* CH3_FABRIC_INTF_CFG0 = "-20973573" *) 
  (* CH3_FABRIC_INTF_CFG1 = "33792" *) 
  (* CH3_FABRIC_INTF_CFG2 = "537919472" *) 
  (* CH3_FABRIC_INTF_CFG3 = "0" *) 
  (* CH3_FABRIC_INTF_CFG4 = "20480" *) 
  (* CH3_FABRIC_INTF_CFG5 = "25602" *) 
  (* CH3_INSTANTIATED = "1" *) 
  (* CH3_MONITOR_CFG = "0" *) 
  (* CH3_PIPE_CTRL_CFG0 = "280672" *) 
  (* CH3_PIPE_CTRL_CFG1 = "2097810" *) 
  (* CH3_PIPE_CTRL_CFG10 = "85983215" *) 
  (* CH3_PIPE_CTRL_CFG2 = "9950092" *) 
  (* CH3_PIPE_CTRL_CFG3 = "77070639" *) 
  (* CH3_PIPE_CTRL_CFG4 = "4456448" *) 
  (* CH3_PIPE_CTRL_CFG5 = "536870912" *) 
  (* CH3_PIPE_CTRL_CFG6 = "1015021668" *) 
  (* CH3_PIPE_CTRL_CFG7 = "68276509" *) 
  (* CH3_PIPE_CTRL_CFG8 = "33841432" *) 
  (* CH3_PIPE_CTRL_CFG9 = "-2138036698" *) 
  (* CH3_PIPE_TX_EQ_CFG0 = "175467480" *) 
  (* CH3_PIPE_TX_EQ_CFG1 = "152233553" *) 
  (* CH3_PIPE_TX_EQ_CFG2 = "8258" *) 
  (* CH3_PIPE_TX_EQ_CFG3 = "402" *) 
  (* CH3_RESET_BYP_HDSHK_CFG = "0" *) 
  (* CH3_RESET_CFG = "135266341" *) 
  (* CH3_RESET_LOOPER_ID_CFG = "2113632" *) 
  (* CH3_RESET_LOOP_ID_CFG0 = "528" *) 
  (* CH3_RESET_LOOP_ID_CFG1 = "106181136" *) 
  (* CH3_RESET_LOOP_ID_CFG2 = "17185" *) 
  (* CH3_RESET_TIME_CFG0 = "34636801" *) 
  (* CH3_RESET_TIME_CFG1 = "34636833" *) 
  (* CH3_RESET_TIME_CFG2 = "34636833" *) 
  (* CH3_RESET_TIME_CFG3 = "-2063064031" *) 
  (* CH3_RXOUTCLK_FREQ = "60.606100" *) 
  (* CH3_RXOUTCLK_REF_FREQ = "400" *) 
  (* CH3_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH3_RX_CDR_CFG0 = "-1274740670" *) 
  (* CH3_RX_CDR_CFG1 = "1610612992" *) 
  (* CH3_RX_CDR_CFG2 = "134236745" *) 
  (* CH3_RX_CDR_CFG3 = "744694" *) 
  (* CH3_RX_CDR_CFG4 = "607924224" *) 
  (* CH3_RX_CRC_CFG0 = "30848" *) 
  (* CH3_RX_CRC_CFG1 = "505290270" *) 
  (* CH3_RX_CRC_CFG2 = "505290270" *) 
  (* CH3_RX_CRC_CFG3 = "-1" *) 
  (* CH3_RX_CTLE_CFG0 = "31195392" *) 
  (* CH3_RX_CTLE_CFG1 = "1073741824" *) 
  (* CH3_RX_DACI2V_CFG0 = "67145418" *) 
  (* CH3_RX_DFE_CFG0 = "-805153784" *) 
  (* CH3_RX_ELASTIC_BUF_CFG0 = "4204412" *) 
  (* CH3_RX_ELASTIC_BUF_CFG1 = "2" *) 
  (* CH3_RX_ELASTIC_BUF_CFG2 = "0" *) 
  (* CH3_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
  (* CH3_RX_ELASTIC_BUF_CFG4 = "0" *) 
  (* CH3_RX_ELASTIC_BUF_CFG5 = "0" *) 
  (* CH3_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
  (* CH3_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
  (* CH3_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
  (* CH3_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
  (* CH3_RX_MISC_CFG0 = "1342177280" *) 
  (* CH3_RX_OOB_CFG0 = "609534468" *) 
  (* CH3_RX_OOB_CFG1 = "16925124" *) 
  (* CH3_RX_PAD_CFG0 = "0" *) 
  (* CH3_RX_PAD_CFG1 = "272910714" *) 
  (* CH3_RX_PCS_CFG0 = "674623792" *) 
  (* CH3_RX_PCS_CFG1 = "-1274804224" *) 
  (* CH3_RX_PCS_CFG2 = "241" *) 
  (* CH3_RX_PCS_CFG3 = "471404303" *) 
  (* CH3_RX_PCS_CFG4 = "1115725826" *) 
  (* CH3_RX_PHALIGN_CFG0 = "1081347" *) 
  (* CH3_RX_PHALIGN_CFG1 = "1485012998" *) 
  (* CH3_RX_PHALIGN_CFG2 = "117248" *) 
  (* CH3_RX_PHALIGN_CFG3 = "1476624384" *) 
  (* CH3_RX_PHALIGN_CFG4 = "522" *) 
  (* CH3_RX_PHALIGN_CFG5 = "50462720" *) 
  (* CH3_SIM_MODE = "FAST" *) 
  (* CH3_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
  (* CH3_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* CH3_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
  (* CH3_TXOUTCLK_FREQ = "60.606100" *) 
  (* CH3_TXOUTCLK_REF_FREQ = "400" *) 
  (* CH3_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
  (* CH3_TX_10G_CFG0 = "0" *) 
  (* CH3_TX_10G_CFG1 = "1073741824" *) 
  (* CH3_TX_10G_CFG2 = "0" *) 
  (* CH3_TX_10G_CFG3 = "0" *) 
  (* CH3_TX_ANA_CFG0 = "208" *) 
  (* CH3_TX_CRC_CFG0 = "30720" *) 
  (* CH3_TX_CRC_CFG1 = "505290270" *) 
  (* CH3_TX_CRC_CFG2 = "505290270" *) 
  (* CH3_TX_CRC_CFG3 = "-1" *) 
  (* CH3_TX_DRV_CFG0 = "4194304" *) 
  (* CH3_TX_DRV_CFG1 = "6144" *) 
  (* CH3_TX_PCS_CFG0 = "1650458929" *) 
  (* CH3_TX_PCS_CFG1 = "674583932" *) 
  (* CH3_TX_PCS_CFG2 = "357954218" *) 
  (* CH3_TX_PCS_CFG3 = "699011" *) 
  (* CH3_TX_PHALIGN_CFG0 = "1081344" *) 
  (* CH3_TX_PHALIGN_CFG1 = "46428163" *) 
  (* CH3_TX_PHALIGN_CFG2 = "360504" *) 
  (* CH3_TX_PHALIGN_CFG3 = "0" *) 
  (* CH3_TX_PHALIGN_CFG4 = "404095200" *) 
  (* CH3_TX_PHALIGN_CFG5 = "256" *) 
  (* CH3_TX_PIPPM_CFG = "33554432" *) 
  (* CH3_TX_SER_CFG0 = "0" *) 
  (* CHANNEL_BONDING_EN = "" *) 
  (* CTRL_RSV_CFG0 = "24" *) 
  (* CTRL_RSV_CFG1 = "0" *) 
  (* EGW_CHANNEL_ORDERING = "/jesd204_phy/gt_quad_base_0/TX0_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX0.0 /jesd204_phy/gt_quad_base_0/TX1_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX1.1 /jesd204_phy/gt_quad_base_0/TX2_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX2.2 /jesd204_phy/gt_quad_base_0/TX3_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX3.3 /jesd204_phy/gt_quad_base_0/RX0_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX0.0 /jesd204_phy/gt_quad_base_0/RX1_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX1.1 /jesd204_phy/gt_quad_base_0/RX2_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX2.2 /jesd204_phy/gt_quad_base_0/RX3_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX3.3" *) 
  (* EGW_COMP_NAME = "system_gt_quad_base_0_0" *) 
  (* EGW_IS_QUAD = "1" *) 
  (* EGW_REFCLK_LIST = "/ref_clk_q0" *) 
  (* ENABLE_APB3 = "1'b1" *) 
  (* GT_REFCLK_INFO = "refclk_PROT0_R0_400_MHz_unique1" *) 
  (* HS0_LCPLL_IPS_PIN_EN = "0" *) 
  (* HS0_LCPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS0_LCPLL_REFCLK_MAP0 = "0" *) 
  (* HS0_LCPLL_REFCLK_MAP1 = "1" *) 
  (* HS0_LCPLL_REFCLK_MAP2 = "2" *) 
  (* HS0_LCPLL_REFCLK_MAP3 = "3" *) 
  (* HS0_LCPLL_REFCLK_MAP4 = "4" *) 
  (* HS0_LCPLL_REFCLK_MAP5 = "5" *) 
  (* HS0_LCPLL_REFCLK_MAP6 = "6" *) 
  (* HS0_LCPLL_REFCLK_MAP7 = "7" *) 
  (* HS0_RPLL_IPS_PIN_EN = "0" *) 
  (* HS0_RPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS0_RPLL_REFCLK_MAP0 = "0" *) 
  (* HS0_RPLL_REFCLK_MAP1 = "1" *) 
  (* HS0_RPLL_REFCLK_MAP2 = "2" *) 
  (* HS0_RPLL_REFCLK_MAP3 = "3" *) 
  (* HS0_RPLL_REFCLK_MAP4 = "4" *) 
  (* HS0_RPLL_REFCLK_MAP5 = "5" *) 
  (* HS0_RPLL_REFCLK_MAP6 = "6" *) 
  (* HS0_RPLL_REFCLK_MAP7 = "7" *) 
  (* HS1_LCPLL_IPS_PIN_EN = "0" *) 
  (* HS1_LCPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS1_LCPLL_REFCLK_MAP0 = "0" *) 
  (* HS1_LCPLL_REFCLK_MAP1 = "2" *) 
  (* HS1_LCPLL_REFCLK_MAP2 = "1" *) 
  (* HS1_LCPLL_REFCLK_MAP3 = "3" *) 
  (* HS1_LCPLL_REFCLK_MAP4 = "4" *) 
  (* HS1_LCPLL_REFCLK_MAP5 = "5" *) 
  (* HS1_LCPLL_REFCLK_MAP6 = "6" *) 
  (* HS1_LCPLL_REFCLK_MAP7 = "7" *) 
  (* HS1_RPLL_IPS_PIN_EN = "0" *) 
  (* HS1_RPLL_IPS_REFCLK_SEL = "1" *) 
  (* HS1_RPLL_REFCLK_MAP0 = "0" *) 
  (* HS1_RPLL_REFCLK_MAP1 = "2" *) 
  (* HS1_RPLL_REFCLK_MAP2 = "1" *) 
  (* HS1_RPLL_REFCLK_MAP3 = "3" *) 
  (* HS1_RPLL_REFCLK_MAP4 = "4" *) 
  (* HS1_RPLL_REFCLK_MAP5 = "5" *) 
  (* HS1_RPLL_REFCLK_MAP6 = "6" *) 
  (* HS1_RPLL_REFCLK_MAP7 = "7" *) 
  (* HSCLK0_HSDIST_CFG = "65566" *) 
  (* HSCLK0_INSTANTIATED = "1" *) 
  (* HSCLK0_LCPLL_CFG0 = "4210436" *) 
  (* HSCLK0_LCPLL_CFG1 = "68701952" *) 
  (* HSCLK0_LCPLL_CFG2 = "-2105605624" *) 
  (* HSCLK0_LCPLL_LGC_CFG0 = "-439055600" *) 
  (* HSCLK0_LCPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK0_LCPLL_LGC_CFG2 = "1114385" *) 
  (* HSCLK0_RPLL_CFG0 = "-2147450940" *) 
  (* HSCLK0_RPLL_CFG1 = "132267816" *) 
  (* HSCLK0_RPLL_CFG2 = "11740105" *) 
  (* HSCLK0_RPLL_LGC_CFG0 = "-439054960" *) 
  (* HSCLK0_RPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK0_RPLL_LGC_CFG2 = "1114385" *) 
  (* HSCLK1_HSDIST_CFG = "65566" *) 
  (* HSCLK1_INSTANTIATED = "1" *) 
  (* HSCLK1_LCPLL_CFG0 = "4210436" *) 
  (* HSCLK1_LCPLL_CFG1 = "68701952" *) 
  (* HSCLK1_LCPLL_CFG2 = "-2105605624" *) 
  (* HSCLK1_LCPLL_LGC_CFG0 = "-439055600" *) 
  (* HSCLK1_LCPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK1_LCPLL_LGC_CFG2 = "1114385" *) 
  (* HSCLK1_RPLL_CFG0 = "-2147450940" *) 
  (* HSCLK1_RPLL_CFG1 = "132267816" *) 
  (* HSCLK1_RPLL_CFG2 = "11740105" *) 
  (* HSCLK1_RPLL_LGC_CFG0 = "-439054960" *) 
  (* HSCLK1_RPLL_LGC_CFG1 = "-1810753408" *) 
  (* HSCLK1_RPLL_LGC_CFG2 = "1114385" *) 
  (* IDLE = "2'b00" *) 
  (* IS_GTYE5 = "1'b1" *) 
  (* IS_GTYP = "1'b0" *) 
  (* IS_KSB = "1'b0" *) 
  (* LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) 
  (* LANE_SATISFIED = "1 {}" *) 
  (* LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) 
  (* MEMORY_INIT_FILE = "system_gt_quad_base_0_0.mem" *) 
  (* MSTCLK_SRC_DICT = "TX 1,0,0,0 RX 1,0,0,0" *) 
  (* MST_RESET_CFG = "-241" *) 
  (* PIN_CFG0 = "17318425" *) 
  (* POR_CFG = "285440" *) 
  (* PROT0_SETTINGS = "LR0_SETTINGS {RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false TX_FRACN_OVRD false RX_FRACN_OVRD false RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 TX_LANE_DESKEW_HDMI_ENABLE false RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CC_MASK 00000000 RX_CC_K 00000000 RX_CC_DISP 00000000 GT_DIRECTION DUPLEX TX_LINE_RATE 4.0 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 400 TX_ACTUAL_REFCLK_FREQUENCY 400 TX_FRACN_ENABLED true TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING 64B66B_ASYNC TX_USER_DATA_WIDTH 64 TX_INT_DATA_WIDTH 64 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXPROGDIVCLK TXPROGDIV_FREQ_ENABLE true TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 60.606 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE PRESET GTY-JESD204_64B66B INTERNAL_PRESET JESD204_64B66B RX_LINE_RATE 4.0 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 400 RX_ACTUAL_REFCLK_FREQUENCY 400 RX_FRACN_ENABLED true RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING 64B66B_ASYNC RX_USER_DATA_WIDTH 64 RX_INT_DATA_WIDTH 64 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 60.606 INS_LOSS_NYQ 12 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 10 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0 GT_TYPE GTY} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT1_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT2_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT3_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT4_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT5_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT6_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROT7_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
  (* PROTO_IS_FABRIC_BRAMN_NEEDED = "1'b0" *) 
  (* PROT_DUAL_OCCUPIED = "PROT0 BOTH" *) 
  (* PWR_RX0_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
  (* PWR_RX1_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
  (* PWR_RX2_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
  (* PWR_RX3_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
  (* PWR_RX_DEF_SETTINGS = "{LR0_SETTING {rx_data_rate=10.3125,rx_pll_type=LCPLL,rx_user_data_width=32,rx_int_data_width=32,rx_data_encoding=RAW,rx_eq_mode=AUTO,rx_oob_en=false,rx_pam_sel=NRZ,}}" *) 
  (* PWR_TX0_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) 
  (* PWR_TX1_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) 
  (* PWR_TX2_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) 
  (* PWR_TX3_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) 
  (* PWR_TX_DEF_SETTINGS = "{LR0_SETTING {tx_data_rate=10.3125,tx_pll_type=LCPLL,tx_user_data_width=32,tx_int_data_width=32,tx_data_encoding=RAW,tx_pam_sel=NRZ,}}" *) 
  (* QUAD_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) 
  (* QUAD_INSTANTIATED = "1" *) 
  (* QUAD_PACK = "" *) 
  (* QUAD_SIM_MODE = "FAST" *) 
  (* QUAD_SIM_RESET_SPEEDUP = "TRUE" *) 
  (* QUAD_USAGE = "TX_QUAD_CH {TXQuad_0_/jesd204_phy/gt_quad_base_0 {/jesd204_phy/gt_quad_base_0 system_gt_bridge_ip_0_0.IP_CH0,system_gt_bridge_ip_0_0.IP_CH1,system_gt_bridge_ip_0_0.IP_CH2,system_gt_bridge_ip_0_0.IP_CH3 MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}} RX_QUAD_CH {RXQuad_0_/jesd204_phy/gt_quad_base_0 {/jesd204_phy/gt_quad_base_0 system_gt_bridge_ip_0_0.IP_CH0,system_gt_bridge_ip_0_0.IP_CH1,system_gt_bridge_ip_0_0.IP_CH2,system_gt_bridge_ip_0_0.IP_CH3 MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}}" *) 
  (* RCALBG0_CFG0 = "976" *) 
  (* RCALBG0_CFG1 = "64" *) 
  (* RCALBG0_CFG2 = "0" *) 
  (* RCALBG0_CFG3 = "-2147483646" *) 
  (* RCALBG0_CFG4 = "279" *) 
  (* RCALBG0_CFG5 = "691" *) 
  (* RCALBG1_CFG0 = "976" *) 
  (* RCALBG1_CFG1 = "64" *) 
  (* RCALBG1_CFG2 = "0" *) 
  (* RCALBG1_CFG3 = "-2147483646" *) 
  (* RCALBG1_CFG4 = "279" *) 
  (* RCALBG1_CFG5 = "691" *) 
  (* REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_400_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_R0_400_MHz_unique1" *) 
  (* RXRSTDONE_DIST_SEL = "269948722" *) 
  (* SIM_DEVICE = "VERSAL_AI_CORE" *) 
  (* SIM_VERSION = "2" *) 
  (* STAT_NPI_REG_LIST = "3000:3004,3010:3014,3020:3024,3034:304C,3070:3098,30A8:30B4,30BC:30EC,30F4:3178,3180:3184,318C:3190,3198:31A4,31B0:31D8,31E0:31E8,31F0:3228,3230:3274,3280,3288,3294:329C,32A8:32AC,32B4,32BC:32E4,32FC,3430:3444,344C,3470:3498,34A8:34B4,34BC:34EC,34F4:3578,3580:3584,358C:3590,3598:35A4,35B0:35D8,35E0:35E8,35F0:3628,3630:3674,3680,3688,3694:369C,36A8:36AC,36B4,36BC:36E4,3834:383C,3848,3870:3898,38A8:38B4,38BC:38EC,38F4:3978,3980:3984,398C:3990,3998:39A4,39B0:39D8,39E0:39E8,39F0:3A28,3A30:3A74,3A80,3A88,3A94:3A9C,3AA8:3AAC,3AB4,3ABC:3AE4,3AFC,3C08,3C30:3C3C,3C48:3C4C,3C70:3C98,3CA8:3CB4,3CBC:3CEC,3CF4:3D78,3D80:3D84,3D8C:3D90,3D98:3DA4,3DB0:3DD8,3DE0:3DE8,3DF0:3E28,3E30:3E74,3E80,3E88,3E94:3E9C,3EA8:3EAC,3EB4,3EBC:3EE4" *) 
  (* TERMPROG_CFG = "0" *) 
  (* TLAST = "2'b10" *) 
  (* TREADY = "2'b01" *) 
  (* TXRSTDONE_DIST_SEL = "269948722" *) 
  (* UB_CFG0 = "1933574144" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_inst inst
       (.GT_REFCLK0(GT_REFCLK0),
        .altclk(altclk),
        .apb3clk(apb3clk),
        .apb3paddr(apb3paddr),
        .apb3penable(apb3penable),
        .apb3prdata(apb3prdata),
        .apb3pready(apb3pready),
        .apb3presetn(apb3presetn),
        .apb3psel(apb3psel),
        .apb3pslverr(apb3pslverr),
        .apb3pwdata(apb3pwdata),
        .apb3pwrite(apb3pwrite),
        .bgbypassb(bgbypassb),
        .bgmonitorenb(bgmonitorenb),
        .bgpdb(bgpdb),
        .bgrcalovrd(bgrcalovrd),
        .bgrcalovrdenb(bgrcalovrdenb),
        .ch0_bufgtce(ch0_bufgtce),
        .ch0_bufgtcemask(ch0_bufgtcemask),
        .ch0_bufgtdiv(ch0_bufgtdiv),
        .ch0_bufgtrst(ch0_bufgtrst),
        .ch0_bufgtrstmask(ch0_bufgtrstmask),
        .ch0_cdrbmcdrreq(ch0_cdrbmcdrreq),
        .ch0_cdrfreqos(ch0_cdrfreqos),
        .ch0_cdrincpctrl(ch0_cdrincpctrl),
        .ch0_cdrstepdir(ch0_cdrstepdir),
        .ch0_cdrstepsq(ch0_cdrstepsq),
        .ch0_cdrstepsx(ch0_cdrstepsx),
        .ch0_cfokovrdfinish(ch0_cfokovrdfinish),
        .ch0_cfokovrdpulse(ch0_cfokovrdpulse),
        .ch0_cfokovrdrdy0(ch0_cfokovrdrdy0),
        .ch0_cfokovrdrdy1(ch0_cfokovrdrdy1),
        .ch0_cfokovrdstart(ch0_cfokovrdstart),
        .ch0_clkrsvd0(ch0_clkrsvd0),
        .ch0_clkrsvd1(ch0_clkrsvd1),
        .ch0_dmonfiforeset(ch0_dmonfiforeset),
        .ch0_dmonitorclk(ch0_dmonitorclk),
        .ch0_dmonitorout(ch0_dmonitorout),
        .ch0_dmonitoroutclk(ch0_dmonitoroutclk),
        .ch0_eyescandataerror(ch0_eyescandataerror),
        .ch0_eyescanreset(ch0_eyescanreset),
        .ch0_eyescantrigger(ch0_eyescantrigger),
        .ch0_gtrsvd(ch0_gtrsvd),
        .ch0_gtrxreset(ch0_gtrxreset),
        .ch0_gttxreset(ch0_gttxreset),
        .ch0_hsdppcsreset(ch0_hsdppcsreset),
        .ch0_iloreset(ch0_iloreset),
        .ch0_iloresetdone(ch0_iloresetdone),
        .ch0_iloresetmask(ch0_iloresetmask),
        .ch0_loopback(ch0_loopback),
        .ch0_pcierstb(ch0_pcierstb),
        .ch0_pcsrsvdin({ch0_pcsrsvdin[15:11],1'b0,ch0_pcsrsvdin[9:8],1'b0,ch0_pcsrsvdin[6:0]}),
        .ch0_pcsrsvdout(ch0_pcsrsvdout),
        .ch0_phyesmadaptsave(ch0_phyesmadaptsave),
        .ch0_phyready(ch0_phyready),
        .ch0_phystatus(ch0_phystatus),
        .ch0_pinrsvdas(ch0_pinrsvdas),
        .ch0_resetexception(ch0_resetexception),
        .ch0_rx10gstat(ch0_rx10gstat),
        .ch0_rxbufstatus(ch0_rxbufstatus),
        .ch0_rxbyteisaligned(ch0_rxbyteisaligned),
        .ch0_rxbyterealign(ch0_rxbyterealign),
        .ch0_rxcdrhold(ch0_rxcdrhold),
        .ch0_rxcdrlock(ch0_rxcdrlock),
        .ch0_rxcdrovrden(ch0_rxcdrovrden),
        .ch0_rxcdrphdone(ch0_rxcdrphdone),
        .ch0_rxcdrreset(ch0_rxcdrreset),
        .ch0_rxchanbondseq(ch0_rxchanbondseq),
        .ch0_rxchanisaligned(ch0_rxchanisaligned),
        .ch0_rxchanrealign(ch0_rxchanrealign),
        .ch0_rxchbondi(ch0_rxchbondi),
        .ch0_rxchbondo(ch0_rxchbondo),
        .ch0_rxclkcorcnt(ch0_rxclkcorcnt),
        .ch0_rxcominitdet(ch0_rxcominitdet),
        .ch0_rxcommadet(ch0_rxcommadet),
        .ch0_rxcomsasdet(ch0_rxcomsasdet),
        .ch0_rxcomwakedet(ch0_rxcomwakedet),
        .ch0_rxctrl0(ch0_rxctrl0),
        .ch0_rxctrl1(ch0_rxctrl1),
        .ch0_rxctrl2(ch0_rxctrl2),
        .ch0_rxctrl3(ch0_rxctrl3),
        .ch0_rxdapicodeovrden(ch0_rxdapicodeovrden),
        .ch0_rxdapicodereset(ch0_rxdapicodereset),
        .ch0_rxdata(ch0_rxdata),
        .ch0_rxdataextendrsvd(ch0_rxdataextendrsvd),
        .ch0_rxdatavalid(ch0_rxdatavalid),
        .ch0_rxdccdone(ch0_rxdccdone),
        .ch0_rxdlyalignerr(ch0_rxdlyalignerr),
        .ch0_rxdlyalignprog(ch0_rxdlyalignprog),
        .ch0_rxdlyalignreq(ch0_rxdlyalignreq),
        .ch0_rxelecidle(ch0_rxelecidle),
        .ch0_rxeqtraining(ch0_rxeqtraining),
        .ch0_rxfinealigndone(ch0_rxfinealigndone),
        .ch0_rxgearboxslip(ch0_rxgearboxslip),
        .ch0_rxheader(ch0_rxheader),
        .ch0_rxheadervalid(ch0_rxheadervalid),
        .ch0_rxlatclk(ch0_rxlatclk),
        .ch0_rxlpmen(ch0_rxlpmen),
        .ch0_rxmldchaindone(ch0_rxmldchaindone),
        .ch0_rxmldchainreq(ch0_rxmldchainreq),
        .ch0_rxmlfinealignreq(ch0_rxmlfinealignreq),
        .ch0_rxmstdatapathreset(ch0_rxmstdatapathreset),
        .ch0_rxmstreset(ch0_rxmstreset),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .ch0_rxoobreset(ch0_rxoobreset),
        .ch0_rxosintdone(ch0_rxosintdone),
        .ch0_rxosintstarted(ch0_rxosintstarted),
        .ch0_rxosintstrobedone(ch0_rxosintstrobedone),
        .ch0_rxosintstrobestarted(ch0_rxosintstrobestarted),
        .ch0_rxoutclk(ch0_rxoutclk),
        .ch0_rxpcsresetmask(ch0_rxpcsresetmask),
        .ch0_rxpd(ch0_rxpd),
        .ch0_rxphaligndone(ch0_rxphaligndone),
        .ch0_rxphalignerr(ch0_rxphalignerr),
        .ch0_rxphalignreq(ch0_rxphalignreq),
        .ch0_rxphalignresetmask(ch0_rxphalignresetmask),
        .ch0_rxphdlypd(ch0_rxphdlypd),
        .ch0_rxphdlyreset(ch0_rxphdlyreset),
        .ch0_rxphdlyresetdone(ch0_rxphdlyresetdone),
        .ch0_rxphsetinitdone(ch0_rxphsetinitdone),
        .ch0_rxphsetinitreq(ch0_rxphsetinitreq),
        .ch0_rxphshift180(ch0_rxphshift180),
        .ch0_rxphshift180done(ch0_rxphshift180done),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .ch0_rxpmaresetmask(ch0_rxpmaresetmask),
        .ch0_rxpolarity(ch0_rxpolarity),
        .ch0_rxprbscntreset(ch0_rxprbscntreset),
        .ch0_rxprbserr(ch0_rxprbserr),
        .ch0_rxprbslocked(ch0_rxprbslocked),
        .ch0_rxprbssel(ch0_rxprbssel),
        .ch0_rxprogdivreset(ch0_rxprogdivreset),
        .ch0_rxprogdivresetdone(ch0_rxprogdivresetdone),
        .ch0_rxrate(ch0_rxrate),
        .ch0_rxresetdone(ch0_rxresetdone),
        .ch0_rxresetmode(ch0_rxresetmode),
        .ch0_rxslide(ch0_rxslide),
        .ch0_rxsliderdy(ch0_rxsliderdy),
        .ch0_rxstartofseq(ch0_rxstartofseq),
        .ch0_rxstatus(ch0_rxstatus),
        .ch0_rxsyncallin(ch0_rxsyncallin),
        .ch0_rxsyncdone(ch0_rxsyncdone),
        .ch0_rxtermination(ch0_rxtermination),
        .ch0_rxuserrdy(ch0_rxuserrdy),
        .ch0_rxusrclk(ch0_rxusrclk),
        .ch0_rxvalid(ch0_rxvalid),
        .ch0_tstin(ch0_tstin),
        .ch0_tx10gstat(ch0_tx10gstat),
        .ch0_txbufstatus(ch0_txbufstatus),
        .ch0_txcomfinish(ch0_txcomfinish),
        .ch0_txcominit(ch0_txcominit),
        .ch0_txcomsas(ch0_txcomsas),
        .ch0_txcomwake(ch0_txcomwake),
        .ch0_txctrl0(ch0_txctrl0),
        .ch0_txctrl1(ch0_txctrl1),
        .ch0_txctrl2(ch0_txctrl2),
        .ch0_txdapicodeovrden(ch0_txdapicodeovrden),
        .ch0_txdapicodereset(ch0_txdapicodereset),
        .ch0_txdata(ch0_txdata),
        .ch0_txdataextendrsvd(ch0_txdataextendrsvd),
        .ch0_txdccdone(ch0_txdccdone),
        .ch0_txdeemph(ch0_txdeemph),
        .ch0_txdetectrx(ch0_txdetectrx),
        .ch0_txdiffctrl(ch0_txdiffctrl),
        .ch0_txdlyalignerr(ch0_txdlyalignerr),
        .ch0_txdlyalignprog(ch0_txdlyalignprog),
        .ch0_txdlyalignreq(ch0_txdlyalignreq),
        .ch0_txelecidle(ch0_txelecidle),
        .ch0_txheader(ch0_txheader),
        .ch0_txinhibit(ch0_txinhibit),
        .ch0_txlatclk(ch0_txlatclk),
        .ch0_txmaincursor(ch0_txmaincursor),
        .ch0_txmargin(ch0_txmargin),
        .ch0_txmldchaindone(ch0_txmldchaindone),
        .ch0_txmldchainreq(ch0_txmldchainreq),
        .ch0_txmstdatapathreset(ch0_txmstdatapathreset),
        .ch0_txmstreset(ch0_txmstreset),
        .ch0_txmstresetdone(ch0_txmstresetdone),
        .ch0_txoneszeros(ch0_txoneszeros),
        .ch0_txoutclk(ch0_txoutclk),
        .ch0_txpausedelayalign(ch0_txpausedelayalign),
        .ch0_txpcsresetmask(ch0_txpcsresetmask),
        .ch0_txpd(ch0_txpd),
        .ch0_txphaligndone(ch0_txphaligndone),
        .ch0_txphalignerr(ch0_txphalignerr),
        .ch0_txphalignoutrsvd(ch0_txphalignoutrsvd),
        .ch0_txphalignreq(ch0_txphalignreq),
        .ch0_txphalignresetmask(ch0_txphalignresetmask),
        .ch0_txphdlypd(ch0_txphdlypd),
        .ch0_txphdlyreset(ch0_txphdlyreset),
        .ch0_txphdlyresetdone(ch0_txphdlyresetdone),
        .ch0_txphdlytstclk(ch0_txphdlytstclk),
        .ch0_txphsetinitdone(ch0_txphsetinitdone),
        .ch0_txphsetinitreq(ch0_txphsetinitreq),
        .ch0_txphshift180(ch0_txphshift180),
        .ch0_txphshift180done(ch0_txphshift180done),
        .ch0_txpicodeovrden(ch0_txpicodeovrden),
        .ch0_txpicodereset(ch0_txpicodereset),
        .ch0_txpippmen(ch0_txpippmen),
        .ch0_txpippmstepsize(ch0_txpippmstepsize),
        .ch0_txpisopd(ch0_txpisopd),
        .ch0_txpmaresetdone(ch0_txpmaresetdone),
        .ch0_txpmaresetmask(ch0_txpmaresetmask),
        .ch0_txpolarity(ch0_txpolarity),
        .ch0_txpostcursor(ch0_txpostcursor),
        .ch0_txprbsforceerr(ch0_txprbsforceerr),
        .ch0_txprbssel(ch0_txprbssel),
        .ch0_txprecursor(ch0_txprecursor),
        .ch0_txprogdivreset(ch0_txprogdivreset),
        .ch0_txprogdivresetdone(ch0_txprogdivresetdone),
        .ch0_txrate(ch0_txrate),
        .ch0_txresetdone(ch0_txresetdone),
        .ch0_txresetmode(ch0_txresetmode),
        .ch0_txsequence(ch0_txsequence),
        .ch0_txswing(ch0_txswing),
        .ch0_txsyncallin(ch0_txsyncallin),
        .ch0_txsyncdone(ch0_txsyncdone),
        .ch0_txuserrdy(ch0_txuserrdy),
        .ch0_txusrclk(ch0_txusrclk),
        .ch1_bufgtce(ch1_bufgtce),
        .ch1_bufgtcemask(ch1_bufgtcemask),
        .ch1_bufgtdiv(ch1_bufgtdiv),
        .ch1_bufgtrst(ch1_bufgtrst),
        .ch1_bufgtrstmask(ch1_bufgtrstmask),
        .ch1_cdrbmcdrreq(ch1_cdrbmcdrreq),
        .ch1_cdrfreqos(ch1_cdrfreqos),
        .ch1_cdrincpctrl(ch1_cdrincpctrl),
        .ch1_cdrstepdir(ch1_cdrstepdir),
        .ch1_cdrstepsq(ch1_cdrstepsq),
        .ch1_cdrstepsx(ch1_cdrstepsx),
        .ch1_cfokovrdfinish(ch1_cfokovrdfinish),
        .ch1_cfokovrdpulse(ch1_cfokovrdpulse),
        .ch1_cfokovrdrdy0(ch1_cfokovrdrdy0),
        .ch1_cfokovrdrdy1(ch1_cfokovrdrdy1),
        .ch1_cfokovrdstart(ch1_cfokovrdstart),
        .ch1_clkrsvd0(ch1_clkrsvd0),
        .ch1_clkrsvd1(ch1_clkrsvd1),
        .ch1_dmonfiforeset(ch1_dmonfiforeset),
        .ch1_dmonitorclk(ch1_dmonitorclk),
        .ch1_dmonitorout(ch1_dmonitorout),
        .ch1_dmonitoroutclk(ch1_dmonitoroutclk),
        .ch1_eyescandataerror(ch1_eyescandataerror),
        .ch1_eyescanreset(ch1_eyescanreset),
        .ch1_eyescantrigger(ch1_eyescantrigger),
        .ch1_gtrsvd(ch1_gtrsvd),
        .ch1_gtrxreset(ch1_gtrxreset),
        .ch1_gttxreset(ch1_gttxreset),
        .ch1_hsdppcsreset(ch1_hsdppcsreset),
        .ch1_iloreset(ch1_iloreset),
        .ch1_iloresetdone(ch1_iloresetdone),
        .ch1_iloresetmask(ch1_iloresetmask),
        .ch1_loopback(ch1_loopback),
        .ch1_pcierstb(ch1_pcierstb),
        .ch1_pcsrsvdin({ch1_pcsrsvdin[15:11],1'b0,ch1_pcsrsvdin[9:8],1'b0,ch1_pcsrsvdin[6:0]}),
        .ch1_pcsrsvdout(ch1_pcsrsvdout),
        .ch1_phyesmadaptsave(ch1_phyesmadaptsave),
        .ch1_phyready(ch1_phyready),
        .ch1_phystatus(ch1_phystatus),
        .ch1_pinrsvdas(ch1_pinrsvdas),
        .ch1_resetexception(ch1_resetexception),
        .ch1_rx10gstat(ch1_rx10gstat),
        .ch1_rxbufstatus(ch1_rxbufstatus),
        .ch1_rxbyteisaligned(ch1_rxbyteisaligned),
        .ch1_rxbyterealign(ch1_rxbyterealign),
        .ch1_rxcdrhold(ch1_rxcdrhold),
        .ch1_rxcdrlock(ch1_rxcdrlock),
        .ch1_rxcdrovrden(ch1_rxcdrovrden),
        .ch1_rxcdrphdone(ch1_rxcdrphdone),
        .ch1_rxcdrreset(ch1_rxcdrreset),
        .ch1_rxchanbondseq(ch1_rxchanbondseq),
        .ch1_rxchanisaligned(ch1_rxchanisaligned),
        .ch1_rxchanrealign(ch1_rxchanrealign),
        .ch1_rxchbondi(ch1_rxchbondi),
        .ch1_rxchbondo(ch1_rxchbondo),
        .ch1_rxclkcorcnt(ch1_rxclkcorcnt),
        .ch1_rxcominitdet(ch1_rxcominitdet),
        .ch1_rxcommadet(ch1_rxcommadet),
        .ch1_rxcomsasdet(ch1_rxcomsasdet),
        .ch1_rxcomwakedet(ch1_rxcomwakedet),
        .ch1_rxctrl0(ch1_rxctrl0),
        .ch1_rxctrl1(ch1_rxctrl1),
        .ch1_rxctrl2(ch1_rxctrl2),
        .ch1_rxctrl3(ch1_rxctrl3),
        .ch1_rxdapicodeovrden(ch1_rxdapicodeovrden),
        .ch1_rxdapicodereset(ch1_rxdapicodereset),
        .ch1_rxdata(ch1_rxdata),
        .ch1_rxdataextendrsvd(ch1_rxdataextendrsvd),
        .ch1_rxdatavalid(ch1_rxdatavalid),
        .ch1_rxdccdone(ch1_rxdccdone),
        .ch1_rxdlyalignerr(ch1_rxdlyalignerr),
        .ch1_rxdlyalignprog(ch1_rxdlyalignprog),
        .ch1_rxdlyalignreq(ch1_rxdlyalignreq),
        .ch1_rxelecidle(ch1_rxelecidle),
        .ch1_rxeqtraining(ch1_rxeqtraining),
        .ch1_rxfinealigndone(ch1_rxfinealigndone),
        .ch1_rxgearboxslip(ch1_rxgearboxslip),
        .ch1_rxheader(ch1_rxheader),
        .ch1_rxheadervalid(ch1_rxheadervalid),
        .ch1_rxlatclk(ch1_rxlatclk),
        .ch1_rxlpmen(ch1_rxlpmen),
        .ch1_rxmldchaindone(ch1_rxmldchaindone),
        .ch1_rxmldchainreq(ch1_rxmldchainreq),
        .ch1_rxmlfinealignreq(ch1_rxmlfinealignreq),
        .ch1_rxmstdatapathreset(ch1_rxmstdatapathreset),
        .ch1_rxmstreset(ch1_rxmstreset),
        .ch1_rxmstresetdone(ch1_rxmstresetdone),
        .ch1_rxoobreset(ch1_rxoobreset),
        .ch1_rxosintdone(ch1_rxosintdone),
        .ch1_rxosintstarted(ch1_rxosintstarted),
        .ch1_rxosintstrobedone(ch1_rxosintstrobedone),
        .ch1_rxosintstrobestarted(ch1_rxosintstrobestarted),
        .ch1_rxoutclk(ch1_rxoutclk),
        .ch1_rxpcsresetmask(ch1_rxpcsresetmask),
        .ch1_rxpd(ch1_rxpd),
        .ch1_rxphaligndone(ch1_rxphaligndone),
        .ch1_rxphalignerr(ch1_rxphalignerr),
        .ch1_rxphalignreq(ch1_rxphalignreq),
        .ch1_rxphalignresetmask(ch1_rxphalignresetmask),
        .ch1_rxphdlypd(ch1_rxphdlypd),
        .ch1_rxphdlyreset(ch1_rxphdlyreset),
        .ch1_rxphdlyresetdone(ch1_rxphdlyresetdone),
        .ch1_rxphsetinitdone(ch1_rxphsetinitdone),
        .ch1_rxphsetinitreq(ch1_rxphsetinitreq),
        .ch1_rxphshift180(ch1_rxphshift180),
        .ch1_rxphshift180done(ch1_rxphshift180done),
        .ch1_rxpmaresetdone(ch1_rxpmaresetdone),
        .ch1_rxpmaresetmask(ch1_rxpmaresetmask),
        .ch1_rxpolarity(ch1_rxpolarity),
        .ch1_rxprbscntreset(ch1_rxprbscntreset),
        .ch1_rxprbserr(ch1_rxprbserr),
        .ch1_rxprbslocked(ch1_rxprbslocked),
        .ch1_rxprbssel(ch1_rxprbssel),
        .ch1_rxprogdivreset(ch1_rxprogdivreset),
        .ch1_rxprogdivresetdone(ch1_rxprogdivresetdone),
        .ch1_rxrate(ch1_rxrate),
        .ch1_rxresetdone(ch1_rxresetdone),
        .ch1_rxresetmode(ch1_rxresetmode),
        .ch1_rxslide(ch1_rxslide),
        .ch1_rxsliderdy(ch1_rxsliderdy),
        .ch1_rxstartofseq(ch1_rxstartofseq),
        .ch1_rxstatus(ch1_rxstatus),
        .ch1_rxsyncallin(ch1_rxsyncallin),
        .ch1_rxsyncdone(ch1_rxsyncdone),
        .ch1_rxtermination(ch1_rxtermination),
        .ch1_rxuserrdy(ch1_rxuserrdy),
        .ch1_rxusrclk(ch1_rxusrclk),
        .ch1_rxvalid(ch1_rxvalid),
        .ch1_tstin(ch1_tstin),
        .ch1_tx10gstat(ch1_tx10gstat),
        .ch1_txbufstatus(ch1_txbufstatus),
        .ch1_txcomfinish(ch1_txcomfinish),
        .ch1_txcominit(ch1_txcominit),
        .ch1_txcomsas(ch1_txcomsas),
        .ch1_txcomwake(ch1_txcomwake),
        .ch1_txctrl0(ch1_txctrl0),
        .ch1_txctrl1(ch1_txctrl1),
        .ch1_txctrl2(ch1_txctrl2),
        .ch1_txdapicodeovrden(ch1_txdapicodeovrden),
        .ch1_txdapicodereset(ch1_txdapicodereset),
        .ch1_txdata(ch1_txdata),
        .ch1_txdataextendrsvd(ch1_txdataextendrsvd),
        .ch1_txdccdone(ch1_txdccdone),
        .ch1_txdeemph(ch1_txdeemph),
        .ch1_txdetectrx(ch1_txdetectrx),
        .ch1_txdiffctrl(ch1_txdiffctrl),
        .ch1_txdlyalignerr(ch1_txdlyalignerr),
        .ch1_txdlyalignprog(ch1_txdlyalignprog),
        .ch1_txdlyalignreq(ch1_txdlyalignreq),
        .ch1_txelecidle(ch1_txelecidle),
        .ch1_txheader(ch1_txheader),
        .ch1_txinhibit(ch1_txinhibit),
        .ch1_txlatclk(ch1_txlatclk),
        .ch1_txmaincursor(ch1_txmaincursor),
        .ch1_txmargin(ch1_txmargin),
        .ch1_txmldchaindone(ch1_txmldchaindone),
        .ch1_txmldchainreq(ch1_txmldchainreq),
        .ch1_txmstdatapathreset(ch1_txmstdatapathreset),
        .ch1_txmstreset(ch1_txmstreset),
        .ch1_txmstresetdone(ch1_txmstresetdone),
        .ch1_txoneszeros(ch1_txoneszeros),
        .ch1_txoutclk(ch1_txoutclk),
        .ch1_txpausedelayalign(ch1_txpausedelayalign),
        .ch1_txpcsresetmask(ch1_txpcsresetmask),
        .ch1_txpd(ch1_txpd),
        .ch1_txphaligndone(ch1_txphaligndone),
        .ch1_txphalignerr(ch1_txphalignerr),
        .ch1_txphalignoutrsvd(ch1_txphalignoutrsvd),
        .ch1_txphalignreq(ch1_txphalignreq),
        .ch1_txphalignresetmask(ch1_txphalignresetmask),
        .ch1_txphdlypd(ch1_txphdlypd),
        .ch1_txphdlyreset(ch1_txphdlyreset),
        .ch1_txphdlyresetdone(ch1_txphdlyresetdone),
        .ch1_txphdlytstclk(ch1_txphdlytstclk),
        .ch1_txphsetinitdone(ch1_txphsetinitdone),
        .ch1_txphsetinitreq(ch1_txphsetinitreq),
        .ch1_txphshift180(ch1_txphshift180),
        .ch1_txphshift180done(ch1_txphshift180done),
        .ch1_txpicodeovrden(ch1_txpicodeovrden),
        .ch1_txpicodereset(ch1_txpicodereset),
        .ch1_txpippmen(ch1_txpippmen),
        .ch1_txpippmstepsize(ch1_txpippmstepsize),
        .ch1_txpisopd(ch1_txpisopd),
        .ch1_txpmaresetdone(ch1_txpmaresetdone),
        .ch1_txpmaresetmask(ch1_txpmaresetmask),
        .ch1_txpolarity(ch1_txpolarity),
        .ch1_txpostcursor(ch1_txpostcursor),
        .ch1_txprbsforceerr(ch1_txprbsforceerr),
        .ch1_txprbssel(ch1_txprbssel),
        .ch1_txprecursor(ch1_txprecursor),
        .ch1_txprogdivreset(ch1_txprogdivreset),
        .ch1_txprogdivresetdone(ch1_txprogdivresetdone),
        .ch1_txrate(ch1_txrate),
        .ch1_txresetdone(ch1_txresetdone),
        .ch1_txresetmode(ch1_txresetmode),
        .ch1_txsequence(ch1_txsequence),
        .ch1_txswing(ch1_txswing),
        .ch1_txsyncallin(ch1_txsyncallin),
        .ch1_txsyncdone(ch1_txsyncdone),
        .ch1_txuserrdy(ch1_txuserrdy),
        .ch1_txusrclk(ch1_txusrclk),
        .ch2_bufgtce(ch2_bufgtce),
        .ch2_bufgtcemask(ch2_bufgtcemask),
        .ch2_bufgtdiv(ch2_bufgtdiv),
        .ch2_bufgtrst(ch2_bufgtrst),
        .ch2_bufgtrstmask(ch2_bufgtrstmask),
        .ch2_cdrbmcdrreq(ch2_cdrbmcdrreq),
        .ch2_cdrfreqos(ch2_cdrfreqos),
        .ch2_cdrincpctrl(ch2_cdrincpctrl),
        .ch2_cdrstepdir(ch2_cdrstepdir),
        .ch2_cdrstepsq(ch2_cdrstepsq),
        .ch2_cdrstepsx(ch2_cdrstepsx),
        .ch2_cfokovrdfinish(ch2_cfokovrdfinish),
        .ch2_cfokovrdpulse(ch2_cfokovrdpulse),
        .ch2_cfokovrdrdy0(ch2_cfokovrdrdy0),
        .ch2_cfokovrdrdy1(ch2_cfokovrdrdy1),
        .ch2_cfokovrdstart(ch2_cfokovrdstart),
        .ch2_clkrsvd0(ch2_clkrsvd0),
        .ch2_clkrsvd1(ch2_clkrsvd1),
        .ch2_dmonfiforeset(ch2_dmonfiforeset),
        .ch2_dmonitorclk(ch2_dmonitorclk),
        .ch2_dmonitorout(ch2_dmonitorout),
        .ch2_dmonitoroutclk(ch2_dmonitoroutclk),
        .ch2_eyescandataerror(ch2_eyescandataerror),
        .ch2_eyescanreset(ch2_eyescanreset),
        .ch2_eyescantrigger(ch2_eyescantrigger),
        .ch2_gtrsvd(ch2_gtrsvd),
        .ch2_gtrxreset(ch2_gtrxreset),
        .ch2_gttxreset(ch2_gttxreset),
        .ch2_hsdppcsreset(ch2_hsdppcsreset),
        .ch2_iloreset(ch2_iloreset),
        .ch2_iloresetdone(ch2_iloresetdone),
        .ch2_iloresetmask(ch2_iloresetmask),
        .ch2_loopback(ch2_loopback),
        .ch2_pcierstb(ch2_pcierstb),
        .ch2_pcsrsvdin({ch2_pcsrsvdin[15:11],1'b0,ch2_pcsrsvdin[9:8],1'b0,ch2_pcsrsvdin[6:0]}),
        .ch2_pcsrsvdout(ch2_pcsrsvdout),
        .ch2_phyesmadaptsave(ch2_phyesmadaptsave),
        .ch2_phyready(ch2_phyready),
        .ch2_phystatus(ch2_phystatus),
        .ch2_pinrsvdas(ch2_pinrsvdas),
        .ch2_resetexception(ch2_resetexception),
        .ch2_rx10gstat(ch2_rx10gstat),
        .ch2_rxbufstatus(ch2_rxbufstatus),
        .ch2_rxbyteisaligned(ch2_rxbyteisaligned),
        .ch2_rxbyterealign(ch2_rxbyterealign),
        .ch2_rxcdrhold(ch2_rxcdrhold),
        .ch2_rxcdrlock(ch2_rxcdrlock),
        .ch2_rxcdrovrden(ch2_rxcdrovrden),
        .ch2_rxcdrphdone(ch2_rxcdrphdone),
        .ch2_rxcdrreset(ch2_rxcdrreset),
        .ch2_rxchanbondseq(ch2_rxchanbondseq),
        .ch2_rxchanisaligned(ch2_rxchanisaligned),
        .ch2_rxchanrealign(ch2_rxchanrealign),
        .ch2_rxchbondi(ch2_rxchbondi),
        .ch2_rxchbondo(ch2_rxchbondo),
        .ch2_rxclkcorcnt(ch2_rxclkcorcnt),
        .ch2_rxcominitdet(ch2_rxcominitdet),
        .ch2_rxcommadet(ch2_rxcommadet),
        .ch2_rxcomsasdet(ch2_rxcomsasdet),
        .ch2_rxcomwakedet(ch2_rxcomwakedet),
        .ch2_rxctrl0(ch2_rxctrl0),
        .ch2_rxctrl1(ch2_rxctrl1),
        .ch2_rxctrl2(ch2_rxctrl2),
        .ch2_rxctrl3(ch2_rxctrl3),
        .ch2_rxdapicodeovrden(ch2_rxdapicodeovrden),
        .ch2_rxdapicodereset(ch2_rxdapicodereset),
        .ch2_rxdata(ch2_rxdata),
        .ch2_rxdataextendrsvd(ch2_rxdataextendrsvd),
        .ch2_rxdatavalid(ch2_rxdatavalid),
        .ch2_rxdccdone(ch2_rxdccdone),
        .ch2_rxdlyalignerr(ch2_rxdlyalignerr),
        .ch2_rxdlyalignprog(ch2_rxdlyalignprog),
        .ch2_rxdlyalignreq(ch2_rxdlyalignreq),
        .ch2_rxelecidle(ch2_rxelecidle),
        .ch2_rxeqtraining(ch2_rxeqtraining),
        .ch2_rxfinealigndone(ch2_rxfinealigndone),
        .ch2_rxgearboxslip(ch2_rxgearboxslip),
        .ch2_rxheader(ch2_rxheader),
        .ch2_rxheadervalid(ch2_rxheadervalid),
        .ch2_rxlatclk(ch2_rxlatclk),
        .ch2_rxlpmen(ch2_rxlpmen),
        .ch2_rxmldchaindone(ch2_rxmldchaindone),
        .ch2_rxmldchainreq(ch2_rxmldchainreq),
        .ch2_rxmlfinealignreq(ch2_rxmlfinealignreq),
        .ch2_rxmstdatapathreset(ch2_rxmstdatapathreset),
        .ch2_rxmstreset(ch2_rxmstreset),
        .ch2_rxmstresetdone(ch2_rxmstresetdone),
        .ch2_rxoobreset(ch2_rxoobreset),
        .ch2_rxosintdone(ch2_rxosintdone),
        .ch2_rxosintstarted(ch2_rxosintstarted),
        .ch2_rxosintstrobedone(ch2_rxosintstrobedone),
        .ch2_rxosintstrobestarted(ch2_rxosintstrobestarted),
        .ch2_rxoutclk(ch2_rxoutclk),
        .ch2_rxpcsresetmask(ch2_rxpcsresetmask),
        .ch2_rxpd(ch2_rxpd),
        .ch2_rxphaligndone(ch2_rxphaligndone),
        .ch2_rxphalignerr(ch2_rxphalignerr),
        .ch2_rxphalignreq(ch2_rxphalignreq),
        .ch2_rxphalignresetmask(ch2_rxphalignresetmask),
        .ch2_rxphdlypd(ch2_rxphdlypd),
        .ch2_rxphdlyreset(ch2_rxphdlyreset),
        .ch2_rxphdlyresetdone(ch2_rxphdlyresetdone),
        .ch2_rxphsetinitdone(ch2_rxphsetinitdone),
        .ch2_rxphsetinitreq(ch2_rxphsetinitreq),
        .ch2_rxphshift180(ch2_rxphshift180),
        .ch2_rxphshift180done(ch2_rxphshift180done),
        .ch2_rxpmaresetdone(ch2_rxpmaresetdone),
        .ch2_rxpmaresetmask(ch2_rxpmaresetmask),
        .ch2_rxpolarity(ch2_rxpolarity),
        .ch2_rxprbscntreset(ch2_rxprbscntreset),
        .ch2_rxprbserr(ch2_rxprbserr),
        .ch2_rxprbslocked(ch2_rxprbslocked),
        .ch2_rxprbssel(ch2_rxprbssel),
        .ch2_rxprogdivreset(ch2_rxprogdivreset),
        .ch2_rxprogdivresetdone(ch2_rxprogdivresetdone),
        .ch2_rxrate(ch2_rxrate),
        .ch2_rxresetdone(ch2_rxresetdone),
        .ch2_rxresetmode(ch2_rxresetmode),
        .ch2_rxslide(ch2_rxslide),
        .ch2_rxsliderdy(ch2_rxsliderdy),
        .ch2_rxstartofseq(ch2_rxstartofseq),
        .ch2_rxstatus(ch2_rxstatus),
        .ch2_rxsyncallin(ch2_rxsyncallin),
        .ch2_rxsyncdone(ch2_rxsyncdone),
        .ch2_rxtermination(ch2_rxtermination),
        .ch2_rxuserrdy(ch2_rxuserrdy),
        .ch2_rxusrclk(ch2_rxusrclk),
        .ch2_rxvalid(ch2_rxvalid),
        .ch2_tstin(ch2_tstin),
        .ch2_tx10gstat(ch2_tx10gstat),
        .ch2_txbufstatus(ch2_txbufstatus),
        .ch2_txcomfinish(ch2_txcomfinish),
        .ch2_txcominit(ch2_txcominit),
        .ch2_txcomsas(ch2_txcomsas),
        .ch2_txcomwake(ch2_txcomwake),
        .ch2_txctrl0(ch2_txctrl0),
        .ch2_txctrl1(ch2_txctrl1),
        .ch2_txctrl2(ch2_txctrl2),
        .ch2_txdapicodeovrden(ch2_txdapicodeovrden),
        .ch2_txdapicodereset(ch2_txdapicodereset),
        .ch2_txdata(ch2_txdata),
        .ch2_txdataextendrsvd(ch2_txdataextendrsvd),
        .ch2_txdccdone(ch2_txdccdone),
        .ch2_txdeemph(ch2_txdeemph),
        .ch2_txdetectrx(ch2_txdetectrx),
        .ch2_txdiffctrl(ch2_txdiffctrl),
        .ch2_txdlyalignerr(ch2_txdlyalignerr),
        .ch2_txdlyalignprog(ch2_txdlyalignprog),
        .ch2_txdlyalignreq(ch2_txdlyalignreq),
        .ch2_txelecidle(ch2_txelecidle),
        .ch2_txheader(ch2_txheader),
        .ch2_txinhibit(ch2_txinhibit),
        .ch2_txlatclk(ch2_txlatclk),
        .ch2_txmaincursor(ch2_txmaincursor),
        .ch2_txmargin(ch2_txmargin),
        .ch2_txmldchaindone(ch2_txmldchaindone),
        .ch2_txmldchainreq(ch2_txmldchainreq),
        .ch2_txmstdatapathreset(ch2_txmstdatapathreset),
        .ch2_txmstreset(ch2_txmstreset),
        .ch2_txmstresetdone(ch2_txmstresetdone),
        .ch2_txoneszeros(ch2_txoneszeros),
        .ch2_txoutclk(ch2_txoutclk),
        .ch2_txpausedelayalign(ch2_txpausedelayalign),
        .ch2_txpcsresetmask(ch2_txpcsresetmask),
        .ch2_txpd(ch2_txpd),
        .ch2_txphaligndone(ch2_txphaligndone),
        .ch2_txphalignerr(ch2_txphalignerr),
        .ch2_txphalignoutrsvd(ch2_txphalignoutrsvd),
        .ch2_txphalignreq(ch2_txphalignreq),
        .ch2_txphalignresetmask(ch2_txphalignresetmask),
        .ch2_txphdlypd(ch2_txphdlypd),
        .ch2_txphdlyreset(ch2_txphdlyreset),
        .ch2_txphdlyresetdone(ch2_txphdlyresetdone),
        .ch2_txphdlytstclk(ch2_txphdlytstclk),
        .ch2_txphsetinitdone(ch2_txphsetinitdone),
        .ch2_txphsetinitreq(ch2_txphsetinitreq),
        .ch2_txphshift180(ch2_txphshift180),
        .ch2_txphshift180done(ch2_txphshift180done),
        .ch2_txpicodeovrden(ch2_txpicodeovrden),
        .ch2_txpicodereset(ch2_txpicodereset),
        .ch2_txpippmen(ch2_txpippmen),
        .ch2_txpippmstepsize(ch2_txpippmstepsize),
        .ch2_txpisopd(ch2_txpisopd),
        .ch2_txpmaresetdone(ch2_txpmaresetdone),
        .ch2_txpmaresetmask(ch2_txpmaresetmask),
        .ch2_txpolarity(ch2_txpolarity),
        .ch2_txpostcursor(ch2_txpostcursor),
        .ch2_txprbsforceerr(ch2_txprbsforceerr),
        .ch2_txprbssel(ch2_txprbssel),
        .ch2_txprecursor(ch2_txprecursor),
        .ch2_txprogdivreset(ch2_txprogdivreset),
        .ch2_txprogdivresetdone(ch2_txprogdivresetdone),
        .ch2_txrate(ch2_txrate),
        .ch2_txresetdone(ch2_txresetdone),
        .ch2_txresetmode(ch2_txresetmode),
        .ch2_txsequence(ch2_txsequence),
        .ch2_txswing(ch2_txswing),
        .ch2_txsyncallin(ch2_txsyncallin),
        .ch2_txsyncdone(ch2_txsyncdone),
        .ch2_txuserrdy(ch2_txuserrdy),
        .ch2_txusrclk(ch2_txusrclk),
        .ch3_bufgtce(ch3_bufgtce),
        .ch3_bufgtcemask(ch3_bufgtcemask),
        .ch3_bufgtdiv(ch3_bufgtdiv),
        .ch3_bufgtrst(ch3_bufgtrst),
        .ch3_bufgtrstmask(ch3_bufgtrstmask),
        .ch3_cdrbmcdrreq(ch3_cdrbmcdrreq),
        .ch3_cdrfreqos(ch3_cdrfreqos),
        .ch3_cdrincpctrl(ch3_cdrincpctrl),
        .ch3_cdrstepdir(ch3_cdrstepdir),
        .ch3_cdrstepsq(ch3_cdrstepsq),
        .ch3_cdrstepsx(ch3_cdrstepsx),
        .ch3_cfokovrdfinish(ch3_cfokovrdfinish),
        .ch3_cfokovrdpulse(ch3_cfokovrdpulse),
        .ch3_cfokovrdrdy0(ch3_cfokovrdrdy0),
        .ch3_cfokovrdrdy1(ch3_cfokovrdrdy1),
        .ch3_cfokovrdstart(ch3_cfokovrdstart),
        .ch3_clkrsvd0(ch3_clkrsvd0),
        .ch3_clkrsvd1(ch3_clkrsvd1),
        .ch3_dmonfiforeset(ch3_dmonfiforeset),
        .ch3_dmonitorclk(ch3_dmonitorclk),
        .ch3_dmonitorout(ch3_dmonitorout),
        .ch3_dmonitoroutclk(ch3_dmonitoroutclk),
        .ch3_eyescandataerror(ch3_eyescandataerror),
        .ch3_eyescanreset(ch3_eyescanreset),
        .ch3_eyescantrigger(ch3_eyescantrigger),
        .ch3_gtrsvd(ch3_gtrsvd),
        .ch3_gtrxreset(ch3_gtrxreset),
        .ch3_gttxreset(ch3_gttxreset),
        .ch3_hsdppcsreset(ch3_hsdppcsreset),
        .ch3_iloreset(ch3_iloreset),
        .ch3_iloresetdone(ch3_iloresetdone),
        .ch3_iloresetmask(ch3_iloresetmask),
        .ch3_loopback(ch3_loopback),
        .ch3_pcierstb(ch3_pcierstb),
        .ch3_pcsrsvdin({ch3_pcsrsvdin[15:11],1'b0,ch3_pcsrsvdin[9:8],1'b0,ch3_pcsrsvdin[6:0]}),
        .ch3_pcsrsvdout(ch3_pcsrsvdout),
        .ch3_phyesmadaptsave(ch3_phyesmadaptsave),
        .ch3_phyready(ch3_phyready),
        .ch3_phystatus(ch3_phystatus),
        .ch3_pinrsvdas(ch3_pinrsvdas),
        .ch3_resetexception(ch3_resetexception),
        .ch3_rx10gstat(ch3_rx10gstat),
        .ch3_rxbufstatus(ch3_rxbufstatus),
        .ch3_rxbyteisaligned(ch3_rxbyteisaligned),
        .ch3_rxbyterealign(ch3_rxbyterealign),
        .ch3_rxcdrhold(ch3_rxcdrhold),
        .ch3_rxcdrlock(ch3_rxcdrlock),
        .ch3_rxcdrovrden(ch3_rxcdrovrden),
        .ch3_rxcdrphdone(ch3_rxcdrphdone),
        .ch3_rxcdrreset(ch3_rxcdrreset),
        .ch3_rxchanbondseq(ch3_rxchanbondseq),
        .ch3_rxchanisaligned(ch3_rxchanisaligned),
        .ch3_rxchanrealign(ch3_rxchanrealign),
        .ch3_rxchbondi(ch3_rxchbondi),
        .ch3_rxchbondo(ch3_rxchbondo),
        .ch3_rxclkcorcnt(ch3_rxclkcorcnt),
        .ch3_rxcominitdet(ch3_rxcominitdet),
        .ch3_rxcommadet(ch3_rxcommadet),
        .ch3_rxcomsasdet(ch3_rxcomsasdet),
        .ch3_rxcomwakedet(ch3_rxcomwakedet),
        .ch3_rxctrl0(ch3_rxctrl0),
        .ch3_rxctrl1(ch3_rxctrl1),
        .ch3_rxctrl2(ch3_rxctrl2),
        .ch3_rxctrl3(ch3_rxctrl3),
        .ch3_rxdapicodeovrden(ch3_rxdapicodeovrden),
        .ch3_rxdapicodereset(ch3_rxdapicodereset),
        .ch3_rxdata(ch3_rxdata),
        .ch3_rxdataextendrsvd(ch3_rxdataextendrsvd),
        .ch3_rxdatavalid(ch3_rxdatavalid),
        .ch3_rxdccdone(ch3_rxdccdone),
        .ch3_rxdlyalignerr(ch3_rxdlyalignerr),
        .ch3_rxdlyalignprog(ch3_rxdlyalignprog),
        .ch3_rxdlyalignreq(ch3_rxdlyalignreq),
        .ch3_rxelecidle(ch3_rxelecidle),
        .ch3_rxeqtraining(ch3_rxeqtraining),
        .ch3_rxfinealigndone(ch3_rxfinealigndone),
        .ch3_rxgearboxslip(ch3_rxgearboxslip),
        .ch3_rxheader(ch3_rxheader),
        .ch3_rxheadervalid(ch3_rxheadervalid),
        .ch3_rxlatclk(ch3_rxlatclk),
        .ch3_rxlpmen(ch3_rxlpmen),
        .ch3_rxmldchaindone(ch3_rxmldchaindone),
        .ch3_rxmldchainreq(ch3_rxmldchainreq),
        .ch3_rxmlfinealignreq(ch3_rxmlfinealignreq),
        .ch3_rxmstdatapathreset(ch3_rxmstdatapathreset),
        .ch3_rxmstreset(ch3_rxmstreset),
        .ch3_rxmstresetdone(ch3_rxmstresetdone),
        .ch3_rxoobreset(ch3_rxoobreset),
        .ch3_rxosintdone(ch3_rxosintdone),
        .ch3_rxosintstarted(ch3_rxosintstarted),
        .ch3_rxosintstrobedone(ch3_rxosintstrobedone),
        .ch3_rxosintstrobestarted(ch3_rxosintstrobestarted),
        .ch3_rxoutclk(ch3_rxoutclk),
        .ch3_rxpcsresetmask(ch3_rxpcsresetmask),
        .ch3_rxpd(ch3_rxpd),
        .ch3_rxphaligndone(ch3_rxphaligndone),
        .ch3_rxphalignerr(ch3_rxphalignerr),
        .ch3_rxphalignreq(ch3_rxphalignreq),
        .ch3_rxphalignresetmask(ch3_rxphalignresetmask),
        .ch3_rxphdlypd(ch3_rxphdlypd),
        .ch3_rxphdlyreset(ch3_rxphdlyreset),
        .ch3_rxphdlyresetdone(ch3_rxphdlyresetdone),
        .ch3_rxphsetinitdone(ch3_rxphsetinitdone),
        .ch3_rxphsetinitreq(ch3_rxphsetinitreq),
        .ch3_rxphshift180(ch3_rxphshift180),
        .ch3_rxphshift180done(ch3_rxphshift180done),
        .ch3_rxpmaresetdone(ch3_rxpmaresetdone),
        .ch3_rxpmaresetmask(ch3_rxpmaresetmask),
        .ch3_rxpolarity(ch3_rxpolarity),
        .ch3_rxprbscntreset(ch3_rxprbscntreset),
        .ch3_rxprbserr(ch3_rxprbserr),
        .ch3_rxprbslocked(ch3_rxprbslocked),
        .ch3_rxprbssel(ch3_rxprbssel),
        .ch3_rxprogdivreset(ch3_rxprogdivreset),
        .ch3_rxprogdivresetdone(ch3_rxprogdivresetdone),
        .ch3_rxrate(ch3_rxrate),
        .ch3_rxresetdone(ch3_rxresetdone),
        .ch3_rxresetmode(ch3_rxresetmode),
        .ch3_rxslide(ch3_rxslide),
        .ch3_rxsliderdy(ch3_rxsliderdy),
        .ch3_rxstartofseq(ch3_rxstartofseq),
        .ch3_rxstatus(ch3_rxstatus),
        .ch3_rxsyncallin(ch3_rxsyncallin),
        .ch3_rxsyncdone(ch3_rxsyncdone),
        .ch3_rxtermination(ch3_rxtermination),
        .ch3_rxuserrdy(ch3_rxuserrdy),
        .ch3_rxusrclk(ch3_rxusrclk),
        .ch3_rxvalid(ch3_rxvalid),
        .ch3_tstin(ch3_tstin),
        .ch3_tx10gstat(ch3_tx10gstat),
        .ch3_txbufstatus(ch3_txbufstatus),
        .ch3_txcomfinish(ch3_txcomfinish),
        .ch3_txcominit(ch3_txcominit),
        .ch3_txcomsas(ch3_txcomsas),
        .ch3_txcomwake(ch3_txcomwake),
        .ch3_txctrl0(ch3_txctrl0),
        .ch3_txctrl1(ch3_txctrl1),
        .ch3_txctrl2(ch3_txctrl2),
        .ch3_txdapicodeovrden(ch3_txdapicodeovrden),
        .ch3_txdapicodereset(ch3_txdapicodereset),
        .ch3_txdata(ch3_txdata),
        .ch3_txdataextendrsvd(ch3_txdataextendrsvd),
        .ch3_txdccdone(ch3_txdccdone),
        .ch3_txdeemph(ch3_txdeemph),
        .ch3_txdetectrx(ch3_txdetectrx),
        .ch3_txdiffctrl(ch3_txdiffctrl),
        .ch3_txdlyalignerr(ch3_txdlyalignerr),
        .ch3_txdlyalignprog(ch3_txdlyalignprog),
        .ch3_txdlyalignreq(ch3_txdlyalignreq),
        .ch3_txelecidle(ch3_txelecidle),
        .ch3_txheader(ch3_txheader),
        .ch3_txinhibit(ch3_txinhibit),
        .ch3_txlatclk(ch3_txlatclk),
        .ch3_txmaincursor(ch3_txmaincursor),
        .ch3_txmargin(ch3_txmargin),
        .ch3_txmldchaindone(ch3_txmldchaindone),
        .ch3_txmldchainreq(ch3_txmldchainreq),
        .ch3_txmstdatapathreset(ch3_txmstdatapathreset),
        .ch3_txmstreset(ch3_txmstreset),
        .ch3_txmstresetdone(ch3_txmstresetdone),
        .ch3_txoneszeros(ch3_txoneszeros),
        .ch3_txoutclk(ch3_txoutclk),
        .ch3_txpausedelayalign(ch3_txpausedelayalign),
        .ch3_txpcsresetmask(ch3_txpcsresetmask),
        .ch3_txpd(ch3_txpd),
        .ch3_txphaligndone(ch3_txphaligndone),
        .ch3_txphalignerr(ch3_txphalignerr),
        .ch3_txphalignoutrsvd(ch3_txphalignoutrsvd),
        .ch3_txphalignreq(ch3_txphalignreq),
        .ch3_txphalignresetmask(ch3_txphalignresetmask),
        .ch3_txphdlypd(ch3_txphdlypd),
        .ch3_txphdlyreset(ch3_txphdlyreset),
        .ch3_txphdlyresetdone(ch3_txphdlyresetdone),
        .ch3_txphdlytstclk(ch3_txphdlytstclk),
        .ch3_txphsetinitdone(ch3_txphsetinitdone),
        .ch3_txphsetinitreq(ch3_txphsetinitreq),
        .ch3_txphshift180(ch3_txphshift180),
        .ch3_txphshift180done(ch3_txphshift180done),
        .ch3_txpicodeovrden(ch3_txpicodeovrden),
        .ch3_txpicodereset(ch3_txpicodereset),
        .ch3_txpippmen(ch3_txpippmen),
        .ch3_txpippmstepsize(ch3_txpippmstepsize),
        .ch3_txpisopd(ch3_txpisopd),
        .ch3_txpmaresetdone(ch3_txpmaresetdone),
        .ch3_txpmaresetmask(ch3_txpmaresetmask),
        .ch3_txpolarity(ch3_txpolarity),
        .ch3_txpostcursor(ch3_txpostcursor),
        .ch3_txprbsforceerr(ch3_txprbsforceerr),
        .ch3_txprbssel(ch3_txprbssel),
        .ch3_txprecursor(ch3_txprecursor),
        .ch3_txprogdivreset(ch3_txprogdivreset),
        .ch3_txprogdivresetdone(ch3_txprogdivresetdone),
        .ch3_txrate(ch3_txrate),
        .ch3_txresetdone(ch3_txresetdone),
        .ch3_txresetmode(ch3_txresetmode),
        .ch3_txsequence(ch3_txsequence),
        .ch3_txswing(ch3_txswing),
        .ch3_txsyncallin(ch3_txsyncallin),
        .ch3_txsyncdone(ch3_txsyncdone),
        .ch3_txuserrdy(ch3_txuserrdy),
        .ch3_txusrclk(ch3_txusrclk),
        .correcterr(correcterr),
        .ctrlrsvdin0(ctrlrsvdin0),
        .ctrlrsvdin1(ctrlrsvdin1),
        .ctrlrsvdout(ctrlrsvdout),
        .debugtraceclk(debugtraceclk),
        .debugtraceready(debugtraceready),
        .debugtracetdata(debugtracetdata),
        .debugtracetvalid(debugtracetvalid),
        .gpi(gpi),
        .gpo(gpo),
        .gtpowergood(gtpowergood),
        .hsclk0_lcpllclkrsvd0(hsclk0_lcpllclkrsvd0),
        .hsclk0_lcpllclkrsvd1(hsclk0_lcpllclkrsvd1),
        .hsclk0_lcpllfbclklost(hsclk0_lcpllfbclklost),
        .hsclk0_lcpllfbdiv(hsclk0_lcpllfbdiv),
        .hsclk0_lcpllgtgrefclk(1'b0),
        .hsclk0_lcplllock(hsclk0_lcplllock),
        .hsclk0_lcpllpd(hsclk0_lcpllpd),
        .hsclk0_lcpllrefclklost(hsclk0_lcpllrefclklost),
        .hsclk0_lcpllrefclkmonitor(hsclk0_lcpllrefclkmonitor),
        .hsclk0_lcpllrefclksel(hsclk0_lcpllrefclksel),
        .hsclk0_lcpllreset(hsclk0_lcpllreset),
        .hsclk0_lcpllresetbypassmode(hsclk0_lcpllresetbypassmode),
        .hsclk0_lcpllresetmask(hsclk0_lcpllresetmask),
        .hsclk0_lcpllrsvd0(hsclk0_lcpllrsvd0),
        .hsclk0_lcpllrsvd1(hsclk0_lcpllrsvd1),
        .hsclk0_lcpllrsvdout(hsclk0_lcpllrsvdout),
        .hsclk0_lcpllsdmdata(hsclk0_lcpllsdmdata),
        .hsclk0_lcpllsdmtoggle(hsclk0_lcpllsdmtoggle),
        .hsclk0_rpllclkrsvd0(hsclk0_rpllclkrsvd0),
        .hsclk0_rpllclkrsvd1(hsclk0_rpllclkrsvd1),
        .hsclk0_rpllfbclklost(hsclk0_rpllfbclklost),
        .hsclk0_rpllfbdiv(hsclk0_rpllfbdiv),
        .hsclk0_rpllgtgrefclk(1'b0),
        .hsclk0_rplllock(hsclk0_rplllock),
        .hsclk0_rpllpd(hsclk0_rpllpd),
        .hsclk0_rpllrefclklost(hsclk0_rpllrefclklost),
        .hsclk0_rpllrefclkmonitor(hsclk0_rpllrefclkmonitor),
        .hsclk0_rpllrefclksel(hsclk0_rpllrefclksel),
        .hsclk0_rpllreset(hsclk0_rpllreset),
        .hsclk0_rpllresetbypassmode(hsclk0_rpllresetbypassmode),
        .hsclk0_rpllresetmask(hsclk0_rpllresetmask),
        .hsclk0_rpllrsvd0(hsclk0_rpllrsvd0),
        .hsclk0_rpllrsvd1(hsclk0_rpllrsvd1),
        .hsclk0_rpllrsvdout(hsclk0_rpllrsvdout),
        .hsclk0_rpllsdmdata(hsclk0_rpllsdmdata),
        .hsclk0_rpllsdmtoggle(hsclk0_rpllsdmtoggle),
        .hsclk0_rxrecclkout0(hsclk0_rxrecclkout0),
        .hsclk0_rxrecclkout1(hsclk0_rxrecclkout1),
        .hsclk0_rxrecclksel(hsclk0_rxrecclksel),
        .hsclk1_lcpllclkrsvd0(hsclk1_lcpllclkrsvd0),
        .hsclk1_lcpllclkrsvd1(hsclk1_lcpllclkrsvd1),
        .hsclk1_lcpllfbclklost(hsclk1_lcpllfbclklost),
        .hsclk1_lcpllfbdiv(hsclk1_lcpllfbdiv),
        .hsclk1_lcpllgtgrefclk(1'b0),
        .hsclk1_lcplllock(hsclk1_lcplllock),
        .hsclk1_lcpllpd(hsclk1_lcpllpd),
        .hsclk1_lcpllrefclklost(hsclk1_lcpllrefclklost),
        .hsclk1_lcpllrefclkmonitor(hsclk1_lcpllrefclkmonitor),
        .hsclk1_lcpllrefclksel(hsclk1_lcpllrefclksel),
        .hsclk1_lcpllreset(hsclk1_lcpllreset),
        .hsclk1_lcpllresetbypassmode(hsclk1_lcpllresetbypassmode),
        .hsclk1_lcpllresetmask(hsclk1_lcpllresetmask),
        .hsclk1_lcpllrsvd0(hsclk1_lcpllrsvd0),
        .hsclk1_lcpllrsvd1(hsclk1_lcpllrsvd1),
        .hsclk1_lcpllrsvdout(hsclk1_lcpllrsvdout),
        .hsclk1_lcpllsdmdata(hsclk1_lcpllsdmdata),
        .hsclk1_lcpllsdmtoggle(hsclk1_lcpllsdmtoggle),
        .hsclk1_rpllclkrsvd0(hsclk1_rpllclkrsvd0),
        .hsclk1_rpllclkrsvd1(hsclk1_rpllclkrsvd1),
        .hsclk1_rpllfbclklost(hsclk1_rpllfbclklost),
        .hsclk1_rpllfbdiv(hsclk1_rpllfbdiv),
        .hsclk1_rpllgtgrefclk(1'b0),
        .hsclk1_rplllock(hsclk1_rplllock),
        .hsclk1_rpllpd(hsclk1_rpllpd),
        .hsclk1_rpllrefclklost(hsclk1_rpllrefclklost),
        .hsclk1_rpllrefclkmonitor(hsclk1_rpllrefclkmonitor),
        .hsclk1_rpllrefclksel(hsclk1_rpllrefclksel),
        .hsclk1_rpllreset(hsclk1_rpllreset),
        .hsclk1_rpllresetbypassmode(hsclk1_rpllresetbypassmode),
        .hsclk1_rpllresetmask(hsclk1_rpllresetmask),
        .hsclk1_rpllrsvd0(hsclk1_rpllrsvd0),
        .hsclk1_rpllrsvd1(hsclk1_rpllrsvd1),
        .hsclk1_rpllrsvdout(hsclk1_rpllrsvdout),
        .hsclk1_rpllsdmdata(hsclk1_rpllsdmdata),
        .hsclk1_rpllsdmtoggle(hsclk1_rpllsdmtoggle),
        .hsclk1_rxrecclkout0(hsclk1_rxrecclkout0),
        .hsclk1_rxrecclkout1(hsclk1_rxrecclkout1),
        .hsclk1_rxrecclksel(hsclk1_rxrecclksel),
        .pcielinkreachtarget(pcielinkreachtarget),
        .pcieltssm(pcieltssm),
        .pipenorthin(pipenorthin),
        .pipenorthout(pipenorthout),
        .pipesouthin(pipesouthin),
        .pipesouthout(pipesouthout),
        .rcalenb(rcalenb),
        .refclk0_clktestsig(refclk0_clktestsig),
        .refclk0_clktestsigint(refclk0_clktestsigint),
        .refclk0_gtrefclkpd(refclk0_gtrefclkpd),
        .refclk0_gtrefclkpdint(refclk0_gtrefclkpdint),
        .refclk1_clktestsig(refclk1_clktestsig),
        .refclk1_clktestsigint(refclk1_clktestsigint),
        .refclk1_gtrefclkpd(refclk1_gtrefclkpd),
        .refclk1_gtrefclkpdint(refclk1_gtrefclkpdint),
        .resetdone_northin(resetdone_northin),
        .resetdone_northout(resetdone_northout),
        .resetdone_southin(resetdone_southin),
        .resetdone_southout(resetdone_southout),
        .rxmarginclk(rxmarginclk),
        .rxmarginreqack(rxmarginreqack),
        .rxmarginreqcmd(rxmarginreqcmd),
        .rxmarginreqlanenum(rxmarginreqlanenum),
        .rxmarginreqpayld(rxmarginreqpayld),
        .rxmarginreqreq(rxmarginreqreq),
        .rxmarginresack(rxmarginresack),
        .rxmarginrescmd(rxmarginrescmd),
        .rxmarginreslanenum(rxmarginreslanenum),
        .rxmarginrespayld(rxmarginrespayld),
        .rxmarginresreq(rxmarginresreq),
        .rxn(rxn),
        .rxp(rxp),
        .rxpinorthin(rxpinorthin),
        .rxpinorthout(rxpinorthout),
        .rxpisouthin(rxpisouthin),
        .rxpisouthout(rxpisouthout),
        .s_axi_lite_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_arready(NLW_inst_s_axi_lite_arready_UNCONNECTED),
        .s_axi_lite_arvalid(1'b0),
        .s_axi_lite_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_awready(NLW_inst_s_axi_lite_awready_UNCONNECTED),
        .s_axi_lite_awvalid(1'b0),
        .s_axi_lite_bready(1'b0),
        .s_axi_lite_bresp(NLW_inst_s_axi_lite_bresp_UNCONNECTED[1:0]),
        .s_axi_lite_bvalid(NLW_inst_s_axi_lite_bvalid_UNCONNECTED),
        .s_axi_lite_clk(1'b0),
        .s_axi_lite_rdata(NLW_inst_s_axi_lite_rdata_UNCONNECTED[31:0]),
        .s_axi_lite_resetn(1'b0),
        .s_axi_lite_rready(1'b0),
        .s_axi_lite_rresp(NLW_inst_s_axi_lite_rresp_UNCONNECTED[1:0]),
        .s_axi_lite_rvalid(NLW_inst_s_axi_lite_rvalid_UNCONNECTED),
        .s_axi_lite_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_wready(NLW_inst_s_axi_lite_wready_UNCONNECTED),
        .s_axi_lite_wvalid(1'b0),
        .trigackin0(trigackin0),
        .trigackout0(trigackout0),
        .trigin0(trigin0),
        .trigout0(trigout0),
        .txn(txn),
        .txp(txp),
        .txpinorthin(txpinorthin),
        .txpinorthout(txpinorthout),
        .txpisouthin(txpisouthin),
        .txpisouthout(txpisouthout),
        .ubenable(ubenable),
        .ubinterrupt(ubinterrupt),
        .ubintr(ubintr),
        .ubiolmbrst(ubiolmbrst),
        .ubmbrst(ubmbrst),
        .ubrxuart(ubrxuart),
        .ubtxuart(ubtxuart),
        .uncorrecterr(uncorrecterr));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_apb_memcell_arb
   (apb3prdata,
    apb3pslverr,
    Q,
    \di_reg[31]_0 ,
    apb_user_prdy_r_reg_0,
    apb3penable_quad_int,
    apb3pwrite_quad_int,
    apb3sel_quad_int,
    D,
    p_0_in,
    apb3clk,
    apb3pwdata,
    apb3penable,
    apb3pwrite,
    apb3paddr,
    apb3psel,
    apb3pready_quad_int,
    apb3pslverr_quad_int);
  output [31:0]apb3prdata;
  output apb3pslverr;
  output [15:0]Q;
  output [31:0]\di_reg[31]_0 ;
  output apb_user_prdy_r_reg_0;
  output apb3penable_quad_int;
  output apb3pwrite_quad_int;
  output apb3sel_quad_int;
  input [31:0]D;
  input p_0_in;
  input apb3clk;
  input [31:0]apb3pwdata;
  input apb3penable;
  input apb3pwrite;
  input [15:0]apb3paddr;
  input apb3psel;
  input apb3pready_quad_int;
  input apb3pslverr_quad_int;

  wire [31:0]D;
  wire [15:0]Q;
  wire \abp_user_dout_r[31]_i_1_n_0 ;
  wire apb3clk;
  wire [15:0]apb3paddr;
  wire apb3penable;
  wire apb3penable_quad_int;
  wire [31:0]apb3prdata;
  wire apb3pready_quad_int;
  wire apb3psel;
  wire apb3pslverr;
  wire apb3pslverr_quad_int;
  wire [31:0]apb3pwdata;
  wire apb3pwrite;
  wire apb3pwrite_quad_int;
  wire apb3sel_quad_int;
  wire apb_read_from_user__0;
  wire apb_read_from_user_i_1_n_0;
  wire apb_read_from_user_i_2_n_0;
  wire [4:0]apb_state;
  wire \apb_state[0]_i_1_n_0 ;
  wire \apb_state[1]_i_1_n_0 ;
  wire \apb_state[2]_i_1_n_0 ;
  wire \apb_state[3]_i_1_n_0 ;
  wire \apb_state[4]_i_1_n_0 ;
  wire apb_user_prdy_r_i_1_n_0;
  wire apb_user_prdy_r_reg_0;
  wire [4:0]apb_user_state;
  wire \apb_user_state[0]_i_1_n_0 ;
  wire \apb_user_state[1]_i_1_n_0 ;
  wire \apb_user_state[2]_i_1_n_0 ;
  wire \apb_user_state[3]_i_1_n_0 ;
  wire \apb_user_state[4]_i_2_n_0 ;
  wire \apb_user_state_inferred__4/i__n_0 ;
  wire apb_write_from_user;
  wire apb_write_from_user_i_1_n_0;
  wire apb_write_from_user_i_2_n_0;
  wire apb_write_from_user_i_3_n_0;
  wire \count[0]_i_1_n_0 ;
  wire \count[1]_i_1_n_0 ;
  wire \count[2]_i_1_n_0 ;
  wire \count[3]_i_1_n_0 ;
  wire \count[3]_i_2_n_0 ;
  wire \count_reg_n_0_[0] ;
  wire \count_reg_n_0_[1] ;
  wire \count_reg_n_0_[2] ;
  wire \di[31]_i_1_n_0 ;
  wire \di_msk[0]_i_1_n_0 ;
  wire \di_msk[31]_i_1_n_0 ;
  wire \di_msk[31]_i_2_n_0 ;
  wire \di_msk[31]_i_3_n_0 ;
  wire \di_msk[31]_i_4_n_0 ;
  wire \di_msk_reg_n_0_[0] ;
  wire \di_msk_reg_n_0_[10] ;
  wire \di_msk_reg_n_0_[11] ;
  wire \di_msk_reg_n_0_[12] ;
  wire \di_msk_reg_n_0_[13] ;
  wire \di_msk_reg_n_0_[14] ;
  wire \di_msk_reg_n_0_[15] ;
  wire \di_msk_reg_n_0_[16] ;
  wire \di_msk_reg_n_0_[17] ;
  wire \di_msk_reg_n_0_[18] ;
  wire \di_msk_reg_n_0_[19] ;
  wire \di_msk_reg_n_0_[1] ;
  wire \di_msk_reg_n_0_[20] ;
  wire \di_msk_reg_n_0_[21] ;
  wire \di_msk_reg_n_0_[22] ;
  wire \di_msk_reg_n_0_[23] ;
  wire \di_msk_reg_n_0_[24] ;
  wire \di_msk_reg_n_0_[25] ;
  wire \di_msk_reg_n_0_[26] ;
  wire \di_msk_reg_n_0_[27] ;
  wire \di_msk_reg_n_0_[28] ;
  wire \di_msk_reg_n_0_[29] ;
  wire \di_msk_reg_n_0_[2] ;
  wire \di_msk_reg_n_0_[30] ;
  wire \di_msk_reg_n_0_[31] ;
  wire \di_msk_reg_n_0_[3] ;
  wire \di_msk_reg_n_0_[4] ;
  wire \di_msk_reg_n_0_[5] ;
  wire \di_msk_reg_n_0_[6] ;
  wire \di_msk_reg_n_0_[7] ;
  wire \di_msk_reg_n_0_[8] ;
  wire \di_msk_reg_n_0_[9] ;
  wire [31:0]\di_reg[31]_0 ;
  wire \dout_to_user[31]_i_1_n_0 ;
  wire \dout_to_user_reg_n_0_[0] ;
  wire \dout_to_user_reg_n_0_[10] ;
  wire \dout_to_user_reg_n_0_[11] ;
  wire \dout_to_user_reg_n_0_[12] ;
  wire \dout_to_user_reg_n_0_[13] ;
  wire \dout_to_user_reg_n_0_[14] ;
  wire \dout_to_user_reg_n_0_[15] ;
  wire \dout_to_user_reg_n_0_[16] ;
  wire \dout_to_user_reg_n_0_[17] ;
  wire \dout_to_user_reg_n_0_[18] ;
  wire \dout_to_user_reg_n_0_[19] ;
  wire \dout_to_user_reg_n_0_[1] ;
  wire \dout_to_user_reg_n_0_[20] ;
  wire \dout_to_user_reg_n_0_[21] ;
  wire \dout_to_user_reg_n_0_[22] ;
  wire \dout_to_user_reg_n_0_[23] ;
  wire \dout_to_user_reg_n_0_[24] ;
  wire \dout_to_user_reg_n_0_[25] ;
  wire \dout_to_user_reg_n_0_[26] ;
  wire \dout_to_user_reg_n_0_[27] ;
  wire \dout_to_user_reg_n_0_[28] ;
  wire \dout_to_user_reg_n_0_[29] ;
  wire \dout_to_user_reg_n_0_[2] ;
  wire \dout_to_user_reg_n_0_[30] ;
  wire \dout_to_user_reg_n_0_[31] ;
  wire \dout_to_user_reg_n_0_[3] ;
  wire \dout_to_user_reg_n_0_[4] ;
  wire \dout_to_user_reg_n_0_[5] ;
  wire \dout_to_user_reg_n_0_[6] ;
  wire \dout_to_user_reg_n_0_[7] ;
  wire \dout_to_user_reg_n_0_[8] ;
  wire \dout_to_user_reg_n_0_[9] ;
  wire grant_store_i_1_n_0;
  wire grant_store_reg_n_0;
  wire \last_access_to_mem[3]_i_1_n_0 ;
  wire \last_access_to_mem_reg_n_0_[0] ;
  wire \last_access_to_mem_reg_n_0_[1] ;
  wire \last_access_to_mem_reg_n_0_[2] ;
  wire \last_access_to_mem_reg_n_0_[3] ;
  wire p_0_in;
  wire p_0_in0;
  wire p_0_in_0;
  wire [15:0]paddr;
  wire \paddr[15]_i_2_n_0 ;
  wire penable_i_1_n_0;
  wire psel_i_1_n_0;
  wire pslverr_to_user_i_1_n_0;
  wire pslverr_to_user_reg_n_0;
  wire pwrite_i_1_n_0;
  wire rd_i_1_n_0;
  wire rd_reg_n_0;
  wire [12:0]req_grant_state;
  wire \req_grant_state[8]_i_2_n_0 ;
  wire \req_grant_state[8]_i_3_n_0 ;
  wire [12:1]req_grant_state__0;
  wire \req_grant_state_reg_n_0_[10] ;
  wire \req_grant_state_reg_n_0_[3] ;
  wire \req_grant_state_reg_n_0_[4] ;
  wire \req_grant_state_reg_n_0_[5] ;
  wire \req_grant_state_reg_n_0_[6] ;
  wire \req_grant_state_reg_n_0_[7] ;
  wire \req_grant_state_reg_n_0_[8] ;
  wire \req_grant_state_reg_n_0_[9] ;
  wire reset_in_sync;
  wire user_apb;
  wire user_apb_i_1_n_0;
  wire wr_i_1_n_0;
  wire wr_reg_n_0;

  LUT5 #(
    .INIT(32'h00000004)) 
    \abp_user_dout_r[31]_i_1 
       (.I0(apb_user_state[0]),
        .I1(apb_user_state[3]),
        .I2(apb_user_state[2]),
        .I3(apb_user_state[4]),
        .I4(apb_user_state[1]),
        .O(\abp_user_dout_r[31]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[0] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[0] ),
        .Q(apb3prdata[0]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[10] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[10] ),
        .Q(apb3prdata[10]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[11] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[11] ),
        .Q(apb3prdata[11]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[12] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[12] ),
        .Q(apb3prdata[12]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[13] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[13] ),
        .Q(apb3prdata[13]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[14] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[14] ),
        .Q(apb3prdata[14]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[15] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[15] ),
        .Q(apb3prdata[15]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[16] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[16] ),
        .Q(apb3prdata[16]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[17] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[17] ),
        .Q(apb3prdata[17]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[18] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[18] ),
        .Q(apb3prdata[18]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[19] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[19] ),
        .Q(apb3prdata[19]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[1] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[1] ),
        .Q(apb3prdata[1]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[20] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[20] ),
        .Q(apb3prdata[20]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[21] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[21] ),
        .Q(apb3prdata[21]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[22] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[22] ),
        .Q(apb3prdata[22]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[23] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[23] ),
        .Q(apb3prdata[23]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[24] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[24] ),
        .Q(apb3prdata[24]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[25] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[25] ),
        .Q(apb3prdata[25]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[26] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[26] ),
        .Q(apb3prdata[26]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[27] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[27] ),
        .Q(apb3prdata[27]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[28] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[28] ),
        .Q(apb3prdata[28]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[29] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[29] ),
        .Q(apb3prdata[29]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[2] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[2] ),
        .Q(apb3prdata[2]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[30] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[30] ),
        .Q(apb3prdata[30]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[31] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[31] ),
        .Q(apb3prdata[31]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[3] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[3] ),
        .Q(apb3prdata[3]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[4] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[4] ),
        .Q(apb3prdata[4]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[5] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[5] ),
        .Q(apb3prdata[5]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[6] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[6] ),
        .Q(apb3prdata[6]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[7] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[7] ),
        .Q(apb3prdata[7]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[8] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[8] ),
        .Q(apb3prdata[8]));
  FDCE #(
    .INIT(1'b0)) 
    \abp_user_dout_r_reg[9] 
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\dout_to_user_reg_n_0_[9] ),
        .Q(apb3prdata[9]));
  LUT6 #(
    .INIT(64'hFFEFEFFF004040C0)) 
    apb_read_from_user_i_1
       (.I0(apb_user_state[1]),
        .I1(apb_read_from_user_i_2_n_0),
        .I2(apb_write_from_user_i_3_n_0),
        .I3(apb_user_state[4]),
        .I4(apb_user_state[0]),
        .I5(apb_read_from_user__0),
        .O(apb_read_from_user_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h08)) 
    apb_read_from_user_i_2
       (.I0(apb3penable),
        .I1(apb_user_state[1]),
        .I2(apb3pwrite),
        .O(apb_read_from_user_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    apb_read_from_user_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(apb_read_from_user_i_1_n_0),
        .Q(apb_read_from_user__0));
  LUT4 #(
    .INIT(16'hFF10)) 
    \apb_state[0]_i_1 
       (.I0(rd_reg_n_0),
        .I1(wr_reg_n_0),
        .I2(apb_state[0]),
        .I3(apb_state[4]),
        .O(\apb_state[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \apb_state[1]_i_1 
       (.I0(wr_reg_n_0),
        .I1(rd_reg_n_0),
        .I2(apb_state[0]),
        .O(\apb_state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hF4F4F444)) 
    \apb_state[2]_i_1 
       (.I0(apb3pready_quad_int),
        .I1(apb_state[2]),
        .I2(apb_state[1]),
        .I3(rd_reg_n_0),
        .I4(wr_reg_n_0),
        .O(\apb_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \apb_state[3]_i_1 
       (.I0(p_0_in_0),
        .I1(apb_state[3]),
        .I2(apb3pready_quad_int),
        .I3(apb_state[2]),
        .O(\apb_state[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \apb_state[4]_i_1 
       (.I0(p_0_in_0),
        .I1(apb_state[3]),
        .O(\apb_state[4]_i_1_n_0 ));
  FDPE #(
    .INIT(1'b1)) 
    \apb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\apb_state[0]_i_1_n_0 ),
        .PRE(reset_in_sync),
        .Q(apb_state[0]));
  FDCE #(
    .INIT(1'b0)) 
    \apb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(\apb_state[1]_i_1_n_0 ),
        .Q(apb_state[1]));
  FDCE #(
    .INIT(1'b0)) 
    \apb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(\apb_state[2]_i_1_n_0 ),
        .Q(apb_state[2]));
  FDCE #(
    .INIT(1'b0)) 
    \apb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(\apb_state[3]_i_1_n_0 ),
        .Q(apb_state[3]));
  FDCE #(
    .INIT(1'b0)) 
    \apb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(\apb_state[4]_i_1_n_0 ),
        .Q(apb_state[4]));
  LUT6 #(
    .INIT(64'hFFFFFEEF00000004)) 
    apb_user_prdy_r_i_1
       (.I0(apb_user_state[2]),
        .I1(apb_user_state[3]),
        .I2(apb_user_state[0]),
        .I3(apb_user_state[4]),
        .I4(apb_user_state[1]),
        .I5(apb_user_prdy_r_reg_0),
        .O(apb_user_prdy_r_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    apb_user_prdy_r_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(apb_user_prdy_r_i_1_n_0),
        .Q(apb_user_prdy_r_reg_0));
  FDCE #(
    .INIT(1'b0)) 
    apb_user_pslverr_r_reg
       (.C(apb3clk),
        .CE(\abp_user_dout_r[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(pslverr_to_user_reg_n_0),
        .Q(apb3pslverr));
  LUT6 #(
    .INIT(64'h33220000FFF20000)) 
    \apb_user_state[0]_i_1 
       (.I0(apb_user_state[1]),
        .I1(apb3penable),
        .I2(apb_user_state[0]),
        .I3(apb_user_state[4]),
        .I4(\apb_user_state_inferred__4/i__n_0 ),
        .I5(apb3psel),
        .O(\apb_user_state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \apb_user_state[1]_i_1 
       (.I0(apb3psel),
        .I1(apb_user_state[0]),
        .I2(\apb_user_state_inferred__4/i__n_0 ),
        .O(\apb_user_state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'hF0202020)) 
    \apb_user_state[2]_i_1 
       (.I0(apb_user_state[2]),
        .I1(req_grant_state[12]),
        .I2(\apb_user_state_inferred__4/i__n_0 ),
        .I3(apb_user_state[1]),
        .I4(apb3penable),
        .O(\apb_user_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \apb_user_state[3]_i_1 
       (.I0(apb_user_state[2]),
        .I1(req_grant_state[12]),
        .I2(\apb_user_state_inferred__4/i__n_0 ),
        .O(\apb_user_state[3]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \apb_user_state[4]_i_1 
       (.I0(reset_in_sync),
        .O(p_0_in0));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'hEA00AA00)) 
    \apb_user_state[4]_i_2 
       (.I0(apb_user_state[3]),
        .I1(apb3penable),
        .I2(apb3psel),
        .I3(\apb_user_state_inferred__4/i__n_0 ),
        .I4(apb_user_state[4]),
        .O(\apb_user_state[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \apb_user_state_inferred__4/i_ 
       (.I0(apb_user_state[0]),
        .I1(apb_user_state[1]),
        .I2(apb_user_state[2]),
        .I3(apb_user_state[3]),
        .I4(apb_user_state[4]),
        .O(\apb_user_state_inferred__4/i__n_0 ));
  FDPE #(
    .INIT(1'b1)) 
    \apb_user_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\apb_user_state[0]_i_1_n_0 ),
        .PRE(reset_in_sync),
        .Q(apb_user_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \apb_user_state_reg[1] 
       (.C(apb3clk),
        .CE(p_0_in0),
        .D(\apb_user_state[1]_i_1_n_0 ),
        .Q(apb_user_state[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \apb_user_state_reg[2] 
       (.C(apb3clk),
        .CE(p_0_in0),
        .D(\apb_user_state[2]_i_1_n_0 ),
        .Q(apb_user_state[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \apb_user_state_reg[3] 
       (.C(apb3clk),
        .CE(p_0_in0),
        .D(\apb_user_state[3]_i_1_n_0 ),
        .Q(apb_user_state[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \apb_user_state_reg[4] 
       (.C(apb3clk),
        .CE(p_0_in0),
        .D(\apb_user_state[4]_i_2_n_0 ),
        .Q(apb_user_state[4]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFEFEFFF004040C0)) 
    apb_write_from_user_i_1
       (.I0(apb_user_state[1]),
        .I1(apb_write_from_user_i_2_n_0),
        .I2(apb_write_from_user_i_3_n_0),
        .I3(apb_user_state[4]),
        .I4(apb_user_state[0]),
        .I5(apb_write_from_user),
        .O(apb_write_from_user_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h80)) 
    apb_write_from_user_i_2
       (.I0(apb3penable),
        .I1(apb_user_state[1]),
        .I2(apb3pwrite),
        .O(apb_write_from_user_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h1)) 
    apb_write_from_user_i_3
       (.I0(apb_user_state[2]),
        .I1(apb_user_state[3]),
        .O(apb_write_from_user_i_3_n_0));
  FDCE #(
    .INIT(1'b0)) 
    apb_write_from_user_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(apb_write_from_user_i_1_n_0),
        .Q(apb_write_from_user));
  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(apb_state[3]),
        .O(\count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \count[1]_i_1 
       (.I0(\count_reg_n_0_[0] ),
        .I1(apb_state[3]),
        .O(\count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \count[2]_i_1 
       (.I0(\count_reg_n_0_[1] ),
        .I1(apb_state[3]),
        .O(\count[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF4)) 
    \count[3]_i_1 
       (.I0(p_0_in_0),
        .I1(apb_state[3]),
        .I2(apb_state[2]),
        .O(\count[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \count[3]_i_2 
       (.I0(\count_reg_n_0_[2] ),
        .I1(apb_state[3]),
        .O(\count[3]_i_2_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(apb3clk),
        .CE(\count[3]_i_1_n_0 ),
        .D(\count[0]_i_1_n_0 ),
        .PRE(reset_in_sync),
        .Q(\count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(apb3clk),
        .CE(\count[3]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\count[1]_i_1_n_0 ),
        .Q(\count_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(apb3clk),
        .CE(\count[3]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\count[2]_i_1_n_0 ),
        .Q(\count_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(apb3clk),
        .CE(\count[3]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\count[3]_i_2_n_0 ),
        .Q(p_0_in_0));
  LUT3 #(
    .INIT(8'h40)) 
    \di[31]_i_1 
       (.I0(rd_reg_n_0),
        .I1(wr_reg_n_0),
        .I2(apb_state[1]),
        .O(\di[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF8FFF800)) 
    \di_msk[0]_i_1 
       (.I0(apb3pwdata[0]),
        .I1(\di_msk[31]_i_4_n_0 ),
        .I2(req_grant_state[2]),
        .I3(\di_msk[31]_i_2_n_0 ),
        .I4(\di_msk_reg_n_0_[0] ),
        .O(\di_msk[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000F4)) 
    \di_msk[31]_i_1 
       (.I0(req_grant_state[12]),
        .I1(\di_msk[31]_i_3_n_0 ),
        .I2(req_grant_state[2]),
        .I3(reset_in_sync),
        .I4(req_grant_state[1]),
        .I5(\di_msk[31]_i_4_n_0 ),
        .O(\di_msk[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1110111010101110)) 
    \di_msk[31]_i_2 
       (.I0(req_grant_state[1]),
        .I1(reset_in_sync),
        .I2(req_grant_state[2]),
        .I3(\di_msk[31]_i_3_n_0 ),
        .I4(req_grant_state[12]),
        .I5(\di_msk[31]_i_4_n_0 ),
        .O(\di_msk[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \di_msk[31]_i_3 
       (.I0(\req_grant_state_reg_n_0_[6] ),
        .I1(\req_grant_state_reg_n_0_[4] ),
        .I2(\req_grant_state_reg_n_0_[5] ),
        .I3(\req_grant_state_reg_n_0_[3] ),
        .O(\di_msk[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \di_msk[31]_i_4 
       (.I0(\req_grant_state_reg_n_0_[8] ),
        .I1(\req_grant_state_reg_n_0_[7] ),
        .I2(\req_grant_state_reg_n_0_[10] ),
        .I3(\req_grant_state_reg_n_0_[9] ),
        .O(\di_msk[31]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\di_msk[0]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[10] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[10]),
        .Q(\di_msk_reg_n_0_[10] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[11] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[11]),
        .Q(\di_msk_reg_n_0_[11] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[12] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[12]),
        .Q(\di_msk_reg_n_0_[12] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[13] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[13]),
        .Q(\di_msk_reg_n_0_[13] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[14] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[14]),
        .Q(\di_msk_reg_n_0_[14] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[15] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[15]),
        .Q(\di_msk_reg_n_0_[15] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[16] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[16]),
        .Q(\di_msk_reg_n_0_[16] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[17] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[17]),
        .Q(\di_msk_reg_n_0_[17] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[18] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[18]),
        .Q(\di_msk_reg_n_0_[18] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[19] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[19]),
        .Q(\di_msk_reg_n_0_[19] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[1] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[1]),
        .Q(\di_msk_reg_n_0_[1] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[20] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[20]),
        .Q(\di_msk_reg_n_0_[20] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[21] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[21]),
        .Q(\di_msk_reg_n_0_[21] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[22] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[22]),
        .Q(\di_msk_reg_n_0_[22] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[23] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[23]),
        .Q(\di_msk_reg_n_0_[23] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[24] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[24]),
        .Q(\di_msk_reg_n_0_[24] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[25] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[25]),
        .Q(\di_msk_reg_n_0_[25] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[26] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[26]),
        .Q(\di_msk_reg_n_0_[26] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[27] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[27]),
        .Q(\di_msk_reg_n_0_[27] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[28] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[28]),
        .Q(\di_msk_reg_n_0_[28] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[29] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[29]),
        .Q(\di_msk_reg_n_0_[29] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[2] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[2]),
        .Q(\di_msk_reg_n_0_[2] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[30] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[30]),
        .Q(\di_msk_reg_n_0_[30] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[31] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[31]),
        .Q(\di_msk_reg_n_0_[31] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[3] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[3]),
        .Q(\di_msk_reg_n_0_[3] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[4] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[4]),
        .Q(\di_msk_reg_n_0_[4] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[5] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[5]),
        .Q(\di_msk_reg_n_0_[5] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[6] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[6]),
        .Q(\di_msk_reg_n_0_[6] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[7] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[7]),
        .Q(\di_msk_reg_n_0_[7] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[8] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[8]),
        .Q(\di_msk_reg_n_0_[8] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_msk_reg[9] 
       (.C(apb3clk),
        .CE(\di_msk[31]_i_2_n_0 ),
        .D(apb3pwdata[9]),
        .Q(\di_msk_reg_n_0_[9] ),
        .R(\di_msk[31]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[0] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[0] ),
        .Q(\di_reg[31]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[10] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[10] ),
        .Q(\di_reg[31]_0 [10]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[11] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[11] ),
        .Q(\di_reg[31]_0 [11]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[12] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[12] ),
        .Q(\di_reg[31]_0 [12]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[13] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[13] ),
        .Q(\di_reg[31]_0 [13]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[14] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[14] ),
        .Q(\di_reg[31]_0 [14]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[15] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[15] ),
        .Q(\di_reg[31]_0 [15]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[16] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[16] ),
        .Q(\di_reg[31]_0 [16]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[17] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[17] ),
        .Q(\di_reg[31]_0 [17]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[18] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[18] ),
        .Q(\di_reg[31]_0 [18]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[19] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[19] ),
        .Q(\di_reg[31]_0 [19]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[1] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[1] ),
        .Q(\di_reg[31]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[20] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[20] ),
        .Q(\di_reg[31]_0 [20]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[21] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[21] ),
        .Q(\di_reg[31]_0 [21]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[22] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[22] ),
        .Q(\di_reg[31]_0 [22]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[23] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[23] ),
        .Q(\di_reg[31]_0 [23]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[24] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[24] ),
        .Q(\di_reg[31]_0 [24]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[25] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[25] ),
        .Q(\di_reg[31]_0 [25]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[26] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[26] ),
        .Q(\di_reg[31]_0 [26]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[27] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[27] ),
        .Q(\di_reg[31]_0 [27]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[28] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[28] ),
        .Q(\di_reg[31]_0 [28]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[29] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[29] ),
        .Q(\di_reg[31]_0 [29]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[2] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[2] ),
        .Q(\di_reg[31]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[30] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[30] ),
        .Q(\di_reg[31]_0 [30]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[31] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[31] ),
        .Q(\di_reg[31]_0 [31]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[3] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[3] ),
        .Q(\di_reg[31]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[4] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[4] ),
        .Q(\di_reg[31]_0 [4]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[5] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[5] ),
        .Q(\di_reg[31]_0 [5]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[6] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[6] ),
        .Q(\di_reg[31]_0 [6]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[7] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[7] ),
        .Q(\di_reg[31]_0 [7]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[8] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[8] ),
        .Q(\di_reg[31]_0 [8]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[9] 
       (.C(apb3clk),
        .CE(\di[31]_i_1_n_0 ),
        .CLR(reset_in_sync),
        .D(\di_msk_reg_n_0_[9] ),
        .Q(\di_reg[31]_0 [9]));
  LUT4 #(
    .INIT(16'h4440)) 
    \dout_to_user[31]_i_1 
       (.I0(reset_in_sync),
        .I1(apb_state[4]),
        .I2(\req_grant_state_reg_n_0_[10] ),
        .I3(\req_grant_state_reg_n_0_[9] ),
        .O(\dout_to_user[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[0] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[0]),
        .Q(\dout_to_user_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[10] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[10]),
        .Q(\dout_to_user_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[11] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[11]),
        .Q(\dout_to_user_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[12] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[12]),
        .Q(\dout_to_user_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[13] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[13]),
        .Q(\dout_to_user_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[14] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[14]),
        .Q(\dout_to_user_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[15] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[15]),
        .Q(\dout_to_user_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[16] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[16]),
        .Q(\dout_to_user_reg_n_0_[16] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[17] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[17]),
        .Q(\dout_to_user_reg_n_0_[17] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[18] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[18]),
        .Q(\dout_to_user_reg_n_0_[18] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[19] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[19]),
        .Q(\dout_to_user_reg_n_0_[19] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[1] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[1]),
        .Q(\dout_to_user_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[20] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[20]),
        .Q(\dout_to_user_reg_n_0_[20] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[21] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[21]),
        .Q(\dout_to_user_reg_n_0_[21] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[22] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[22]),
        .Q(\dout_to_user_reg_n_0_[22] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[23] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[23]),
        .Q(\dout_to_user_reg_n_0_[23] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[24] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[24]),
        .Q(\dout_to_user_reg_n_0_[24] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[25] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[25]),
        .Q(\dout_to_user_reg_n_0_[25] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[26] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[26]),
        .Q(\dout_to_user_reg_n_0_[26] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[27] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[27]),
        .Q(\dout_to_user_reg_n_0_[27] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[28] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[28]),
        .Q(\dout_to_user_reg_n_0_[28] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[29] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[29]),
        .Q(\dout_to_user_reg_n_0_[29] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[2] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[2]),
        .Q(\dout_to_user_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[30] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[30]),
        .Q(\dout_to_user_reg_n_0_[30] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[31] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[31]),
        .Q(\dout_to_user_reg_n_0_[31] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[3] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[3]),
        .Q(\dout_to_user_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[4] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[4]),
        .Q(\dout_to_user_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[5] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[5]),
        .Q(\dout_to_user_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[6] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[6]),
        .Q(\dout_to_user_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[7] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[7]),
        .Q(\dout_to_user_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[8] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[8]),
        .Q(\dout_to_user_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_to_user_reg[9] 
       (.C(apb3clk),
        .CE(\dout_to_user[31]_i_1_n_0 ),
        .D(D[9]),
        .Q(\dout_to_user_reg_n_0_[9] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'hF780)) 
    grant_store_i_1
       (.I0(\req_grant_state_reg_n_0_[3] ),
        .I1(apb_state[4]),
        .I2(D[2]),
        .I3(grant_store_reg_n_0),
        .O(grant_store_i_1_n_0));
  FDCE grant_store_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(grant_store_i_1_n_0),
        .Q(grant_store_reg_n_0));
  LUT3 #(
    .INIT(8'h08)) 
    \last_access_to_mem[3]_i_1 
       (.I0(\req_grant_state_reg_n_0_[5] ),
        .I1(apb_state[4]),
        .I2(reset_in_sync),
        .O(\last_access_to_mem[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \last_access_to_mem_reg[0] 
       (.C(apb3clk),
        .CE(\last_access_to_mem[3]_i_1_n_0 ),
        .D(D[0]),
        .Q(\last_access_to_mem_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \last_access_to_mem_reg[1] 
       (.C(apb3clk),
        .CE(\last_access_to_mem[3]_i_1_n_0 ),
        .D(D[1]),
        .Q(\last_access_to_mem_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \last_access_to_mem_reg[2] 
       (.C(apb3clk),
        .CE(\last_access_to_mem[3]_i_1_n_0 ),
        .D(D[2]),
        .Q(\last_access_to_mem_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \last_access_to_mem_reg[3] 
       (.C(apb3clk),
        .CE(\last_access_to_mem[3]_i_1_n_0 ),
        .D(D[3]),
        .Q(\last_access_to_mem_reg_n_0_[3] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'hEEFFEEFE)) 
    \paddr[0]_i_1 
       (.I0(req_grant_state[2]),
        .I1(req_grant_state[11]),
        .I2(\req_grant_state_reg_n_0_[5] ),
        .I3(\req_grant_state_reg_n_0_[3] ),
        .I4(apb3paddr[0]),
        .O(paddr[0]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[10]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[10]),
        .O(paddr[10]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[11]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[11]),
        .O(paddr[11]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[12]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[12]),
        .O(paddr[12]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \paddr[13]_i_1 
       (.I0(apb3paddr[13]),
        .I1(\paddr[15]_i_2_n_0 ),
        .I2(req_grant_state[2]),
        .I3(req_grant_state[11]),
        .O(paddr[13]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[14]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[14]),
        .O(paddr[14]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \paddr[15]_i_1 
       (.I0(apb3paddr[15]),
        .I1(\paddr[15]_i_2_n_0 ),
        .I2(req_grant_state[2]),
        .I3(req_grant_state[11]),
        .O(paddr[15]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \paddr[15]_i_2 
       (.I0(\req_grant_state_reg_n_0_[3] ),
        .I1(\req_grant_state_reg_n_0_[5] ),
        .O(\paddr[15]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0302)) 
    \paddr[1]_i_1 
       (.I0(apb3paddr[1]),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(\paddr[15]_i_2_n_0 ),
        .O(paddr[1]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[2]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[2]),
        .O(paddr[2]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[3]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[3]),
        .O(paddr[3]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[4]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[4]),
        .O(paddr[4]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[5]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[5]),
        .O(paddr[5]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[6]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[6]),
        .O(paddr[6]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[7]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[7]),
        .O(paddr[7]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[8]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[8]),
        .O(paddr[8]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \paddr[9]_i_1 
       (.I0(\paddr[15]_i_2_n_0 ),
        .I1(req_grant_state[2]),
        .I2(req_grant_state[11]),
        .I3(apb3paddr[9]),
        .O(paddr[9]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[0]),
        .Q(Q[0]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[10]),
        .Q(Q[10]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[11] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[11]),
        .Q(Q[11]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[12] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[12]),
        .Q(Q[12]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[13] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[13]),
        .Q(Q[13]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[14] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[14]),
        .Q(Q[14]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[15] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[15]),
        .Q(Q[15]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[1]),
        .Q(Q[1]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[2]),
        .Q(Q[2]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[3]),
        .Q(Q[3]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[4]),
        .Q(Q[4]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[5]),
        .Q(Q[5]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[6]),
        .Q(Q[6]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[7]),
        .Q(Q[7]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[8]),
        .Q(Q[8]),
        .R(req_grant_state[0]));
  FDRE #(
    .INIT(1'b0)) 
    \paddr_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(paddr[9]),
        .Q(Q[9]),
        .R(req_grant_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    penable_i_1
       (.I0(apb3penable_quad_int),
        .I1(apb_state[1]),
        .I2(apb_state[2]),
        .O(penable_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    penable_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(penable_i_1_n_0),
        .Q(apb3penable_quad_int));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    psel_i_1
       (.I0(apb_state[1]),
        .I1(apb_state[2]),
        .I2(apb3sel_quad_int),
        .O(psel_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    psel_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(psel_i_1_n_0),
        .Q(apb3sel_quad_int));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hABFFA800)) 
    pslverr_to_user_i_1
       (.I0(apb3pslverr_quad_int),
        .I1(\req_grant_state_reg_n_0_[10] ),
        .I2(\req_grant_state_reg_n_0_[9] ),
        .I3(apb_state[4]),
        .I4(pslverr_to_user_reg_n_0),
        .O(pslverr_to_user_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    pslverr_to_user_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(pslverr_to_user_i_1_n_0),
        .Q(pslverr_to_user_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hEEEE0020)) 
    pwrite_i_1
       (.I0(apb_state[1]),
        .I1(apb_state[2]),
        .I2(wr_reg_n_0),
        .I3(rd_reg_n_0),
        .I4(apb3pwrite_quad_int),
        .O(pwrite_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    pwrite_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(pwrite_i_1_n_0),
        .Q(apb3pwrite_quad_int));
  LUT6 #(
    .INIT(64'h0505050705050504)) 
    rd_i_1
       (.I0(apb_state[4]),
        .I1(\paddr[15]_i_2_n_0 ),
        .I2(\req_grant_state_reg_n_0_[4] ),
        .I3(\req_grant_state_reg_n_0_[9] ),
        .I4(\req_grant_state_reg_n_0_[7] ),
        .I5(rd_reg_n_0),
        .O(rd_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    rd_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(rd_i_1_n_0),
        .Q(rd_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h08FF0808)) 
    \req_grant_state[10]_i_1 
       (.I0(apb_write_from_user),
        .I1(\req_grant_state_reg_n_0_[8] ),
        .I2(apb_read_from_user__0),
        .I3(apb_state[4]),
        .I4(\req_grant_state_reg_n_0_[10] ),
        .O(req_grant_state__0[10]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \req_grant_state[11]_i_1 
       (.I0(\req_grant_state_reg_n_0_[9] ),
        .I1(\req_grant_state_reg_n_0_[10] ),
        .I2(apb_state[4]),
        .I3(req_grant_state[11]),
        .O(req_grant_state__0[11]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'h8F88)) 
    \req_grant_state[12]_i_1 
       (.I0(req_grant_state[11]),
        .I1(apb_state[4]),
        .I2(apb_user_prdy_r_reg_0),
        .I3(req_grant_state[12]),
        .O(req_grant_state__0[12]));
  LUT5 #(
    .INIT(32'hFFAEAEAE)) 
    \req_grant_state[1]_i_1 
       (.I0(req_grant_state[0]),
        .I1(req_grant_state[1]),
        .I2(user_apb),
        .I3(req_grant_state[12]),
        .I4(apb_user_prdy_r_reg_0),
        .O(req_grant_state__0[1]));
  LUT4 #(
    .INIT(16'hF444)) 
    \req_grant_state[2]_i_1 
       (.I0(apb_state[4]),
        .I1(req_grant_state[2]),
        .I2(user_apb),
        .I3(req_grant_state[1]),
        .O(req_grant_state__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'hFF22F2F2)) 
    \req_grant_state[3]_i_1 
       (.I0(\req_grant_state_reg_n_0_[4] ),
        .I1(grant_store_reg_n_0),
        .I2(\req_grant_state_reg_n_0_[3] ),
        .I3(req_grant_state[2]),
        .I4(apb_state[4]),
        .O(req_grant_state__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \req_grant_state[4]_i_1 
       (.I0(\req_grant_state_reg_n_0_[3] ),
        .I1(apb_state[4]),
        .O(req_grant_state__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \req_grant_state[5]_i_1 
       (.I0(apb_state[4]),
        .I1(\req_grant_state_reg_n_0_[5] ),
        .I2(grant_store_reg_n_0),
        .I3(\req_grant_state_reg_n_0_[4] ),
        .O(req_grant_state__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \req_grant_state[6]_i_1 
       (.I0(\req_grant_state_reg_n_0_[5] ),
        .I1(apb_state[4]),
        .O(req_grant_state__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h8F88)) 
    \req_grant_state[7]_i_1 
       (.I0(\req_grant_state_reg_n_0_[6] ),
        .I1(\req_grant_state[8]_i_2_n_0 ),
        .I2(apb_state[4]),
        .I3(\req_grant_state_reg_n_0_[7] ),
        .O(req_grant_state__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    \req_grant_state[8]_i_1 
       (.I0(\req_grant_state[8]_i_2_n_0 ),
        .I1(\req_grant_state_reg_n_0_[6] ),
        .I2(\req_grant_state[8]_i_3_n_0 ),
        .O(req_grant_state__0[8]));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \req_grant_state[8]_i_2 
       (.I0(\last_access_to_mem_reg_n_0_[1] ),
        .I1(\last_access_to_mem_reg_n_0_[0] ),
        .I2(\last_access_to_mem_reg_n_0_[2] ),
        .I3(\last_access_to_mem_reg_n_0_[3] ),
        .O(\req_grant_state[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h88888F88)) 
    \req_grant_state[8]_i_3 
       (.I0(\req_grant_state_reg_n_0_[7] ),
        .I1(apb_state[4]),
        .I2(apb_write_from_user),
        .I3(\req_grant_state_reg_n_0_[8] ),
        .I4(apb_read_from_user__0),
        .O(\req_grant_state[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h8F88)) 
    \req_grant_state[9]_i_1 
       (.I0(\req_grant_state_reg_n_0_[8] ),
        .I1(apb_read_from_user__0),
        .I2(apb_state[4]),
        .I3(\req_grant_state_reg_n_0_[9] ),
        .O(req_grant_state__0[9]));
  FDPE #(
    .INIT(1'b1)) 
    \req_grant_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset_in_sync),
        .Q(req_grant_state[0]));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[10]),
        .Q(\req_grant_state_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[11] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[11]),
        .Q(req_grant_state[11]));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[12] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[12]),
        .Q(req_grant_state[12]));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[1]),
        .Q(req_grant_state[1]));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[2]),
        .Q(req_grant_state[2]));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[3]),
        .Q(\req_grant_state_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[4]),
        .Q(\req_grant_state_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[5]),
        .Q(\req_grant_state_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[6]),
        .Q(\req_grant_state_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[7]),
        .Q(\req_grant_state_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[8]),
        .Q(\req_grant_state_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \req_grant_state_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(req_grant_state__0[9]),
        .Q(\req_grant_state_reg_n_0_[9] ));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_async_rst reset_xpm_internal_sync
       (.dest_arst(reset_in_sync),
        .dest_clk(apb3clk),
        .src_arst(p_0_in));
  LUT6 #(
    .INIT(64'hFFFFFEEF00000002)) 
    user_apb_i_1
       (.I0(apb_user_state[2]),
        .I1(apb_user_state[3]),
        .I2(apb_user_state[0]),
        .I3(apb_user_state[4]),
        .I4(apb_user_state[1]),
        .I5(user_apb),
        .O(user_apb_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    user_apb_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(user_apb_i_1_n_0),
        .Q(user_apb));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h55575554)) 
    wr_i_1
       (.I0(apb_state[4]),
        .I1(req_grant_state[11]),
        .I2(req_grant_state[2]),
        .I3(\req_grant_state_reg_n_0_[10] ),
        .I4(wr_reg_n_0),
        .O(wr_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    wr_reg
       (.C(apb3clk),
        .CE(1'b1),
        .CLR(reset_in_sync),
        .D(wr_i_1_n_0),
        .Q(wr_reg_n_0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone
   (ch3_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch3_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch3_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__1
   (ch0_txpmaresetdone,
    src_in,
    apb3clk);
  output ch0_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__32 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__10
   (ch1_txresetdone,
    src_in,
    apb3clk);
  output ch1_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__41 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__11
   (ch2_txresetdone,
    src_in,
    apb3clk);
  output ch2_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__42 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__12
   (ch3_txresetdone,
    src_in,
    apb3clk);
  output ch3_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__43 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__13
   (ch0_rxresetdone,
    src_in,
    apb3clk);
  output ch0_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__44 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__14
   (ch1_rxresetdone,
    src_in,
    apb3clk);
  output ch1_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__45 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__15
   (ch2_rxresetdone,
    src_in,
    apb3clk);
  output ch2_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__46 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__16
   (ch3_rxresetdone,
    src_in,
    apb3clk);
  output ch3_rxresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_rxresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_rxresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__47 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__17
   (ch0_txmstresetdone,
    src_in,
    apb3clk);
  output ch0_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__48 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__18
   (ch1_txmstresetdone,
    src_in,
    apb3clk);
  output ch1_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__49 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__19
   (ch2_txmstresetdone,
    src_in,
    apb3clk);
  output ch2_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__50 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__2
   (ch1_txpmaresetdone,
    src_in,
    apb3clk);
  output ch1_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__33 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__20
   (ch3_txmstresetdone,
    src_in,
    apb3clk);
  output ch3_txmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_txmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_txmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__51 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__21
   (ch0_rxmstresetdone,
    src_in,
    apb3clk);
  output ch0_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__52 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__22
   (ch1_rxmstresetdone,
    src_in,
    apb3clk);
  output ch1_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__53 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__23
   (ch2_rxmstresetdone,
    src_in,
    apb3clk);
  output ch2_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__54 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__24
   (ch3_rxmstresetdone,
    src_in,
    apb3clk);
  output ch3_rxmstresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_rxmstresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_rxmstresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__55 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__25
   (ch0_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch0_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch0_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__56 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__26
   (ch1_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch1_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch1_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__57 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__27
   (ch2_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch2_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch2_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__58 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__28
   (ch3_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch3_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch3_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__59 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__29
   (ch0_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch0_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch0_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__60 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__3
   (ch2_txpmaresetdone,
    src_in,
    apb3clk);
  output ch2_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__34 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__30
   (ch1_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch1_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch1_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__61 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__31
   (ch2_pcsrsvdout,
    src_in,
    apb3clk);
  output [0:0]ch2_pcsrsvdout;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [0:0]ch2_pcsrsvdout;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_pcsrsvdout),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__62 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__4
   (ch3_txpmaresetdone,
    src_in,
    apb3clk);
  output ch3_txpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_txpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_txpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__35 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__5
   (ch0_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch0_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__36 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__6
   (ch1_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch1_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch1_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch1_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__37 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__7
   (ch2_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch2_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch2_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch2_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__38 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__8
   (ch3_rxpmaresetdone,
    src_in,
    apb3clk);
  output ch3_rxpmaresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch3_rxpmaresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch3_rxpmaresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__39 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_gtye5_rstdone" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__9
   (ch0_txresetdone,
    src_in,
    apb3clk);
  output ch0_txresetdone;
  input src_in;
  input apb3clk;

  wire apb3clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire ch0_txresetdone;
  wire rstdone_cdc_sync;
  wire rstdone_out_reg0_n_0;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg4;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg5;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire rstdone_stg6;
  wire src_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_out_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_out_reg0_n_0),
        .Q(ch0_txresetdone),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h80)) 
    rstdone_out_reg0
       (.I0(rstdone_stg4),
        .I1(rstdone_stg5),
        .I2(rstdone_stg6),
        .O(rstdone_out_reg0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg4_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_cdc_sync),
        .Q(rstdone_stg4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg5_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg4),
        .Q(rstdone_stg5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rstdone_stg6_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rstdone_stg5),
        .Q(rstdone_stg6),
        .R(1'b0));
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__40 u_rstdone_sync
       (.dest_clk(apb3clk),
        .dest_out(rstdone_cdc_sync),
        .src_clk(1'b0),
        .src_in(src_in));
endmodule

(* A_CFG0 = "1856" *) (* A_CFG1 = "1309822482" *) (* A_CFG2 = "1610612736" *) 
(* A_CFG3 = "-536870912" *) (* A_CFG4 = "1610612736" *) (* A_CFG5 = "-536870912" *) 
(* CH0_ADAPT_APT_CFG = "0" *) (* CH0_ADAPT_CAL_CFG = "-2115083264" *) (* CH0_ADAPT_DFE_CFG = "64" *) 
(* CH0_ADAPT_GC_CFG0 = "9441392" *) (* CH0_ADAPT_GC_CFG1 = "178259936" *) (* CH0_ADAPT_GC_CFG2 = "2097384" *) 
(* CH0_ADAPT_GC_CFG3 = "178258912" *) (* CH0_ADAPT_GEN_CFG0 = "3276800" *) (* CH0_ADAPT_GEN_CFG1 = "0" *) 
(* CH0_ADAPT_GEN_CFG2 = "-2013265921" *) (* CH0_ADAPT_GEN_CFG3 = "268435456" *) (* CH0_ADAPT_H01_CFG = "18875040" *) 
(* CH0_ADAPT_H23_CFG = "27263392" *) (* CH0_ADAPT_H45_CFG = "27263392" *) (* CH0_ADAPT_H67_CFG = "27263392" *) 
(* CH0_ADAPT_H89_CFG = "27263392" *) (* CH0_ADAPT_HAB_CFG = "27263392" *) (* CH0_ADAPT_HCD_CFG = "27263392" *) 
(* CH0_ADAPT_HEF_CFG = "27263904" *) (* CH0_ADAPT_KH_CFG0 = "537427519" *) (* CH0_ADAPT_KH_CFG1 = "0" *) 
(* CH0_ADAPT_KH_CFG2 = "17312" *) (* CH0_ADAPT_KH_CFG3 = "0" *) (* CH0_ADAPT_KH_CFG4 = "31648" *) 
(* CH0_ADAPT_KH_CFG5 = "0" *) (* CH0_ADAPT_KL_CFG0 = "32288" *) (* CH0_ADAPT_KL_CFG1 = "17312" *) 
(* CH0_ADAPT_LCK_CFG0 = "16384" *) (* CH0_ADAPT_LCK_CFG1 = "16384" *) (* CH0_ADAPT_LCK_CFG2 = "0" *) 
(* CH0_ADAPT_LCK_CFG3 = "0" *) (* CH0_ADAPT_LOP_CFG = "-301988256" *) (* CH0_ADAPT_OS_CFG = "-2147483360" *) 
(* CH0_CHCLK_ILO_CFG = "6553651" *) (* CH0_CHCLK_MISC_CFG = "-125706465" *) (* CH0_CHCLK_RSV_CFG = "0" *) 
(* CH0_CHCLK_RXCAL_CFG = "138166272" *) (* CH0_CHCLK_RXCAL_CFG1 = "0" *) (* CH0_CHCLK_RXCAL_CFG2 = "0" *) 
(* CH0_CHCLK_RXPI_CFG = "5244940" *) (* CH0_CHCLK_TXCAL_CFG = "4194336" *) (* CH0_CHCLK_TXPI_CFG0 = "4655119" *) 
(* CH0_CHL_RSV_CFG0 = "-1073741815" *) (* CH0_CHL_RSV_CFG1 = "0" *) (* CH0_CHL_RSV_CFG2 = "0" *) 
(* CH0_CHL_RSV_CFG3 = "0" *) (* CH0_CHL_RSV_CFG4 = "0" *) (* CH0_DA_CFG = "655370" *) 
(* CH0_EYESCAN_CFG0 = "2048" *) (* CH0_EYESCAN_CFG1 = "0" *) (* CH0_EYESCAN_CFG10 = "0" *) 
(* CH0_EYESCAN_CFG11 = "0" *) (* CH0_EYESCAN_CFG12 = "0" *) (* CH0_EYESCAN_CFG13 = "0" *) 
(* CH0_EYESCAN_CFG14 = "0" *) (* CH0_EYESCAN_CFG15 = "0" *) (* CH0_EYESCAN_CFG16 = "0" *) 
(* CH0_EYESCAN_CFG2 = "0" *) (* CH0_EYESCAN_CFG3 = "0" *) (* CH0_EYESCAN_CFG4 = "0" *) 
(* CH0_EYESCAN_CFG5 = "0" *) (* CH0_EYESCAN_CFG6 = "0" *) (* CH0_EYESCAN_CFG7 = "0" *) 
(* CH0_EYESCAN_CFG8 = "0" *) (* CH0_EYESCAN_CFG9 = "0" *) (* CH0_FABRIC_INTF_CFG0 = "-20973573" *) 
(* CH0_FABRIC_INTF_CFG1 = "33792" *) (* CH0_FABRIC_INTF_CFG2 = "537919472" *) (* CH0_FABRIC_INTF_CFG3 = "0" *) 
(* CH0_FABRIC_INTF_CFG4 = "20480" *) (* CH0_FABRIC_INTF_CFG5 = "25602" *) (* CH0_INSTANTIATED = "1" *) 
(* CH0_MONITOR_CFG = "0" *) (* CH0_PIPE_CTRL_CFG0 = "280672" *) (* CH0_PIPE_CTRL_CFG1 = "2097811" *) 
(* CH0_PIPE_CTRL_CFG10 = "85983215" *) (* CH0_PIPE_CTRL_CFG2 = "9950092" *) (* CH0_PIPE_CTRL_CFG3 = "77070639" *) 
(* CH0_PIPE_CTRL_CFG4 = "4456448" *) (* CH0_PIPE_CTRL_CFG5 = "536870912" *) (* CH0_PIPE_CTRL_CFG6 = "1032847460" *) 
(* CH0_PIPE_CTRL_CFG7 = "68276509" *) (* CH0_PIPE_CTRL_CFG8 = "33841432" *) (* CH0_PIPE_CTRL_CFG9 = "-2138046464" *) 
(* CH0_PIPE_TX_EQ_CFG0 = "175467480" *) (* CH0_PIPE_TX_EQ_CFG1 = "152233553" *) (* CH0_PIPE_TX_EQ_CFG2 = "8258" *) 
(* CH0_PIPE_TX_EQ_CFG3 = "402" *) (* CH0_RESET_BYP_HDSHK_CFG = "0" *) (* CH0_RESET_CFG = "135266341" *) 
(* CH0_RESET_LOOPER_ID_CFG = "2113632" *) (* CH0_RESET_LOOP_ID_CFG0 = "528" *) (* CH0_RESET_LOOP_ID_CFG1 = "106181136" *) 
(* CH0_RESET_LOOP_ID_CFG2 = "17185" *) (* CH0_RESET_TIME_CFG0 = "34636801" *) (* CH0_RESET_TIME_CFG1 = "34636833" *) 
(* CH0_RESET_TIME_CFG2 = "34636833" *) (* CH0_RESET_TIME_CFG3 = "-2063064031" *) (* CH0_RXOUTCLK_FREQ = "60.606100" *) 
(* CH0_RXOUTCLK_REF_FREQ = "400" *) (* CH0_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) (* CH0_RX_CDR_CFG0 = "-1274740670" *) 
(* CH0_RX_CDR_CFG1 = "1610612992" *) (* CH0_RX_CDR_CFG2 = "134236745" *) (* CH0_RX_CDR_CFG3 = "744694" *) 
(* CH0_RX_CDR_CFG4 = "607924224" *) (* CH0_RX_CRC_CFG0 = "30848" *) (* CH0_RX_CRC_CFG1 = "505290270" *) 
(* CH0_RX_CRC_CFG2 = "505290270" *) (* CH0_RX_CRC_CFG3 = "-1" *) (* CH0_RX_CTLE_CFG0 = "31195392" *) 
(* CH0_RX_CTLE_CFG1 = "1073741824" *) (* CH0_RX_DACI2V_CFG0 = "67145418" *) (* CH0_RX_DFE_CFG0 = "-805153784" *) 
(* CH0_RX_ELASTIC_BUF_CFG0 = "4204412" *) (* CH0_RX_ELASTIC_BUF_CFG1 = "2" *) (* CH0_RX_ELASTIC_BUF_CFG2 = "0" *) 
(* CH0_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) (* CH0_RX_ELASTIC_BUF_CFG4 = "0" *) (* CH0_RX_ELASTIC_BUF_CFG5 = "0" *) 
(* CH0_RX_ELASTIC_BUF_CFG6 = "-1048576" *) (* CH0_RX_ELASTIC_BUF_CFG7 = "67108869" *) (* CH0_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
(* CH0_RX_ELASTIC_BUF_CFG9 = "2033040" *) (* CH0_RX_MISC_CFG0 = "1342177280" *) (* CH0_RX_OOB_CFG0 = "609534468" *) 
(* CH0_RX_OOB_CFG1 = "16925124" *) (* CH0_RX_PAD_CFG0 = "0" *) (* CH0_RX_PAD_CFG1 = "272910714" *) 
(* CH0_RX_PCS_CFG0 = "674623792" *) (* CH0_RX_PCS_CFG1 = "-1274804224" *) (* CH0_RX_PCS_CFG2 = "241" *) 
(* CH0_RX_PCS_CFG3 = "471404303" *) (* CH0_RX_PCS_CFG4 = "1115725826" *) (* CH0_RX_PHALIGN_CFG0 = "1146883" *) 
(* CH0_RX_PHALIGN_CFG1 = "1485013002" *) (* CH0_RX_PHALIGN_CFG2 = "117248" *) (* CH0_RX_PHALIGN_CFG3 = "1476624384" *) 
(* CH0_RX_PHALIGN_CFG4 = "522" *) (* CH0_RX_PHALIGN_CFG5 = "50462720" *) (* CH0_SIM_MODE = "FAST" *) 
(* CH0_SIM_RECEIVER_DETECT_PASS = "TRUE" *) (* CH0_SIM_RESET_SPEEDUP = "TRUE" *) (* CH0_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
(* CH0_TXOUTCLK_FREQ = "60.606100" *) (* CH0_TXOUTCLK_REF_FREQ = "400" *) (* CH0_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) 
(* CH0_TX_10G_CFG0 = "0" *) (* CH0_TX_10G_CFG1 = "1073741824" *) (* CH0_TX_10G_CFG2 = "0" *) 
(* CH0_TX_10G_CFG3 = "0" *) (* CH0_TX_ANA_CFG0 = "208" *) (* CH0_TX_CRC_CFG0 = "30720" *) 
(* CH0_TX_CRC_CFG1 = "505290270" *) (* CH0_TX_CRC_CFG2 = "505290270" *) (* CH0_TX_CRC_CFG3 = "-1" *) 
(* CH0_TX_DRV_CFG0 = "4194304" *) (* CH0_TX_DRV_CFG1 = "6144" *) (* CH0_TX_PCS_CFG0 = "1650458929" *) 
(* CH0_TX_PCS_CFG1 = "674583932" *) (* CH0_TX_PCS_CFG2 = "357954218" *) (* CH0_TX_PCS_CFG3 = "699011" *) 
(* CH0_TX_PHALIGN_CFG0 = "1146880" *) (* CH0_TX_PHALIGN_CFG1 = "46428165" *) (* CH0_TX_PHALIGN_CFG2 = "360504" *) 
(* CH0_TX_PHALIGN_CFG3 = "0" *) (* CH0_TX_PHALIGN_CFG4 = "404095200" *) (* CH0_TX_PHALIGN_CFG5 = "256" *) 
(* CH0_TX_PIPPM_CFG = "33554432" *) (* CH0_TX_SER_CFG0 = "0" *) (* CH1_ADAPT_APT_CFG = "0" *) 
(* CH1_ADAPT_CAL_CFG = "-2115083264" *) (* CH1_ADAPT_DFE_CFG = "64" *) (* CH1_ADAPT_GC_CFG0 = "9441392" *) 
(* CH1_ADAPT_GC_CFG1 = "178259936" *) (* CH1_ADAPT_GC_CFG2 = "2097384" *) (* CH1_ADAPT_GC_CFG3 = "178258912" *) 
(* CH1_ADAPT_GEN_CFG0 = "3276800" *) (* CH1_ADAPT_GEN_CFG1 = "0" *) (* CH1_ADAPT_GEN_CFG2 = "-2013265921" *) 
(* CH1_ADAPT_GEN_CFG3 = "268435456" *) (* CH1_ADAPT_H01_CFG = "18875040" *) (* CH1_ADAPT_H23_CFG = "27263392" *) 
(* CH1_ADAPT_H45_CFG = "27263392" *) (* CH1_ADAPT_H67_CFG = "27263392" *) (* CH1_ADAPT_H89_CFG = "27263392" *) 
(* CH1_ADAPT_HAB_CFG = "27263392" *) (* CH1_ADAPT_HCD_CFG = "27263392" *) (* CH1_ADAPT_HEF_CFG = "27263904" *) 
(* CH1_ADAPT_KH_CFG0 = "537427519" *) (* CH1_ADAPT_KH_CFG1 = "0" *) (* CH1_ADAPT_KH_CFG2 = "17312" *) 
(* CH1_ADAPT_KH_CFG3 = "0" *) (* CH1_ADAPT_KH_CFG4 = "31648" *) (* CH1_ADAPT_KH_CFG5 = "0" *) 
(* CH1_ADAPT_KL_CFG0 = "32288" *) (* CH1_ADAPT_KL_CFG1 = "17312" *) (* CH1_ADAPT_LCK_CFG0 = "16384" *) 
(* CH1_ADAPT_LCK_CFG1 = "16384" *) (* CH1_ADAPT_LCK_CFG2 = "0" *) (* CH1_ADAPT_LCK_CFG3 = "0" *) 
(* CH1_ADAPT_LOP_CFG = "-301988256" *) (* CH1_ADAPT_OS_CFG = "-2147483360" *) (* CH1_CHCLK_ILO_CFG = "6553651" *) 
(* CH1_CHCLK_MISC_CFG = "-125706465" *) (* CH1_CHCLK_RSV_CFG = "0" *) (* CH1_CHCLK_RXCAL_CFG = "138166272" *) 
(* CH1_CHCLK_RXCAL_CFG1 = "0" *) (* CH1_CHCLK_RXCAL_CFG2 = "0" *) (* CH1_CHCLK_RXPI_CFG = "5244940" *) 
(* CH1_CHCLK_TXCAL_CFG = "4194336" *) (* CH1_CHCLK_TXPI_CFG0 = "4655119" *) (* CH1_CHL_RSV_CFG0 = "-1073741815" *) 
(* CH1_CHL_RSV_CFG1 = "0" *) (* CH1_CHL_RSV_CFG2 = "0" *) (* CH1_CHL_RSV_CFG3 = "0" *) 
(* CH1_CHL_RSV_CFG4 = "0" *) (* CH1_DA_CFG = "655370" *) (* CH1_EYESCAN_CFG0 = "2048" *) 
(* CH1_EYESCAN_CFG1 = "0" *) (* CH1_EYESCAN_CFG10 = "0" *) (* CH1_EYESCAN_CFG11 = "0" *) 
(* CH1_EYESCAN_CFG12 = "0" *) (* CH1_EYESCAN_CFG13 = "0" *) (* CH1_EYESCAN_CFG14 = "0" *) 
(* CH1_EYESCAN_CFG15 = "0" *) (* CH1_EYESCAN_CFG16 = "0" *) (* CH1_EYESCAN_CFG2 = "0" *) 
(* CH1_EYESCAN_CFG3 = "0" *) (* CH1_EYESCAN_CFG4 = "0" *) (* CH1_EYESCAN_CFG5 = "0" *) 
(* CH1_EYESCAN_CFG6 = "0" *) (* CH1_EYESCAN_CFG7 = "0" *) (* CH1_EYESCAN_CFG8 = "0" *) 
(* CH1_EYESCAN_CFG9 = "0" *) (* CH1_FABRIC_INTF_CFG0 = "-20973573" *) (* CH1_FABRIC_INTF_CFG1 = "33792" *) 
(* CH1_FABRIC_INTF_CFG2 = "537919472" *) (* CH1_FABRIC_INTF_CFG3 = "0" *) (* CH1_FABRIC_INTF_CFG4 = "20480" *) 
(* CH1_FABRIC_INTF_CFG5 = "25602" *) (* CH1_INSTANTIATED = "1" *) (* CH1_MONITOR_CFG = "0" *) 
(* CH1_PIPE_CTRL_CFG0 = "280672" *) (* CH1_PIPE_CTRL_CFG1 = "2097811" *) (* CH1_PIPE_CTRL_CFG10 = "85983215" *) 
(* CH1_PIPE_CTRL_CFG2 = "9950092" *) (* CH1_PIPE_CTRL_CFG3 = "77070639" *) (* CH1_PIPE_CTRL_CFG4 = "4456448" *) 
(* CH1_PIPE_CTRL_CFG5 = "536870912" *) (* CH1_PIPE_CTRL_CFG6 = "1018691684" *) (* CH1_PIPE_CTRL_CFG7 = "68276509" *) 
(* CH1_PIPE_CTRL_CFG8 = "33841432" *) (* CH1_PIPE_CTRL_CFG9 = "-2138036698" *) (* CH1_PIPE_TX_EQ_CFG0 = "175467480" *) 
(* CH1_PIPE_TX_EQ_CFG1 = "152233553" *) (* CH1_PIPE_TX_EQ_CFG2 = "8258" *) (* CH1_PIPE_TX_EQ_CFG3 = "402" *) 
(* CH1_RESET_BYP_HDSHK_CFG = "0" *) (* CH1_RESET_CFG = "135266341" *) (* CH1_RESET_LOOPER_ID_CFG = "2113632" *) 
(* CH1_RESET_LOOP_ID_CFG0 = "528" *) (* CH1_RESET_LOOP_ID_CFG1 = "106181136" *) (* CH1_RESET_LOOP_ID_CFG2 = "17185" *) 
(* CH1_RESET_TIME_CFG0 = "34636801" *) (* CH1_RESET_TIME_CFG1 = "34636833" *) (* CH1_RESET_TIME_CFG2 = "34636833" *) 
(* CH1_RESET_TIME_CFG3 = "-2063064031" *) (* CH1_RXOUTCLK_FREQ = "60.606100" *) (* CH1_RXOUTCLK_REF_FREQ = "400" *) 
(* CH1_RXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) (* CH1_RX_CDR_CFG0 = "-1274740670" *) (* CH1_RX_CDR_CFG1 = "1610612992" *) 
(* CH1_RX_CDR_CFG2 = "134236745" *) (* CH1_RX_CDR_CFG3 = "744694" *) (* CH1_RX_CDR_CFG4 = "607924224" *) 
(* CH1_RX_CRC_CFG0 = "30848" *) (* CH1_RX_CRC_CFG1 = "505290270" *) (* CH1_RX_CRC_CFG2 = "505290270" *) 
(* CH1_RX_CRC_CFG3 = "-1" *) (* CH1_RX_CTLE_CFG0 = "31195392" *) (* CH1_RX_CTLE_CFG1 = "1073741824" *) 
(* CH1_RX_DACI2V_CFG0 = "67145418" *) (* CH1_RX_DFE_CFG0 = "-805153784" *) (* CH1_RX_ELASTIC_BUF_CFG0 = "4204412" *) 
(* CH1_RX_ELASTIC_BUF_CFG1 = "2" *) (* CH1_RX_ELASTIC_BUF_CFG2 = "0" *) (* CH1_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) 
(* CH1_RX_ELASTIC_BUF_CFG4 = "0" *) (* CH1_RX_ELASTIC_BUF_CFG5 = "0" *) (* CH1_RX_ELASTIC_BUF_CFG6 = "-1048576" *) 
(* CH1_RX_ELASTIC_BUF_CFG7 = "67108869" *) (* CH1_RX_ELASTIC_BUF_CFG8 = "2033040" *) (* CH1_RX_ELASTIC_BUF_CFG9 = "2033040" *) 
(* CH1_RX_MISC_CFG0 = "1342177280" *) (* CH1_RX_OOB_CFG0 = "609534468" *) (* CH1_RX_OOB_CFG1 = "16925124" *) 
(* CH1_RX_PAD_CFG0 = "0" *) (* CH1_RX_PAD_CFG1 = "272910714" *) (* CH1_RX_PCS_CFG0 = "674623792" *) 
(* CH1_RX_PCS_CFG1 = "-1274804224" *) (* CH1_RX_PCS_CFG2 = "241" *) (* CH1_RX_PCS_CFG3 = "471404303" *) 
(* CH1_RX_PCS_CFG4 = "1115725826" *) (* CH1_RX_PHALIGN_CFG0 = "1081347" *) (* CH1_RX_PHALIGN_CFG1 = "1485013006" *) 
(* CH1_RX_PHALIGN_CFG2 = "117248" *) (* CH1_RX_PHALIGN_CFG3 = "1476624384" *) (* CH1_RX_PHALIGN_CFG4 = "522" *) 
(* CH1_RX_PHALIGN_CFG5 = "50462720" *) (* CH1_SIM_MODE = "FAST" *) (* CH1_SIM_RECEIVER_DETECT_PASS = "TRUE" *) 
(* CH1_SIM_RESET_SPEEDUP = "TRUE" *) (* CH1_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) (* CH1_TXOUTCLK_FREQ = "60.606100" *) 
(* CH1_TXOUTCLK_REF_FREQ = "400" *) (* CH1_TXOUTCLK_REF_SOURCE = "HSCLK0_LCPLLGTREFCLK0" *) (* CH1_TX_10G_CFG0 = "0" *) 
(* CH1_TX_10G_CFG1 = "1073741824" *) (* CH1_TX_10G_CFG2 = "0" *) (* CH1_TX_10G_CFG3 = "0" *) 
(* CH1_TX_ANA_CFG0 = "208" *) (* CH1_TX_CRC_CFG0 = "30720" *) (* CH1_TX_CRC_CFG1 = "505290270" *) 
(* CH1_TX_CRC_CFG2 = "505290270" *) (* CH1_TX_CRC_CFG3 = "-1" *) (* CH1_TX_DRV_CFG0 = "4194304" *) 
(* CH1_TX_DRV_CFG1 = "6144" *) (* CH1_TX_PCS_CFG0 = "1650458929" *) (* CH1_TX_PCS_CFG1 = "674583932" *) 
(* CH1_TX_PCS_CFG2 = "357954218" *) (* CH1_TX_PCS_CFG3 = "699011" *) (* CH1_TX_PHALIGN_CFG0 = "1081344" *) 
(* CH1_TX_PHALIGN_CFG1 = "46428167" *) (* CH1_TX_PHALIGN_CFG2 = "360504" *) (* CH1_TX_PHALIGN_CFG3 = "0" *) 
(* CH1_TX_PHALIGN_CFG4 = "404095200" *) (* CH1_TX_PHALIGN_CFG5 = "256" *) (* CH1_TX_PIPPM_CFG = "33554432" *) 
(* CH1_TX_SER_CFG0 = "0" *) (* CH2_ADAPT_APT_CFG = "0" *) (* CH2_ADAPT_CAL_CFG = "-2115083264" *) 
(* CH2_ADAPT_DFE_CFG = "64" *) (* CH2_ADAPT_GC_CFG0 = "9441392" *) (* CH2_ADAPT_GC_CFG1 = "178259936" *) 
(* CH2_ADAPT_GC_CFG2 = "2097384" *) (* CH2_ADAPT_GC_CFG3 = "178258912" *) (* CH2_ADAPT_GEN_CFG0 = "3276800" *) 
(* CH2_ADAPT_GEN_CFG1 = "0" *) (* CH2_ADAPT_GEN_CFG2 = "-2013265921" *) (* CH2_ADAPT_GEN_CFG3 = "268435456" *) 
(* CH2_ADAPT_H01_CFG = "18875040" *) (* CH2_ADAPT_H23_CFG = "27263392" *) (* CH2_ADAPT_H45_CFG = "27263392" *) 
(* CH2_ADAPT_H67_CFG = "27263392" *) (* CH2_ADAPT_H89_CFG = "27263392" *) (* CH2_ADAPT_HAB_CFG = "27263392" *) 
(* CH2_ADAPT_HCD_CFG = "27263392" *) (* CH2_ADAPT_HEF_CFG = "27263904" *) (* CH2_ADAPT_KH_CFG0 = "537427519" *) 
(* CH2_ADAPT_KH_CFG1 = "0" *) (* CH2_ADAPT_KH_CFG2 = "17312" *) (* CH2_ADAPT_KH_CFG3 = "0" *) 
(* CH2_ADAPT_KH_CFG4 = "31648" *) (* CH2_ADAPT_KH_CFG5 = "0" *) (* CH2_ADAPT_KL_CFG0 = "32288" *) 
(* CH2_ADAPT_KL_CFG1 = "17312" *) (* CH2_ADAPT_LCK_CFG0 = "16384" *) (* CH2_ADAPT_LCK_CFG1 = "16384" *) 
(* CH2_ADAPT_LCK_CFG2 = "0" *) (* CH2_ADAPT_LCK_CFG3 = "0" *) (* CH2_ADAPT_LOP_CFG = "-301988256" *) 
(* CH2_ADAPT_OS_CFG = "-2147483360" *) (* CH2_CHCLK_ILO_CFG = "6553651" *) (* CH2_CHCLK_MISC_CFG = "-125706465" *) 
(* CH2_CHCLK_RSV_CFG = "0" *) (* CH2_CHCLK_RXCAL_CFG = "138166272" *) (* CH2_CHCLK_RXCAL_CFG1 = "0" *) 
(* CH2_CHCLK_RXCAL_CFG2 = "0" *) (* CH2_CHCLK_RXPI_CFG = "5244940" *) (* CH2_CHCLK_TXCAL_CFG = "4194336" *) 
(* CH2_CHCLK_TXPI_CFG0 = "4655119" *) (* CH2_CHL_RSV_CFG0 = "-1073741815" *) (* CH2_CHL_RSV_CFG1 = "0" *) 
(* CH2_CHL_RSV_CFG2 = "0" *) (* CH2_CHL_RSV_CFG3 = "0" *) (* CH2_CHL_RSV_CFG4 = "0" *) 
(* CH2_DA_CFG = "655370" *) (* CH2_EYESCAN_CFG0 = "2048" *) (* CH2_EYESCAN_CFG1 = "0" *) 
(* CH2_EYESCAN_CFG10 = "0" *) (* CH2_EYESCAN_CFG11 = "0" *) (* CH2_EYESCAN_CFG12 = "0" *) 
(* CH2_EYESCAN_CFG13 = "0" *) (* CH2_EYESCAN_CFG14 = "0" *) (* CH2_EYESCAN_CFG15 = "0" *) 
(* CH2_EYESCAN_CFG16 = "0" *) (* CH2_EYESCAN_CFG2 = "0" *) (* CH2_EYESCAN_CFG3 = "0" *) 
(* CH2_EYESCAN_CFG4 = "0" *) (* CH2_EYESCAN_CFG5 = "0" *) (* CH2_EYESCAN_CFG6 = "0" *) 
(* CH2_EYESCAN_CFG7 = "0" *) (* CH2_EYESCAN_CFG8 = "0" *) (* CH2_EYESCAN_CFG9 = "0" *) 
(* CH2_FABRIC_INTF_CFG0 = "-20973573" *) (* CH2_FABRIC_INTF_CFG1 = "33792" *) (* CH2_FABRIC_INTF_CFG2 = "537919472" *) 
(* CH2_FABRIC_INTF_CFG3 = "0" *) (* CH2_FABRIC_INTF_CFG4 = "20480" *) (* CH2_FABRIC_INTF_CFG5 = "25602" *) 
(* CH2_INSTANTIATED = "1" *) (* CH2_MONITOR_CFG = "0" *) (* CH2_PIPE_CTRL_CFG0 = "280672" *) 
(* CH2_PIPE_CTRL_CFG1 = "2097810" *) (* CH2_PIPE_CTRL_CFG10 = "85983215" *) (* CH2_PIPE_CTRL_CFG2 = "9950092" *) 
(* CH2_PIPE_CTRL_CFG3 = "77070639" *) (* CH2_PIPE_CTRL_CFG4 = "4456448" *) (* CH2_PIPE_CTRL_CFG5 = "536870912" *) 
(* CH2_PIPE_CTRL_CFG6 = "1018691684" *) (* CH2_PIPE_CTRL_CFG7 = "68276509" *) (* CH2_PIPE_CTRL_CFG8 = "33841432" *) 
(* CH2_PIPE_CTRL_CFG9 = "-2138036698" *) (* CH2_PIPE_TX_EQ_CFG0 = "175467480" *) (* CH2_PIPE_TX_EQ_CFG1 = "152233553" *) 
(* CH2_PIPE_TX_EQ_CFG2 = "8258" *) (* CH2_PIPE_TX_EQ_CFG3 = "402" *) (* CH2_RESET_BYP_HDSHK_CFG = "0" *) 
(* CH2_RESET_CFG = "135266341" *) (* CH2_RESET_LOOPER_ID_CFG = "2113632" *) (* CH2_RESET_LOOP_ID_CFG0 = "528" *) 
(* CH2_RESET_LOOP_ID_CFG1 = "106181136" *) (* CH2_RESET_LOOP_ID_CFG2 = "17185" *) (* CH2_RESET_TIME_CFG0 = "34636801" *) 
(* CH2_RESET_TIME_CFG1 = "34636833" *) (* CH2_RESET_TIME_CFG2 = "34636833" *) (* CH2_RESET_TIME_CFG3 = "-2063064031" *) 
(* CH2_RXOUTCLK_FREQ = "60.606100" *) (* CH2_RXOUTCLK_REF_FREQ = "400" *) (* CH2_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
(* CH2_RX_CDR_CFG0 = "-1274740670" *) (* CH2_RX_CDR_CFG1 = "1610612992" *) (* CH2_RX_CDR_CFG2 = "134236745" *) 
(* CH2_RX_CDR_CFG3 = "744694" *) (* CH2_RX_CDR_CFG4 = "607924224" *) (* CH2_RX_CRC_CFG0 = "30848" *) 
(* CH2_RX_CRC_CFG1 = "505290270" *) (* CH2_RX_CRC_CFG2 = "505290270" *) (* CH2_RX_CRC_CFG3 = "-1" *) 
(* CH2_RX_CTLE_CFG0 = "31195392" *) (* CH2_RX_CTLE_CFG1 = "1073741824" *) (* CH2_RX_DACI2V_CFG0 = "67145418" *) 
(* CH2_RX_DFE_CFG0 = "-805153784" *) (* CH2_RX_ELASTIC_BUF_CFG0 = "4204412" *) (* CH2_RX_ELASTIC_BUF_CFG1 = "2" *) 
(* CH2_RX_ELASTIC_BUF_CFG2 = "0" *) (* CH2_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) (* CH2_RX_ELASTIC_BUF_CFG4 = "0" *) 
(* CH2_RX_ELASTIC_BUF_CFG5 = "0" *) (* CH2_RX_ELASTIC_BUF_CFG6 = "-1048576" *) (* CH2_RX_ELASTIC_BUF_CFG7 = "67108869" *) 
(* CH2_RX_ELASTIC_BUF_CFG8 = "2033040" *) (* CH2_RX_ELASTIC_BUF_CFG9 = "2033040" *) (* CH2_RX_MISC_CFG0 = "1342177280" *) 
(* CH2_RX_OOB_CFG0 = "609534468" *) (* CH2_RX_OOB_CFG1 = "16925124" *) (* CH2_RX_PAD_CFG0 = "0" *) 
(* CH2_RX_PAD_CFG1 = "272910714" *) (* CH2_RX_PCS_CFG0 = "674623792" *) (* CH2_RX_PCS_CFG1 = "-1274804224" *) 
(* CH2_RX_PCS_CFG2 = "241" *) (* CH2_RX_PCS_CFG3 = "471404303" *) (* CH2_RX_PCS_CFG4 = "1115725826" *) 
(* CH2_RX_PHALIGN_CFG0 = "1081347" *) (* CH2_RX_PHALIGN_CFG1 = "1485013006" *) (* CH2_RX_PHALIGN_CFG2 = "117248" *) 
(* CH2_RX_PHALIGN_CFG3 = "1476624384" *) (* CH2_RX_PHALIGN_CFG4 = "522" *) (* CH2_RX_PHALIGN_CFG5 = "50462720" *) 
(* CH2_SIM_MODE = "FAST" *) (* CH2_SIM_RECEIVER_DETECT_PASS = "TRUE" *) (* CH2_SIM_RESET_SPEEDUP = "TRUE" *) 
(* CH2_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) (* CH2_TXOUTCLK_FREQ = "60.606100" *) (* CH2_TXOUTCLK_REF_FREQ = "400" *) 
(* CH2_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) (* CH2_TX_10G_CFG0 = "0" *) (* CH2_TX_10G_CFG1 = "1073741824" *) 
(* CH2_TX_10G_CFG2 = "0" *) (* CH2_TX_10G_CFG3 = "0" *) (* CH2_TX_ANA_CFG0 = "208" *) 
(* CH2_TX_CRC_CFG0 = "30720" *) (* CH2_TX_CRC_CFG1 = "505290270" *) (* CH2_TX_CRC_CFG2 = "505290270" *) 
(* CH2_TX_CRC_CFG3 = "-1" *) (* CH2_TX_DRV_CFG0 = "4194304" *) (* CH2_TX_DRV_CFG1 = "6144" *) 
(* CH2_TX_PCS_CFG0 = "1650458929" *) (* CH2_TX_PCS_CFG1 = "674583932" *) (* CH2_TX_PCS_CFG2 = "357954218" *) 
(* CH2_TX_PCS_CFG3 = "699011" *) (* CH2_TX_PHALIGN_CFG0 = "1081344" *) (* CH2_TX_PHALIGN_CFG1 = "46428167" *) 
(* CH2_TX_PHALIGN_CFG2 = "360504" *) (* CH2_TX_PHALIGN_CFG3 = "0" *) (* CH2_TX_PHALIGN_CFG4 = "404095200" *) 
(* CH2_TX_PHALIGN_CFG5 = "256" *) (* CH2_TX_PIPPM_CFG = "33554432" *) (* CH2_TX_SER_CFG0 = "0" *) 
(* CH3_ADAPT_APT_CFG = "0" *) (* CH3_ADAPT_CAL_CFG = "-2115083264" *) (* CH3_ADAPT_DFE_CFG = "64" *) 
(* CH3_ADAPT_GC_CFG0 = "9441392" *) (* CH3_ADAPT_GC_CFG1 = "178259936" *) (* CH3_ADAPT_GC_CFG2 = "2097384" *) 
(* CH3_ADAPT_GC_CFG3 = "178258912" *) (* CH3_ADAPT_GEN_CFG0 = "3276800" *) (* CH3_ADAPT_GEN_CFG1 = "0" *) 
(* CH3_ADAPT_GEN_CFG2 = "-2013265921" *) (* CH3_ADAPT_GEN_CFG3 = "268435456" *) (* CH3_ADAPT_H01_CFG = "18875040" *) 
(* CH3_ADAPT_H23_CFG = "27263392" *) (* CH3_ADAPT_H45_CFG = "27263392" *) (* CH3_ADAPT_H67_CFG = "27263392" *) 
(* CH3_ADAPT_H89_CFG = "27263392" *) (* CH3_ADAPT_HAB_CFG = "27263392" *) (* CH3_ADAPT_HCD_CFG = "27263392" *) 
(* CH3_ADAPT_HEF_CFG = "27263904" *) (* CH3_ADAPT_KH_CFG0 = "537427519" *) (* CH3_ADAPT_KH_CFG1 = "0" *) 
(* CH3_ADAPT_KH_CFG2 = "17312" *) (* CH3_ADAPT_KH_CFG3 = "0" *) (* CH3_ADAPT_KH_CFG4 = "31648" *) 
(* CH3_ADAPT_KH_CFG5 = "0" *) (* CH3_ADAPT_KL_CFG0 = "32288" *) (* CH3_ADAPT_KL_CFG1 = "17312" *) 
(* CH3_ADAPT_LCK_CFG0 = "16384" *) (* CH3_ADAPT_LCK_CFG1 = "16384" *) (* CH3_ADAPT_LCK_CFG2 = "0" *) 
(* CH3_ADAPT_LCK_CFG3 = "0" *) (* CH3_ADAPT_LOP_CFG = "-301988256" *) (* CH3_ADAPT_OS_CFG = "-2147483360" *) 
(* CH3_CHCLK_ILO_CFG = "6553651" *) (* CH3_CHCLK_MISC_CFG = "-125706465" *) (* CH3_CHCLK_RSV_CFG = "0" *) 
(* CH3_CHCLK_RXCAL_CFG = "138166272" *) (* CH3_CHCLK_RXCAL_CFG1 = "0" *) (* CH3_CHCLK_RXCAL_CFG2 = "0" *) 
(* CH3_CHCLK_RXPI_CFG = "5244940" *) (* CH3_CHCLK_TXCAL_CFG = "4194336" *) (* CH3_CHCLK_TXPI_CFG0 = "4655119" *) 
(* CH3_CHL_RSV_CFG0 = "-1073741815" *) (* CH3_CHL_RSV_CFG1 = "0" *) (* CH3_CHL_RSV_CFG2 = "0" *) 
(* CH3_CHL_RSV_CFG3 = "0" *) (* CH3_CHL_RSV_CFG4 = "0" *) (* CH3_DA_CFG = "655370" *) 
(* CH3_EYESCAN_CFG0 = "2048" *) (* CH3_EYESCAN_CFG1 = "0" *) (* CH3_EYESCAN_CFG10 = "0" *) 
(* CH3_EYESCAN_CFG11 = "0" *) (* CH3_EYESCAN_CFG12 = "0" *) (* CH3_EYESCAN_CFG13 = "0" *) 
(* CH3_EYESCAN_CFG14 = "0" *) (* CH3_EYESCAN_CFG15 = "0" *) (* CH3_EYESCAN_CFG16 = "0" *) 
(* CH3_EYESCAN_CFG2 = "0" *) (* CH3_EYESCAN_CFG3 = "0" *) (* CH3_EYESCAN_CFG4 = "0" *) 
(* CH3_EYESCAN_CFG5 = "0" *) (* CH3_EYESCAN_CFG6 = "0" *) (* CH3_EYESCAN_CFG7 = "0" *) 
(* CH3_EYESCAN_CFG8 = "0" *) (* CH3_EYESCAN_CFG9 = "0" *) (* CH3_FABRIC_INTF_CFG0 = "-20973573" *) 
(* CH3_FABRIC_INTF_CFG1 = "33792" *) (* CH3_FABRIC_INTF_CFG2 = "537919472" *) (* CH3_FABRIC_INTF_CFG3 = "0" *) 
(* CH3_FABRIC_INTF_CFG4 = "20480" *) (* CH3_FABRIC_INTF_CFG5 = "25602" *) (* CH3_INSTANTIATED = "1" *) 
(* CH3_MONITOR_CFG = "0" *) (* CH3_PIPE_CTRL_CFG0 = "280672" *) (* CH3_PIPE_CTRL_CFG1 = "2097810" *) 
(* CH3_PIPE_CTRL_CFG10 = "85983215" *) (* CH3_PIPE_CTRL_CFG2 = "9950092" *) (* CH3_PIPE_CTRL_CFG3 = "77070639" *) 
(* CH3_PIPE_CTRL_CFG4 = "4456448" *) (* CH3_PIPE_CTRL_CFG5 = "536870912" *) (* CH3_PIPE_CTRL_CFG6 = "1015021668" *) 
(* CH3_PIPE_CTRL_CFG7 = "68276509" *) (* CH3_PIPE_CTRL_CFG8 = "33841432" *) (* CH3_PIPE_CTRL_CFG9 = "-2138036698" *) 
(* CH3_PIPE_TX_EQ_CFG0 = "175467480" *) (* CH3_PIPE_TX_EQ_CFG1 = "152233553" *) (* CH3_PIPE_TX_EQ_CFG2 = "8258" *) 
(* CH3_PIPE_TX_EQ_CFG3 = "402" *) (* CH3_RESET_BYP_HDSHK_CFG = "0" *) (* CH3_RESET_CFG = "135266341" *) 
(* CH3_RESET_LOOPER_ID_CFG = "2113632" *) (* CH3_RESET_LOOP_ID_CFG0 = "528" *) (* CH3_RESET_LOOP_ID_CFG1 = "106181136" *) 
(* CH3_RESET_LOOP_ID_CFG2 = "17185" *) (* CH3_RESET_TIME_CFG0 = "34636801" *) (* CH3_RESET_TIME_CFG1 = "34636833" *) 
(* CH3_RESET_TIME_CFG2 = "34636833" *) (* CH3_RESET_TIME_CFG3 = "-2063064031" *) (* CH3_RXOUTCLK_FREQ = "60.606100" *) 
(* CH3_RXOUTCLK_REF_FREQ = "400" *) (* CH3_RXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) (* CH3_RX_CDR_CFG0 = "-1274740670" *) 
(* CH3_RX_CDR_CFG1 = "1610612992" *) (* CH3_RX_CDR_CFG2 = "134236745" *) (* CH3_RX_CDR_CFG3 = "744694" *) 
(* CH3_RX_CDR_CFG4 = "607924224" *) (* CH3_RX_CRC_CFG0 = "30848" *) (* CH3_RX_CRC_CFG1 = "505290270" *) 
(* CH3_RX_CRC_CFG2 = "505290270" *) (* CH3_RX_CRC_CFG3 = "-1" *) (* CH3_RX_CTLE_CFG0 = "31195392" *) 
(* CH3_RX_CTLE_CFG1 = "1073741824" *) (* CH3_RX_DACI2V_CFG0 = "67145418" *) (* CH3_RX_DFE_CFG0 = "-805153784" *) 
(* CH3_RX_ELASTIC_BUF_CFG0 = "4204412" *) (* CH3_RX_ELASTIC_BUF_CFG1 = "2" *) (* CH3_RX_ELASTIC_BUF_CFG2 = "0" *) 
(* CH3_RX_ELASTIC_BUF_CFG3 = "-1612709888" *) (* CH3_RX_ELASTIC_BUF_CFG4 = "0" *) (* CH3_RX_ELASTIC_BUF_CFG5 = "0" *) 
(* CH3_RX_ELASTIC_BUF_CFG6 = "-1048576" *) (* CH3_RX_ELASTIC_BUF_CFG7 = "67108869" *) (* CH3_RX_ELASTIC_BUF_CFG8 = "2033040" *) 
(* CH3_RX_ELASTIC_BUF_CFG9 = "2033040" *) (* CH3_RX_MISC_CFG0 = "1342177280" *) (* CH3_RX_OOB_CFG0 = "609534468" *) 
(* CH3_RX_OOB_CFG1 = "16925124" *) (* CH3_RX_PAD_CFG0 = "0" *) (* CH3_RX_PAD_CFG1 = "272910714" *) 
(* CH3_RX_PCS_CFG0 = "674623792" *) (* CH3_RX_PCS_CFG1 = "-1274804224" *) (* CH3_RX_PCS_CFG2 = "241" *) 
(* CH3_RX_PCS_CFG3 = "471404303" *) (* CH3_RX_PCS_CFG4 = "1115725826" *) (* CH3_RX_PHALIGN_CFG0 = "1081347" *) 
(* CH3_RX_PHALIGN_CFG1 = "1485012998" *) (* CH3_RX_PHALIGN_CFG2 = "117248" *) (* CH3_RX_PHALIGN_CFG3 = "1476624384" *) 
(* CH3_RX_PHALIGN_CFG4 = "522" *) (* CH3_RX_PHALIGN_CFG5 = "50462720" *) (* CH3_SIM_MODE = "FAST" *) 
(* CH3_SIM_RECEIVER_DETECT_PASS = "TRUE" *) (* CH3_SIM_RESET_SPEEDUP = "TRUE" *) (* CH3_SIM_TX_EIDLE_DRIVE_LEVEL = "Z" *) 
(* CH3_TXOUTCLK_FREQ = "60.606100" *) (* CH3_TXOUTCLK_REF_FREQ = "400" *) (* CH3_TXOUTCLK_REF_SOURCE = "HSCLK1_LCPLLGTREFCLK0" *) 
(* CH3_TX_10G_CFG0 = "0" *) (* CH3_TX_10G_CFG1 = "1073741824" *) (* CH3_TX_10G_CFG2 = "0" *) 
(* CH3_TX_10G_CFG3 = "0" *) (* CH3_TX_ANA_CFG0 = "208" *) (* CH3_TX_CRC_CFG0 = "30720" *) 
(* CH3_TX_CRC_CFG1 = "505290270" *) (* CH3_TX_CRC_CFG2 = "505290270" *) (* CH3_TX_CRC_CFG3 = "-1" *) 
(* CH3_TX_DRV_CFG0 = "4194304" *) (* CH3_TX_DRV_CFG1 = "6144" *) (* CH3_TX_PCS_CFG0 = "1650458929" *) 
(* CH3_TX_PCS_CFG1 = "674583932" *) (* CH3_TX_PCS_CFG2 = "357954218" *) (* CH3_TX_PCS_CFG3 = "699011" *) 
(* CH3_TX_PHALIGN_CFG0 = "1081344" *) (* CH3_TX_PHALIGN_CFG1 = "46428163" *) (* CH3_TX_PHALIGN_CFG2 = "360504" *) 
(* CH3_TX_PHALIGN_CFG3 = "0" *) (* CH3_TX_PHALIGN_CFG4 = "404095200" *) (* CH3_TX_PHALIGN_CFG5 = "256" *) 
(* CH3_TX_PIPPM_CFG = "33554432" *) (* CH3_TX_SER_CFG0 = "0" *) (* CHANNEL_BONDING_EN = "" *) 
(* CTRL_RSV_CFG0 = "24" *) (* CTRL_RSV_CFG1 = "0" *) (* EGW_CHANNEL_ORDERING = "/jesd204_phy/gt_quad_base_0/TX0_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX0.0 /jesd204_phy/gt_quad_base_0/TX1_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX1.1 /jesd204_phy/gt_quad_base_0/TX2_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX2.2 /jesd204_phy/gt_quad_base_0/TX3_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_TX3.3 /jesd204_phy/gt_quad_base_0/RX0_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX0.0 /jesd204_phy/gt_quad_base_0/RX1_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX1.1 /jesd204_phy/gt_quad_base_0/RX2_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX2.2 /jesd204_phy/gt_quad_base_0/RX3_GT_IP_Interface system_gt_bridge_ip_0_0./jesd204_phy/gt_bridge_ip_0/GT_RX3.3" *) 
(* EGW_COMP_NAME = "system_gt_quad_base_0_0" *) (* EGW_IS_QUAD = "1" *) (* EGW_REFCLK_LIST = "/ref_clk_q0" *) 
(* ENABLE_APB3 = "1'b1" *) (* GT_REFCLK_INFO = "refclk_PROT0_R0_400_MHz_unique1" *) (* HS0_LCPLL_IPS_PIN_EN = "0" *) 
(* HS0_LCPLL_IPS_REFCLK_SEL = "1" *) (* HS0_LCPLL_REFCLK_MAP0 = "0" *) (* HS0_LCPLL_REFCLK_MAP1 = "1" *) 
(* HS0_LCPLL_REFCLK_MAP2 = "2" *) (* HS0_LCPLL_REFCLK_MAP3 = "3" *) (* HS0_LCPLL_REFCLK_MAP4 = "4" *) 
(* HS0_LCPLL_REFCLK_MAP5 = "5" *) (* HS0_LCPLL_REFCLK_MAP6 = "6" *) (* HS0_LCPLL_REFCLK_MAP7 = "7" *) 
(* HS0_RPLL_IPS_PIN_EN = "0" *) (* HS0_RPLL_IPS_REFCLK_SEL = "1" *) (* HS0_RPLL_REFCLK_MAP0 = "0" *) 
(* HS0_RPLL_REFCLK_MAP1 = "1" *) (* HS0_RPLL_REFCLK_MAP2 = "2" *) (* HS0_RPLL_REFCLK_MAP3 = "3" *) 
(* HS0_RPLL_REFCLK_MAP4 = "4" *) (* HS0_RPLL_REFCLK_MAP5 = "5" *) (* HS0_RPLL_REFCLK_MAP6 = "6" *) 
(* HS0_RPLL_REFCLK_MAP7 = "7" *) (* HS1_LCPLL_IPS_PIN_EN = "0" *) (* HS1_LCPLL_IPS_REFCLK_SEL = "1" *) 
(* HS1_LCPLL_REFCLK_MAP0 = "0" *) (* HS1_LCPLL_REFCLK_MAP1 = "2" *) (* HS1_LCPLL_REFCLK_MAP2 = "1" *) 
(* HS1_LCPLL_REFCLK_MAP3 = "3" *) (* HS1_LCPLL_REFCLK_MAP4 = "4" *) (* HS1_LCPLL_REFCLK_MAP5 = "5" *) 
(* HS1_LCPLL_REFCLK_MAP6 = "6" *) (* HS1_LCPLL_REFCLK_MAP7 = "7" *) (* HS1_RPLL_IPS_PIN_EN = "0" *) 
(* HS1_RPLL_IPS_REFCLK_SEL = "1" *) (* HS1_RPLL_REFCLK_MAP0 = "0" *) (* HS1_RPLL_REFCLK_MAP1 = "2" *) 
(* HS1_RPLL_REFCLK_MAP2 = "1" *) (* HS1_RPLL_REFCLK_MAP3 = "3" *) (* HS1_RPLL_REFCLK_MAP4 = "4" *) 
(* HS1_RPLL_REFCLK_MAP5 = "5" *) (* HS1_RPLL_REFCLK_MAP6 = "6" *) (* HS1_RPLL_REFCLK_MAP7 = "7" *) 
(* HSCLK0_HSDIST_CFG = "65566" *) (* HSCLK0_INSTANTIATED = "1" *) (* HSCLK0_LCPLL_CFG0 = "4210436" *) 
(* HSCLK0_LCPLL_CFG1 = "68701952" *) (* HSCLK0_LCPLL_CFG2 = "-2105605624" *) (* HSCLK0_LCPLL_LGC_CFG0 = "-439055600" *) 
(* HSCLK0_LCPLL_LGC_CFG1 = "-1810753408" *) (* HSCLK0_LCPLL_LGC_CFG2 = "1114385" *) (* HSCLK0_RPLL_CFG0 = "-2147450940" *) 
(* HSCLK0_RPLL_CFG1 = "132267816" *) (* HSCLK0_RPLL_CFG2 = "11740105" *) (* HSCLK0_RPLL_LGC_CFG0 = "-439054960" *) 
(* HSCLK0_RPLL_LGC_CFG1 = "-1810753408" *) (* HSCLK0_RPLL_LGC_CFG2 = "1114385" *) (* HSCLK1_HSDIST_CFG = "65566" *) 
(* HSCLK1_INSTANTIATED = "1" *) (* HSCLK1_LCPLL_CFG0 = "4210436" *) (* HSCLK1_LCPLL_CFG1 = "68701952" *) 
(* HSCLK1_LCPLL_CFG2 = "-2105605624" *) (* HSCLK1_LCPLL_LGC_CFG0 = "-439055600" *) (* HSCLK1_LCPLL_LGC_CFG1 = "-1810753408" *) 
(* HSCLK1_LCPLL_LGC_CFG2 = "1114385" *) (* HSCLK1_RPLL_CFG0 = "-2147450940" *) (* HSCLK1_RPLL_CFG1 = "132267816" *) 
(* HSCLK1_RPLL_CFG2 = "11740105" *) (* HSCLK1_RPLL_LGC_CFG0 = "-439054960" *) (* HSCLK1_RPLL_LGC_CFG1 = "-1810753408" *) 
(* HSCLK1_RPLL_LGC_CFG2 = "1114385" *) (* IDLE = "2'b00" *) (* IS_GTYE5 = "1'b1" *) 
(* IS_GTYP = "1'b0" *) (* IS_KSB = "1'b0" *) (* LANEUSAGE = "PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}" *) 
(* LANE_SATISFIED = "1 {}" *) (* LANE_SEL_DICT = "PROT0 {RX0 RX1 RX2 RX3 TX0 TX1 TX2 TX3}" *) (* MEMORY_INIT_FILE = "system_gt_quad_base_0_0.mem" *) 
(* MSTCLK_SRC_DICT = "TX 1,0,0,0 RX 1,0,0,0" *) (* MST_RESET_CFG = "-241" *) (* PIN_CFG0 = "17318425" *) 
(* POR_CFG = "285440" *) (* PROT0_SETTINGS = "LR0_SETTINGS {RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false TX_FRACN_OVRD false RX_FRACN_OVRD false RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 TX_LANE_DESKEW_HDMI_ENABLE false RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CC_MASK 00000000 RX_CC_K 00000000 RX_CC_DISP 00000000 GT_DIRECTION DUPLEX TX_LINE_RATE 4.0 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 400 TX_ACTUAL_REFCLK_FREQUENCY 400 TX_FRACN_ENABLED true TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING 64B66B_ASYNC TX_USER_DATA_WIDTH 64 TX_INT_DATA_WIDTH 64 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXPROGDIVCLK TXPROGDIV_FREQ_ENABLE true TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 60.606 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE PRESET GTY-JESD204_64B66B INTERNAL_PRESET JESD204_64B66B RX_LINE_RATE 4.0 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 400 RX_ACTUAL_REFCLK_FREQUENCY 400 RX_FRACN_ENABLED true RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING 64B66B_ASYNC RX_USER_DATA_WIDTH 64 RX_INT_DATA_WIDTH 64 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 60.606 INS_LOSS_NYQ 12 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 10 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0 GT_TYPE GTY} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT1_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* PROT2_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT3_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT4_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* PROT5_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT6_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) (* PROT7_SETTINGS = "LR0_SETTINGS {GT_TYPE GTY GT_DIRECTION DUPLEX PRESET None RX_HD_EN 0 TX_HD_EN 0 RX_PAM_SEL NRZ TX_PAM_SEL NRZ RX_GRAY_BYP true TX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true TX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true TX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false TX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None TX_LINE_RATE 10.3125 TX_PLL_TYPE LCPLL TX_REFCLK_FREQUENCY 156.25 TX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 TX_FRACN_OVRD false TX_FRACN_ENABLED false TX_FRACN_NUMERATOR 0 TX_REFCLK_SOURCE R0 TX_DATA_ENCODING RAW TX_USER_DATA_WIDTH 32 TX_INT_DATA_WIDTH 32 TX_BUFFER_MODE 1 TX_BUFFER_BYPASS_MODE Fast_Sync TX_PIPM_ENABLE false TX_OUTCLK_SOURCE TXOUTCLKPMA TXPROGDIV_FREQ_ENABLE false TXPROGDIV_FREQ_SOURCE LCPLL TXPROGDIV_FREQ_VAL 322.265625 TX_DIFF_SWING_EMPH_MODE CUSTOM TX_64B66B_SCRAMBLER false TX_64B66B_ENCODER false TX_64B66B_CRC false TX_RATE_GROUP A RX_LINE_RATE 10.3125 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 156.25 RX_ACTUAL_REFCLK_FREQUENCY 156.250000000000 RX_FRACN_OVRD false RX_FRACN_ENABLED false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 32 RX_INT_DATA_WIDTH 32 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXOUTCLKPMA RXPROGDIV_FREQ_ENABLE false RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 322.265625 RXRECCLK_FREQ_ENABLE false RXRECCLK_FREQ_VAL 0 INS_LOSS_NYQ 20 RX_EQ_MODE AUTO RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 0 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false TX_LANE_DESKEW_HDMI_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 6.1862627 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE TX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS { } LR2_SETTINGS { } LR3_SETTINGS { } LR4_SETTINGS { } LR5_SETTINGS { } LR6_SETTINGS { } LR7_SETTINGS { } LR8_SETTINGS { } LR9_SETTINGS { } LR10_SETTINGS { } LR11_SETTINGS { } LR12_SETTINGS { } LR13_SETTINGS { } LR14_SETTINGS { } LR15_SETTINGS { }" *) 
(* PROTO_IS_FABRIC_BRAMN_NEEDED = "1'b0" *) (* PROT_DUAL_OCCUPIED = "PROT0 BOTH" *) (* PWR_RX0_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
(* PWR_RX1_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) (* PWR_RX2_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) (* PWR_RX3_SETTINGS = "{LR0_SETTING {rx_data_rate=4.0,rx_pll_type=LCPLL,rx_user_data_width=64,rx_int_data_width=64,rx_data_encoding=64B66B_ASYNC,rx_eq_mode=LPM,rx_oob_en=false,rx_pam_sel=NRZ,}                }" *) 
(* PWR_RX_DEF_SETTINGS = "{LR0_SETTING {rx_data_rate=10.3125,rx_pll_type=LCPLL,rx_user_data_width=32,rx_int_data_width=32,rx_data_encoding=RAW,rx_eq_mode=AUTO,rx_oob_en=false,rx_pam_sel=NRZ,}}" *) (* PWR_TX0_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) (* PWR_TX1_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) 
(* PWR_TX2_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) (* PWR_TX3_SETTINGS = "{LR0_SETTING {tx_data_rate=4.0,tx_pll_type=LCPLL,tx_user_data_width=64,tx_int_data_width=64,tx_data_encoding=64B66B_ASYNC,tx_pam_sel=NRZ,}                }" *) (* PWR_TX_DEF_SETTINGS = "{LR0_SETTING {tx_data_rate=10.3125,tx_pll_type=LCPLL,tx_user_data_width=32,tx_int_data_width=32,tx_data_encoding=RAW,tx_pam_sel=NRZ,}}" *) 
(* QUAD_COMMON_SETTINGS = "mode full bonded true LANEUSAGE {PROT0 {group A rates 0 txrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 tx 0,1,2,3 rxrate PROT0.D1,PROT0.D1,PROT0.D1,PROT0.D1 rx 0,1,2,3}}" *) (* QUAD_INSTANTIATED = "1" *) (* QUAD_PACK = "" *) 
(* QUAD_SIM_MODE = "FAST" *) (* QUAD_SIM_RESET_SPEEDUP = "TRUE" *) (* QUAD_USAGE = "TX_QUAD_CH {TXQuad_0_/jesd204_phy/gt_quad_base_0 {/jesd204_phy/gt_quad_base_0 system_gt_bridge_ip_0_0.IP_CH0,system_gt_bridge_ip_0_0.IP_CH1,system_gt_bridge_ip_0_0.IP_CH2,system_gt_bridge_ip_0_0.IP_CH3 MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}} RX_QUAD_CH {RXQuad_0_/jesd204_phy/gt_quad_base_0 {/jesd204_phy/gt_quad_base_0 system_gt_bridge_ip_0_0.IP_CH0,system_gt_bridge_ip_0_0.IP_CH1,system_gt_bridge_ip_0_0.IP_CH2,system_gt_bridge_ip_0_0.IP_CH3 MSTRCLK 1,0,0,0 IS_CURRENT_QUAD 1}}" *) 
(* RCALBG0_CFG0 = "976" *) (* RCALBG0_CFG1 = "64" *) (* RCALBG0_CFG2 = "0" *) 
(* RCALBG0_CFG3 = "-2147483646" *) (* RCALBG0_CFG4 = "279" *) (* RCALBG0_CFG5 = "691" *) 
(* RCALBG1_CFG0 = "976" *) (* RCALBG1_CFG1 = "64" *) (* RCALBG1_CFG2 = "0" *) 
(* RCALBG1_CFG3 = "-2147483646" *) (* RCALBG1_CFG4 = "279" *) (* RCALBG1_CFG5 = "691" *) 
(* REFCLK_SEL = "HSCLK0_LCPLLGTREFCLK0 refclk_PROT0_R0_400_MHz_unique1 HSCLK1_LCPLLGTREFCLK0 refclk_PROT0_R0_400_MHz_unique1" *) (* RXRSTDONE_DIST_SEL = "269948722" *) (* SIM_DEVICE = "VERSAL_AI_CORE" *) 
(* SIM_VERSION = "2" *) (* STAT_NPI_REG_LIST = "3000:3004,3010:3014,3020:3024,3034:304C,3070:3098,30A8:30B4,30BC:30EC,30F4:3178,3180:3184,318C:3190,3198:31A4,31B0:31D8,31E0:31E8,31F0:3228,3230:3274,3280,3288,3294:329C,32A8:32AC,32B4,32BC:32E4,32FC,3430:3444,344C,3470:3498,34A8:34B4,34BC:34EC,34F4:3578,3580:3584,358C:3590,3598:35A4,35B0:35D8,35E0:35E8,35F0:3628,3630:3674,3680,3688,3694:369C,36A8:36AC,36B4,36BC:36E4,3834:383C,3848,3870:3898,38A8:38B4,38BC:38EC,38F4:3978,3980:3984,398C:3990,3998:39A4,39B0:39D8,39E0:39E8,39F0:3A28,3A30:3A74,3A80,3A88,3A94:3A9C,3AA8:3AAC,3AB4,3ABC:3AE4,3AFC,3C08,3C30:3C3C,3C48:3C4C,3C70:3C98,3CA8:3CB4,3CBC:3CEC,3CF4:3D78,3D80:3D84,3D8C:3D90,3D98:3DA4,3DB0:3DD8,3DE0:3DE8,3DF0:3E28,3E30:3E74,3E80,3E88,3E94:3E9C,3EA8:3EAC,3EB4,3EBC:3EE4" *) (* TERMPROG_CFG = "0" *) 
(* TLAST = "2'b10" *) (* TREADY = "2'b01" *) (* TXRSTDONE_DIST_SEL = "269948722" *) 
(* UB_CFG0 = "1933574144" *) (* keep_hierarchy = "soft" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_inst
   (apb3prdata,
    apb3pready,
    apb3pslverr,
    s_axi_lite_arready,
    s_axi_lite_rdata,
    s_axi_lite_rvalid,
    s_axi_lite_awready,
    s_axi_lite_wready,
    s_axi_lite_rresp,
    s_axi_lite_bresp,
    s_axi_lite_bvalid,
    ch0_bufgtce,
    ch0_bufgtcemask,
    ch0_bufgtdiv,
    ch0_bufgtrst,
    ch0_bufgtrstmask,
    ch0_cfokovrdrdy0,
    ch0_cfokovrdrdy1,
    ch0_dmonitorout,
    ch0_dmonitoroutclk,
    ch0_eyescandataerror,
    ch0_iloresetdone,
    ch0_pcsrsvdout,
    ch0_phyready,
    ch0_phystatus,
    ch0_pinrsvdas,
    ch0_resetexception,
    ch0_rx10gstat,
    ch0_rxbufstatus,
    ch0_rxbyteisaligned,
    ch0_rxbyterealign,
    ch0_rxcdrlock,
    ch0_rxcdrphdone,
    ch0_rxchanbondseq,
    ch0_rxchanisaligned,
    ch0_rxchanrealign,
    ch0_rxchbondo,
    ch0_rxclkcorcnt,
    ch0_rxcominitdet,
    ch0_rxcommadet,
    ch0_rxcomsasdet,
    ch0_rxcomwakedet,
    ch0_rxctrl0,
    ch0_rxctrl1,
    ch0_rxctrl2,
    ch0_rxctrl3,
    ch0_rxdata,
    ch0_rxdataextendrsvd,
    ch0_rxdatavalid,
    ch0_rxdccdone,
    ch0_rxdlyalignerr,
    ch0_rxdlyalignprog,
    ch0_rxelecidle,
    ch0_rxfinealigndone,
    ch0_rxheader,
    ch0_rxheadervalid,
    ch0_rxosintdone,
    ch0_rxosintstarted,
    ch0_rxosintstrobedone,
    ch0_rxosintstrobestarted,
    ch0_rxoutclk,
    ch0_rxphaligndone,
    ch0_rxphalignerr,
    ch0_rxphdlyresetdone,
    ch0_rxphsetinitdone,
    ch0_rxphshift180done,
    ch0_rxpmaresetdone,
    ch0_rxprbserr,
    ch0_rxprbslocked,
    ch0_rxprogdivresetdone,
    ch0_rxresetdone,
    ch0_rxsliderdy,
    ch0_rxstartofseq,
    ch0_rxstatus,
    ch0_rxsyncdone,
    ch0_rxvalid,
    ch0_tx10gstat,
    ch0_txbufstatus,
    ch0_txcomfinish,
    ch0_txdccdone,
    ch0_txdlyalignerr,
    ch0_txdlyalignprog,
    ch0_txoutclk,
    ch0_txphaligndone,
    ch0_txphalignerr,
    ch0_txphalignoutrsvd,
    ch0_txphdlyresetdone,
    ch0_txphsetinitdone,
    ch0_txphshift180done,
    ch0_txpmaresetdone,
    ch0_txprogdivresetdone,
    ch0_txresetdone,
    ch0_txsyncdone,
    ch1_bufgtce,
    ch1_bufgtcemask,
    ch1_bufgtdiv,
    ch1_bufgtrst,
    ch1_bufgtrstmask,
    ch1_cfokovrdrdy0,
    ch1_cfokovrdrdy1,
    ch1_dmonitorout,
    ch1_dmonitoroutclk,
    ch1_eyescandataerror,
    ch1_iloresetdone,
    ch1_pcsrsvdout,
    ch1_phyready,
    ch1_phystatus,
    ch1_pinrsvdas,
    ch1_resetexception,
    ch1_rx10gstat,
    ch1_rxbufstatus,
    ch1_rxbyteisaligned,
    ch1_rxbyterealign,
    ch1_rxcdrlock,
    ch1_rxcdrphdone,
    ch1_rxchanbondseq,
    ch1_rxchanisaligned,
    ch1_rxchanrealign,
    ch1_rxchbondo,
    ch1_rxclkcorcnt,
    ch1_rxcominitdet,
    ch1_rxcommadet,
    ch1_rxcomsasdet,
    ch1_rxcomwakedet,
    ch1_rxctrl0,
    ch1_rxctrl1,
    ch1_rxctrl2,
    ch1_rxctrl3,
    ch1_rxdata,
    ch1_rxdataextendrsvd,
    ch1_rxdatavalid,
    ch1_rxdccdone,
    ch1_rxdlyalignerr,
    ch1_rxdlyalignprog,
    ch1_rxelecidle,
    ch1_rxfinealigndone,
    ch1_rxheader,
    ch1_rxheadervalid,
    ch1_rxosintdone,
    ch1_rxosintstarted,
    ch1_rxosintstrobedone,
    ch1_rxosintstrobestarted,
    ch1_rxoutclk,
    ch1_rxphaligndone,
    ch1_rxphalignerr,
    ch1_rxphdlyresetdone,
    ch1_rxphsetinitdone,
    ch1_rxphshift180done,
    ch1_rxpmaresetdone,
    ch1_rxprbserr,
    ch1_rxprbslocked,
    ch1_rxprogdivresetdone,
    ch1_rxresetdone,
    ch1_rxsliderdy,
    ch1_rxstartofseq,
    ch1_rxstatus,
    ch1_rxsyncdone,
    ch1_rxvalid,
    ch1_tx10gstat,
    ch1_txbufstatus,
    ch1_txcomfinish,
    ch1_txdccdone,
    ch1_txdlyalignerr,
    ch1_txdlyalignprog,
    ch1_txoutclk,
    ch1_txphaligndone,
    ch1_txphalignerr,
    ch1_txphalignoutrsvd,
    ch1_txphdlyresetdone,
    ch1_txphsetinitdone,
    ch1_txphshift180done,
    ch1_txpmaresetdone,
    ch1_txprogdivresetdone,
    ch1_txresetdone,
    ch1_txsyncdone,
    ch2_bufgtce,
    ch2_bufgtcemask,
    ch2_bufgtdiv,
    ch2_bufgtrst,
    ch2_bufgtrstmask,
    ch2_cfokovrdrdy0,
    ch2_cfokovrdrdy1,
    ch2_dmonitorout,
    ch2_dmonitoroutclk,
    ch2_eyescandataerror,
    ch2_iloresetdone,
    ch2_pcsrsvdout,
    ch2_phyready,
    ch2_phystatus,
    ch2_pinrsvdas,
    ch2_resetexception,
    ch2_rx10gstat,
    ch2_rxbufstatus,
    ch2_rxbyteisaligned,
    ch2_rxbyterealign,
    ch2_rxcdrlock,
    ch2_rxcdrphdone,
    ch2_rxchanbondseq,
    ch2_rxchanisaligned,
    ch2_rxchanrealign,
    ch2_rxchbondo,
    ch2_rxclkcorcnt,
    ch2_rxcominitdet,
    ch2_rxcommadet,
    ch2_rxcomsasdet,
    ch2_rxcomwakedet,
    ch2_rxctrl0,
    ch2_rxctrl1,
    ch2_rxctrl2,
    ch2_rxctrl3,
    ch2_rxdata,
    ch2_rxdataextendrsvd,
    ch2_rxdatavalid,
    ch2_rxdccdone,
    ch2_rxdlyalignerr,
    ch2_rxdlyalignprog,
    ch2_rxelecidle,
    ch2_rxfinealigndone,
    ch2_rxheader,
    ch2_rxheadervalid,
    ch2_rxosintdone,
    ch2_rxosintstarted,
    ch2_rxosintstrobedone,
    ch2_rxosintstrobestarted,
    ch2_rxoutclk,
    ch2_rxphaligndone,
    ch2_rxphalignerr,
    ch2_rxphdlyresetdone,
    ch2_rxphsetinitdone,
    ch2_rxphshift180done,
    ch2_rxpmaresetdone,
    ch2_rxprbserr,
    ch2_rxprbslocked,
    ch2_rxprogdivresetdone,
    ch2_rxresetdone,
    ch2_rxsliderdy,
    ch2_rxstartofseq,
    ch2_rxstatus,
    ch2_rxsyncdone,
    ch2_rxvalid,
    ch2_tx10gstat,
    ch2_txbufstatus,
    ch2_txcomfinish,
    ch2_txdccdone,
    ch2_txdlyalignerr,
    ch2_txdlyalignprog,
    ch2_txoutclk,
    ch2_txphaligndone,
    ch2_txphalignerr,
    ch2_txphalignoutrsvd,
    ch2_txphdlyresetdone,
    ch2_txphsetinitdone,
    ch2_txphshift180done,
    ch2_txpmaresetdone,
    ch2_txprogdivresetdone,
    ch2_txresetdone,
    ch2_txsyncdone,
    ch3_bufgtce,
    ch3_bufgtcemask,
    ch3_bufgtdiv,
    ch3_bufgtrst,
    ch3_bufgtrstmask,
    ch3_cfokovrdrdy0,
    ch3_cfokovrdrdy1,
    ch3_dmonitorout,
    ch3_dmonitoroutclk,
    ch3_eyescandataerror,
    ch3_iloresetdone,
    ch3_pcsrsvdout,
    ch3_phyready,
    ch3_phystatus,
    ch3_pinrsvdas,
    ch3_resetexception,
    ch3_rx10gstat,
    ch3_rxbufstatus,
    ch3_rxbyteisaligned,
    ch3_rxbyterealign,
    ch3_rxcdrlock,
    ch3_rxcdrphdone,
    ch3_rxchanbondseq,
    ch3_rxchanisaligned,
    ch3_rxchanrealign,
    ch3_rxchbondo,
    ch3_rxclkcorcnt,
    ch3_rxcominitdet,
    ch3_rxcommadet,
    ch3_rxcomsasdet,
    ch3_rxcomwakedet,
    ch3_rxctrl0,
    ch3_rxctrl1,
    ch3_rxctrl2,
    ch3_rxctrl3,
    ch3_rxdata,
    ch3_rxdataextendrsvd,
    ch3_rxdatavalid,
    ch3_rxdccdone,
    ch3_rxdlyalignerr,
    ch3_rxdlyalignprog,
    ch3_rxelecidle,
    ch3_rxfinealigndone,
    ch3_rxheader,
    ch3_rxheadervalid,
    ch3_rxosintdone,
    ch3_rxosintstarted,
    ch3_rxosintstrobedone,
    ch3_rxosintstrobestarted,
    ch3_rxoutclk,
    ch3_rxphaligndone,
    ch3_rxphalignerr,
    ch3_rxphdlyresetdone,
    ch3_rxphsetinitdone,
    ch3_rxphshift180done,
    ch3_rxpmaresetdone,
    ch3_rxprbserr,
    ch3_rxprbslocked,
    ch3_rxprogdivresetdone,
    ch3_rxresetdone,
    ch3_rxsliderdy,
    ch3_rxstartofseq,
    ch3_rxstatus,
    ch3_rxsyncdone,
    ch3_rxvalid,
    ch3_tx10gstat,
    ch3_txbufstatus,
    ch3_txcomfinish,
    ch3_txdccdone,
    ch3_txdlyalignerr,
    ch3_txdlyalignprog,
    ch3_txoutclk,
    ch3_txphaligndone,
    ch3_txphalignerr,
    ch3_txphalignoutrsvd,
    ch3_txphdlyresetdone,
    ch3_txphsetinitdone,
    ch3_txphshift180done,
    ch3_txpmaresetdone,
    ch3_txprogdivresetdone,
    ch3_txresetdone,
    ch3_txsyncdone,
    correcterr,
    ctrlrsvdout,
    debugtracetdata,
    debugtracetvalid,
    gpo,
    gtpowergood,
    hsclk0_lcpllfbclklost,
    hsclk0_lcplllock,
    hsclk0_lcpllrefclklost,
    hsclk0_lcpllrefclkmonitor,
    hsclk0_lcpllrsvdout,
    hsclk0_rpllfbclklost,
    hsclk0_rplllock,
    hsclk0_rpllrefclklost,
    hsclk0_rpllrefclkmonitor,
    hsclk0_rpllrsvdout,
    hsclk0_rxrecclkout0,
    hsclk0_rxrecclkout1,
    hsclk0_rxrecclksel,
    hsclk1_lcpllfbclklost,
    hsclk1_lcplllock,
    hsclk1_lcpllrefclklost,
    hsclk1_lcpllrefclkmonitor,
    hsclk1_lcpllrsvdout,
    hsclk1_rpllfbclklost,
    hsclk1_rplllock,
    hsclk1_rpllrefclklost,
    hsclk1_rpllrefclkmonitor,
    hsclk1_rpllrsvdout,
    hsclk1_rxrecclkout0,
    hsclk1_rxrecclkout1,
    hsclk1_rxrecclksel,
    pipenorthout,
    pipesouthout,
    refclk0_clktestsigint,
    refclk0_gtrefclkpdint,
    refclk1_clktestsigint,
    refclk1_gtrefclkpdint,
    resetdone_northout,
    resetdone_southout,
    rxmarginreqack,
    rxmarginrescmd,
    rxmarginreslanenum,
    rxmarginrespayld,
    rxmarginresreq,
    rxpinorthout,
    rxpisouthout,
    trigackin0,
    trigout0,
    txpinorthout,
    txpisouthout,
    ubinterrupt,
    ubtxuart,
    uncorrecterr,
    altclk,
    apb3clk,
    apb3paddr,
    apb3penable,
    apb3presetn,
    apb3psel,
    apb3pwdata,
    apb3pwrite,
    s_axi_lite_clk,
    s_axi_lite_resetn,
    s_axi_lite_araddr,
    s_axi_lite_arvalid,
    s_axi_lite_rready,
    s_axi_lite_awaddr,
    s_axi_lite_awvalid,
    s_axi_lite_wdata,
    s_axi_lite_wvalid,
    s_axi_lite_bready,
    bgbypassb,
    bgmonitorenb,
    bgpdb,
    bgrcalovrd,
    bgrcalovrdenb,
    ch0_cdrbmcdrreq,
    ch0_cdrfreqos,
    ch0_cdrincpctrl,
    ch0_cdrstepdir,
    ch0_cdrstepsq,
    ch0_cdrstepsx,
    ch0_cfokovrdfinish,
    ch0_cfokovrdpulse,
    ch0_cfokovrdstart,
    ch0_clkrsvd0,
    ch0_clkrsvd1,
    ch0_dmonfiforeset,
    ch0_dmonitorclk,
    ch0_eyescanreset,
    ch0_eyescantrigger,
    ch0_gtrsvd,
    ch0_gtrxreset,
    ch0_gttxreset,
    ch0_hsdppcsreset,
    ch0_iloreset,
    ch0_iloresetmask,
    ch0_loopback,
    ch0_pcierstb,
    ch0_phyesmadaptsave,
    ch0_rxcdrhold,
    ch0_rxcdrovrden,
    ch0_rxcdrreset,
    ch0_rxchbondi,
    ch0_rxdapicodeovrden,
    ch0_rxdapicodereset,
    ch0_rxdlyalignreq,
    ch0_rxeqtraining,
    ch0_rxgearboxslip,
    ch0_rxlatclk,
    ch0_rxlpmen,
    ch0_rxmldchaindone,
    ch0_rxmldchainreq,
    ch0_rxmlfinealignreq,
    ch0_rxoobreset,
    ch0_rxpcsresetmask,
    ch0_rxpd,
    ch0_rxphalignreq,
    ch0_rxphalignresetmask,
    ch0_rxphdlypd,
    ch0_rxphdlyreset,
    ch0_rxphsetinitreq,
    ch0_rxphshift180,
    ch0_rxpmaresetmask,
    ch0_rxpolarity,
    ch0_rxprbscntreset,
    ch0_rxprbssel,
    ch0_rxprogdivreset,
    ch0_rxrate,
    ch0_rxresetmode,
    ch0_rxslide,
    ch0_rxsyncallin,
    ch0_rxtermination,
    ch0_rxuserrdy,
    ch0_rxusrclk,
    ch0_tstin,
    ch0_txcominit,
    ch0_txcomsas,
    ch0_txcomwake,
    ch0_txctrl0,
    ch0_txctrl1,
    ch0_txctrl2,
    ch0_txdapicodeovrden,
    ch0_txdapicodereset,
    ch0_txdata,
    ch0_txdataextendrsvd,
    ch0_txdeemph,
    ch0_txdetectrx,
    ch0_txdiffctrl,
    ch0_txdlyalignreq,
    ch0_txelecidle,
    ch0_txheader,
    ch0_txinhibit,
    ch0_txlatclk,
    ch0_txmaincursor,
    ch0_txmargin,
    ch0_txmldchaindone,
    ch0_txmldchainreq,
    ch0_txoneszeros,
    ch0_txpausedelayalign,
    ch0_txpcsresetmask,
    ch0_txpd,
    ch0_txphalignreq,
    ch0_txphalignresetmask,
    ch0_txphdlypd,
    ch0_txphdlyreset,
    ch0_txphdlytstclk,
    ch0_txphsetinitreq,
    ch0_txphshift180,
    ch0_txpicodeovrden,
    ch0_txpicodereset,
    ch0_txpippmen,
    ch0_txpippmstepsize,
    ch0_txpisopd,
    ch0_txpmaresetmask,
    ch0_txpolarity,
    ch0_txpostcursor,
    ch0_txprbsforceerr,
    ch0_txprbssel,
    ch0_txprecursor,
    ch0_txprogdivreset,
    ch0_txrate,
    ch0_txresetmode,
    ch0_txsequence,
    ch0_txswing,
    ch0_txsyncallin,
    ch0_txuserrdy,
    ch0_txusrclk,
    ch1_cdrbmcdrreq,
    ch1_cdrfreqos,
    ch1_cdrincpctrl,
    ch1_cdrstepdir,
    ch1_cdrstepsq,
    ch1_cdrstepsx,
    ch1_cfokovrdfinish,
    ch1_cfokovrdpulse,
    ch1_cfokovrdstart,
    ch1_clkrsvd0,
    ch1_clkrsvd1,
    ch1_dmonfiforeset,
    ch1_dmonitorclk,
    ch1_eyescanreset,
    ch1_eyescantrigger,
    ch1_gtrsvd,
    ch1_gtrxreset,
    ch1_gttxreset,
    ch1_hsdppcsreset,
    ch1_iloreset,
    ch1_iloresetmask,
    ch1_loopback,
    ch1_pcierstb,
    ch1_phyesmadaptsave,
    ch1_rxcdrhold,
    ch1_rxcdrovrden,
    ch1_rxcdrreset,
    ch1_rxchbondi,
    ch1_rxdapicodeovrden,
    ch1_rxdapicodereset,
    ch1_rxdlyalignreq,
    ch1_rxeqtraining,
    ch1_rxgearboxslip,
    ch1_rxlatclk,
    ch1_rxlpmen,
    ch1_rxmldchaindone,
    ch1_rxmldchainreq,
    ch1_rxmlfinealignreq,
    ch1_rxoobreset,
    ch1_rxpcsresetmask,
    ch1_rxpd,
    ch1_rxphalignreq,
    ch1_rxphalignresetmask,
    ch1_rxphdlypd,
    ch1_rxphdlyreset,
    ch1_rxphsetinitreq,
    ch1_rxphshift180,
    ch1_rxpmaresetmask,
    ch1_rxpolarity,
    ch1_rxprbscntreset,
    ch1_rxprbssel,
    ch1_rxprogdivreset,
    ch1_rxrate,
    ch1_rxresetmode,
    ch1_rxslide,
    ch1_rxsyncallin,
    ch1_rxtermination,
    ch1_rxuserrdy,
    ch1_rxusrclk,
    ch1_tstin,
    ch1_txcominit,
    ch1_txcomsas,
    ch1_txcomwake,
    ch1_txctrl0,
    ch1_txctrl1,
    ch1_txctrl2,
    ch1_txdapicodeovrden,
    ch1_txdapicodereset,
    ch1_txdata,
    ch1_txdataextendrsvd,
    ch1_txdeemph,
    ch1_txdetectrx,
    ch1_txdiffctrl,
    ch1_txdlyalignreq,
    ch1_txelecidle,
    ch1_txheader,
    ch1_txinhibit,
    ch1_txlatclk,
    ch1_txmaincursor,
    ch1_txmargin,
    ch1_txmldchaindone,
    ch1_txmldchainreq,
    ch1_txoneszeros,
    ch1_txpausedelayalign,
    ch1_txpcsresetmask,
    ch1_txpd,
    ch1_txphalignreq,
    ch1_txphalignresetmask,
    ch1_txphdlypd,
    ch1_txphdlyreset,
    ch1_txphdlytstclk,
    ch1_txphsetinitreq,
    ch1_txphshift180,
    ch1_txpicodeovrden,
    ch1_txpicodereset,
    ch1_txpippmen,
    ch1_txpippmstepsize,
    ch1_txpisopd,
    ch1_txpmaresetmask,
    ch1_txpolarity,
    ch1_txpostcursor,
    ch1_txprbsforceerr,
    ch1_txprbssel,
    ch1_txprecursor,
    ch1_txprogdivreset,
    ch1_txrate,
    ch1_txresetmode,
    ch1_txsequence,
    ch1_txswing,
    ch1_txsyncallin,
    ch1_txuserrdy,
    ch1_txusrclk,
    ch2_cdrbmcdrreq,
    ch2_cdrfreqos,
    ch2_cdrincpctrl,
    ch2_cdrstepdir,
    ch2_cdrstepsq,
    ch2_cdrstepsx,
    ch2_cfokovrdfinish,
    ch2_cfokovrdpulse,
    ch2_cfokovrdstart,
    ch2_clkrsvd0,
    ch2_clkrsvd1,
    ch2_dmonfiforeset,
    ch2_dmonitorclk,
    ch2_eyescanreset,
    ch2_eyescantrigger,
    ch2_gtrsvd,
    ch2_gtrxreset,
    ch2_gttxreset,
    ch2_hsdppcsreset,
    ch2_iloreset,
    ch2_iloresetmask,
    ch2_loopback,
    ch2_pcierstb,
    ch2_phyesmadaptsave,
    ch2_rxcdrhold,
    ch2_rxcdrovrden,
    ch2_rxcdrreset,
    ch2_rxchbondi,
    ch2_rxdapicodeovrden,
    ch2_rxdapicodereset,
    ch2_rxdlyalignreq,
    ch2_rxeqtraining,
    ch2_rxgearboxslip,
    ch2_rxlatclk,
    ch2_rxlpmen,
    ch2_rxmldchaindone,
    ch2_rxmldchainreq,
    ch2_rxmlfinealignreq,
    ch2_rxoobreset,
    ch2_rxpcsresetmask,
    ch2_rxpd,
    ch2_rxphalignreq,
    ch2_rxphalignresetmask,
    ch2_rxphdlypd,
    ch2_rxphdlyreset,
    ch2_rxphsetinitreq,
    ch2_rxphshift180,
    ch2_rxpmaresetmask,
    ch2_rxpolarity,
    ch2_rxprbscntreset,
    ch2_rxprbssel,
    ch2_rxprogdivreset,
    ch2_rxrate,
    ch2_rxresetmode,
    ch2_rxslide,
    ch2_rxsyncallin,
    ch2_rxtermination,
    ch2_rxuserrdy,
    ch2_rxusrclk,
    ch2_tstin,
    ch2_txcominit,
    ch2_txcomsas,
    ch2_txcomwake,
    ch2_txctrl0,
    ch2_txctrl1,
    ch2_txctrl2,
    ch2_txdapicodeovrden,
    ch2_txdapicodereset,
    ch2_txdata,
    ch2_txdataextendrsvd,
    ch2_txdeemph,
    ch2_txdetectrx,
    ch2_txdiffctrl,
    ch2_txdlyalignreq,
    ch2_txelecidle,
    ch2_txheader,
    ch2_txinhibit,
    ch2_txlatclk,
    ch2_txmaincursor,
    ch2_txmargin,
    ch2_txmldchaindone,
    ch2_txmldchainreq,
    ch2_txoneszeros,
    ch2_txpausedelayalign,
    ch2_txpcsresetmask,
    ch2_txpd,
    ch2_txphalignreq,
    ch2_txphalignresetmask,
    ch2_txphdlypd,
    ch2_txphdlyreset,
    ch2_txphdlytstclk,
    ch2_txphsetinitreq,
    ch2_txphshift180,
    ch2_txpicodeovrden,
    ch2_txpicodereset,
    ch2_txpippmen,
    ch2_txpippmstepsize,
    ch2_txpisopd,
    ch2_txpmaresetmask,
    ch2_txpolarity,
    ch2_txpostcursor,
    ch2_txprbsforceerr,
    ch2_txprbssel,
    ch2_txprecursor,
    ch2_txprogdivreset,
    ch2_txrate,
    ch2_txresetmode,
    ch2_txsequence,
    ch2_txswing,
    ch2_txsyncallin,
    ch2_txuserrdy,
    ch2_txusrclk,
    ch3_cdrbmcdrreq,
    ch3_cdrfreqos,
    ch3_cdrincpctrl,
    ch3_cdrstepdir,
    ch3_cdrstepsq,
    ch3_cdrstepsx,
    ch3_cfokovrdfinish,
    ch3_cfokovrdpulse,
    ch3_cfokovrdstart,
    ch3_clkrsvd0,
    ch3_clkrsvd1,
    ch3_dmonfiforeset,
    ch3_dmonitorclk,
    ch3_eyescanreset,
    ch3_eyescantrigger,
    ch3_gtrsvd,
    ch3_gtrxreset,
    ch3_gttxreset,
    ch3_hsdppcsreset,
    ch3_iloreset,
    ch3_iloresetmask,
    ch3_loopback,
    ch3_pcierstb,
    ch3_phyesmadaptsave,
    ch3_rxcdrhold,
    ch3_rxcdrovrden,
    ch3_rxcdrreset,
    ch3_rxchbondi,
    ch3_rxdapicodeovrden,
    ch3_rxdapicodereset,
    ch3_rxdlyalignreq,
    ch3_rxeqtraining,
    ch3_rxgearboxslip,
    ch3_rxlatclk,
    ch3_rxlpmen,
    ch3_rxmldchaindone,
    ch3_rxmldchainreq,
    ch3_rxmlfinealignreq,
    ch3_rxoobreset,
    ch3_rxpcsresetmask,
    ch3_rxpd,
    ch3_rxphalignreq,
    ch3_rxphalignresetmask,
    ch3_rxphdlypd,
    ch3_rxphdlyreset,
    ch3_rxphsetinitreq,
    ch3_rxphshift180,
    ch3_rxpmaresetmask,
    ch3_rxpolarity,
    ch3_rxprbscntreset,
    ch3_rxprbssel,
    ch3_rxprogdivreset,
    ch3_rxrate,
    ch3_rxresetmode,
    ch3_rxslide,
    ch3_rxsyncallin,
    ch3_rxtermination,
    ch3_rxuserrdy,
    ch3_rxusrclk,
    ch3_tstin,
    ch3_txcominit,
    ch3_txcomsas,
    ch3_txcomwake,
    ch3_txctrl0,
    ch3_txctrl1,
    ch3_txctrl2,
    ch3_txdapicodeovrden,
    ch3_txdapicodereset,
    ch3_txdata,
    ch3_txdataextendrsvd,
    ch3_txdeemph,
    ch3_txdetectrx,
    ch3_txdiffctrl,
    ch3_txdlyalignreq,
    ch3_txelecidle,
    ch3_txheader,
    ch3_txinhibit,
    ch3_txlatclk,
    ch3_txmaincursor,
    ch3_txmargin,
    ch3_txmldchaindone,
    ch3_txmldchainreq,
    ch3_txoneszeros,
    ch3_txpausedelayalign,
    ch3_txpcsresetmask,
    ch3_txpd,
    ch3_txphalignreq,
    ch3_txphalignresetmask,
    ch3_txphdlypd,
    ch3_txphdlyreset,
    ch3_txphdlytstclk,
    ch3_txphsetinitreq,
    ch3_txphshift180,
    ch3_txpicodeovrden,
    ch3_txpicodereset,
    ch3_txpippmen,
    ch3_txpippmstepsize,
    ch3_txpisopd,
    ch3_txpmaresetmask,
    ch3_txpolarity,
    ch3_txpostcursor,
    ch3_txprbsforceerr,
    ch3_txprbssel,
    ch3_txprecursor,
    ch3_txprogdivreset,
    ch3_txrate,
    ch3_txresetmode,
    ch3_txsequence,
    ch3_txswing,
    ch3_txsyncallin,
    ch3_txuserrdy,
    ch3_txusrclk,
    ctrlrsvdin0,
    ctrlrsvdin1,
    debugtraceclk,
    debugtraceready,
    gpi,
    hsclk0_lcpllclkrsvd0,
    hsclk0_lcpllclkrsvd1,
    hsclk0_lcpllfbdiv,
    hsclk0_lcpllgtgrefclk,
    hsclk0_lcpllpd,
    hsclk0_lcpllrefclksel,
    hsclk0_lcpllreset,
    hsclk0_lcpllresetbypassmode,
    hsclk0_lcpllresetmask,
    hsclk0_lcpllrsvd0,
    hsclk0_lcpllrsvd1,
    hsclk0_lcpllsdmdata,
    hsclk0_lcpllsdmtoggle,
    hsclk0_rpllclkrsvd0,
    hsclk0_rpllclkrsvd1,
    hsclk0_rpllfbdiv,
    hsclk0_rpllgtgrefclk,
    hsclk0_rpllpd,
    hsclk0_rpllrefclksel,
    hsclk0_rpllreset,
    hsclk0_rpllresetbypassmode,
    hsclk0_rpllresetmask,
    hsclk0_rpllrsvd0,
    hsclk0_rpllrsvd1,
    hsclk0_rpllsdmdata,
    hsclk0_rpllsdmtoggle,
    hsclk1_lcpllclkrsvd0,
    hsclk1_lcpllclkrsvd1,
    hsclk1_lcpllfbdiv,
    hsclk1_lcpllgtgrefclk,
    hsclk1_lcpllpd,
    hsclk1_lcpllrefclksel,
    hsclk1_lcpllreset,
    hsclk1_lcpllresetbypassmode,
    hsclk1_lcpllresetmask,
    hsclk1_lcpllrsvd0,
    hsclk1_lcpllrsvd1,
    hsclk1_lcpllsdmdata,
    hsclk1_lcpllsdmtoggle,
    hsclk1_rpllclkrsvd0,
    hsclk1_rpllclkrsvd1,
    hsclk1_rpllfbdiv,
    hsclk1_rpllgtgrefclk,
    hsclk1_rpllpd,
    hsclk1_rpllrefclksel,
    hsclk1_rpllreset,
    hsclk1_rpllresetbypassmode,
    hsclk1_rpllresetmask,
    hsclk1_rpllrsvd0,
    hsclk1_rpllrsvd1,
    hsclk1_rpllsdmdata,
    hsclk1_rpllsdmtoggle,
    pcielinkreachtarget,
    pcieltssm,
    pipenorthin,
    pipesouthin,
    rcalenb,
    refclk0_clktestsig,
    refclk0_gtrefclkpd,
    refclk1_clktestsig,
    refclk1_gtrefclkpd,
    resetdone_northin,
    resetdone_southin,
    rxmarginclk,
    rxmarginreqcmd,
    rxmarginreqlanenum,
    rxmarginreqpayld,
    rxmarginreqreq,
    rxmarginresack,
    rxpinorthin,
    rxpisouthin,
    trigackout0,
    trigin0,
    txpinorthin,
    txpisouthin,
    ubenable,
    ubintr,
    ubiolmbrst,
    ubmbrst,
    ubrxuart,
    ch0_pcsrsvdin,
    ch1_pcsrsvdin,
    ch2_pcsrsvdin,
    ch3_pcsrsvdin,
    GT_REFCLK0,
    rxp,
    rxn,
    txp,
    txn,
    ch0_rxmstdatapathreset,
    ch1_rxmstdatapathreset,
    ch2_rxmstdatapathreset,
    ch3_rxmstdatapathreset,
    ch0_txmstdatapathreset,
    ch1_txmstdatapathreset,
    ch2_txmstdatapathreset,
    ch3_txmstdatapathreset,
    ch0_rxmstreset,
    ch1_rxmstreset,
    ch2_rxmstreset,
    ch3_rxmstreset,
    ch0_rxmstresetdone,
    ch1_rxmstresetdone,
    ch2_rxmstresetdone,
    ch3_rxmstresetdone,
    ch0_txmstreset,
    ch1_txmstreset,
    ch2_txmstreset,
    ch3_txmstreset,
    ch0_txmstresetdone,
    ch1_txmstresetdone,
    ch2_txmstresetdone,
    ch3_txmstresetdone);
  output [31:0]apb3prdata;
  output apb3pready;
  output apb3pslverr;
  output s_axi_lite_arready;
  output [31:0]s_axi_lite_rdata;
  output s_axi_lite_rvalid;
  output s_axi_lite_awready;
  output s_axi_lite_wready;
  output [1:0]s_axi_lite_rresp;
  output [1:0]s_axi_lite_bresp;
  output s_axi_lite_bvalid;
  output ch0_bufgtce;
  output [3:0]ch0_bufgtcemask;
  output [11:0]ch0_bufgtdiv;
  output ch0_bufgtrst;
  output [3:0]ch0_bufgtrstmask;
  output ch0_cfokovrdrdy0;
  output ch0_cfokovrdrdy1;
  output [31:0]ch0_dmonitorout;
  output ch0_dmonitoroutclk;
  output ch0_eyescandataerror;
  output ch0_iloresetdone;
  output [15:0]ch0_pcsrsvdout;
  output ch0_phyready;
  output ch0_phystatus;
  output [15:0]ch0_pinrsvdas;
  output ch0_resetexception;
  output [7:0]ch0_rx10gstat;
  output [2:0]ch0_rxbufstatus;
  output ch0_rxbyteisaligned;
  output ch0_rxbyterealign;
  output ch0_rxcdrlock;
  output ch0_rxcdrphdone;
  output ch0_rxchanbondseq;
  output ch0_rxchanisaligned;
  output ch0_rxchanrealign;
  output [4:0]ch0_rxchbondo;
  output [1:0]ch0_rxclkcorcnt;
  output ch0_rxcominitdet;
  output ch0_rxcommadet;
  output ch0_rxcomsasdet;
  output ch0_rxcomwakedet;
  output [15:0]ch0_rxctrl0;
  output [15:0]ch0_rxctrl1;
  output [7:0]ch0_rxctrl2;
  output [7:0]ch0_rxctrl3;
  output [127:0]ch0_rxdata;
  output [7:0]ch0_rxdataextendrsvd;
  output [1:0]ch0_rxdatavalid;
  output ch0_rxdccdone;
  output ch0_rxdlyalignerr;
  output ch0_rxdlyalignprog;
  output ch0_rxelecidle;
  output ch0_rxfinealigndone;
  output [5:0]ch0_rxheader;
  output [1:0]ch0_rxheadervalid;
  output ch0_rxosintdone;
  output ch0_rxosintstarted;
  output ch0_rxosintstrobedone;
  output ch0_rxosintstrobestarted;
  output ch0_rxoutclk;
  output ch0_rxphaligndone;
  output ch0_rxphalignerr;
  output ch0_rxphdlyresetdone;
  output ch0_rxphsetinitdone;
  output ch0_rxphshift180done;
  output ch0_rxpmaresetdone;
  output ch0_rxprbserr;
  output ch0_rxprbslocked;
  output ch0_rxprogdivresetdone;
  output ch0_rxresetdone;
  output ch0_rxsliderdy;
  output [1:0]ch0_rxstartofseq;
  output [2:0]ch0_rxstatus;
  output ch0_rxsyncdone;
  output ch0_rxvalid;
  output ch0_tx10gstat;
  output [1:0]ch0_txbufstatus;
  output ch0_txcomfinish;
  output ch0_txdccdone;
  output ch0_txdlyalignerr;
  output ch0_txdlyalignprog;
  output ch0_txoutclk;
  output ch0_txphaligndone;
  output ch0_txphalignerr;
  output ch0_txphalignoutrsvd;
  output ch0_txphdlyresetdone;
  output ch0_txphsetinitdone;
  output ch0_txphshift180done;
  output ch0_txpmaresetdone;
  output ch0_txprogdivresetdone;
  output ch0_txresetdone;
  output ch0_txsyncdone;
  output ch1_bufgtce;
  output [3:0]ch1_bufgtcemask;
  output [11:0]ch1_bufgtdiv;
  output ch1_bufgtrst;
  output [3:0]ch1_bufgtrstmask;
  output ch1_cfokovrdrdy0;
  output ch1_cfokovrdrdy1;
  output [31:0]ch1_dmonitorout;
  output ch1_dmonitoroutclk;
  output ch1_eyescandataerror;
  output ch1_iloresetdone;
  output [15:0]ch1_pcsrsvdout;
  output ch1_phyready;
  output ch1_phystatus;
  output [15:0]ch1_pinrsvdas;
  output ch1_resetexception;
  output [7:0]ch1_rx10gstat;
  output [2:0]ch1_rxbufstatus;
  output ch1_rxbyteisaligned;
  output ch1_rxbyterealign;
  output ch1_rxcdrlock;
  output ch1_rxcdrphdone;
  output ch1_rxchanbondseq;
  output ch1_rxchanisaligned;
  output ch1_rxchanrealign;
  output [4:0]ch1_rxchbondo;
  output [1:0]ch1_rxclkcorcnt;
  output ch1_rxcominitdet;
  output ch1_rxcommadet;
  output ch1_rxcomsasdet;
  output ch1_rxcomwakedet;
  output [15:0]ch1_rxctrl0;
  output [15:0]ch1_rxctrl1;
  output [7:0]ch1_rxctrl2;
  output [7:0]ch1_rxctrl3;
  output [127:0]ch1_rxdata;
  output [7:0]ch1_rxdataextendrsvd;
  output [1:0]ch1_rxdatavalid;
  output ch1_rxdccdone;
  output ch1_rxdlyalignerr;
  output ch1_rxdlyalignprog;
  output ch1_rxelecidle;
  output ch1_rxfinealigndone;
  output [5:0]ch1_rxheader;
  output [1:0]ch1_rxheadervalid;
  output ch1_rxosintdone;
  output ch1_rxosintstarted;
  output ch1_rxosintstrobedone;
  output ch1_rxosintstrobestarted;
  output ch1_rxoutclk;
  output ch1_rxphaligndone;
  output ch1_rxphalignerr;
  output ch1_rxphdlyresetdone;
  output ch1_rxphsetinitdone;
  output ch1_rxphshift180done;
  output ch1_rxpmaresetdone;
  output ch1_rxprbserr;
  output ch1_rxprbslocked;
  output ch1_rxprogdivresetdone;
  output ch1_rxresetdone;
  output ch1_rxsliderdy;
  output [1:0]ch1_rxstartofseq;
  output [2:0]ch1_rxstatus;
  output ch1_rxsyncdone;
  output ch1_rxvalid;
  output ch1_tx10gstat;
  output [1:0]ch1_txbufstatus;
  output ch1_txcomfinish;
  output ch1_txdccdone;
  output ch1_txdlyalignerr;
  output ch1_txdlyalignprog;
  output ch1_txoutclk;
  output ch1_txphaligndone;
  output ch1_txphalignerr;
  output ch1_txphalignoutrsvd;
  output ch1_txphdlyresetdone;
  output ch1_txphsetinitdone;
  output ch1_txphshift180done;
  output ch1_txpmaresetdone;
  output ch1_txprogdivresetdone;
  output ch1_txresetdone;
  output ch1_txsyncdone;
  output ch2_bufgtce;
  output [3:0]ch2_bufgtcemask;
  output [11:0]ch2_bufgtdiv;
  output ch2_bufgtrst;
  output [3:0]ch2_bufgtrstmask;
  output ch2_cfokovrdrdy0;
  output ch2_cfokovrdrdy1;
  output [31:0]ch2_dmonitorout;
  output ch2_dmonitoroutclk;
  output ch2_eyescandataerror;
  output ch2_iloresetdone;
  output [15:0]ch2_pcsrsvdout;
  output ch2_phyready;
  output ch2_phystatus;
  output [15:0]ch2_pinrsvdas;
  output ch2_resetexception;
  output [7:0]ch2_rx10gstat;
  output [2:0]ch2_rxbufstatus;
  output ch2_rxbyteisaligned;
  output ch2_rxbyterealign;
  output ch2_rxcdrlock;
  output ch2_rxcdrphdone;
  output ch2_rxchanbondseq;
  output ch2_rxchanisaligned;
  output ch2_rxchanrealign;
  output [4:0]ch2_rxchbondo;
  output [1:0]ch2_rxclkcorcnt;
  output ch2_rxcominitdet;
  output ch2_rxcommadet;
  output ch2_rxcomsasdet;
  output ch2_rxcomwakedet;
  output [15:0]ch2_rxctrl0;
  output [15:0]ch2_rxctrl1;
  output [7:0]ch2_rxctrl2;
  output [7:0]ch2_rxctrl3;
  output [127:0]ch2_rxdata;
  output [7:0]ch2_rxdataextendrsvd;
  output [1:0]ch2_rxdatavalid;
  output ch2_rxdccdone;
  output ch2_rxdlyalignerr;
  output ch2_rxdlyalignprog;
  output ch2_rxelecidle;
  output ch2_rxfinealigndone;
  output [5:0]ch2_rxheader;
  output [1:0]ch2_rxheadervalid;
  output ch2_rxosintdone;
  output ch2_rxosintstarted;
  output ch2_rxosintstrobedone;
  output ch2_rxosintstrobestarted;
  output ch2_rxoutclk;
  output ch2_rxphaligndone;
  output ch2_rxphalignerr;
  output ch2_rxphdlyresetdone;
  output ch2_rxphsetinitdone;
  output ch2_rxphshift180done;
  output ch2_rxpmaresetdone;
  output ch2_rxprbserr;
  output ch2_rxprbslocked;
  output ch2_rxprogdivresetdone;
  output ch2_rxresetdone;
  output ch2_rxsliderdy;
  output [1:0]ch2_rxstartofseq;
  output [2:0]ch2_rxstatus;
  output ch2_rxsyncdone;
  output ch2_rxvalid;
  output ch2_tx10gstat;
  output [1:0]ch2_txbufstatus;
  output ch2_txcomfinish;
  output ch2_txdccdone;
  output ch2_txdlyalignerr;
  output ch2_txdlyalignprog;
  output ch2_txoutclk;
  output ch2_txphaligndone;
  output ch2_txphalignerr;
  output ch2_txphalignoutrsvd;
  output ch2_txphdlyresetdone;
  output ch2_txphsetinitdone;
  output ch2_txphshift180done;
  output ch2_txpmaresetdone;
  output ch2_txprogdivresetdone;
  output ch2_txresetdone;
  output ch2_txsyncdone;
  output ch3_bufgtce;
  output [3:0]ch3_bufgtcemask;
  output [11:0]ch3_bufgtdiv;
  output ch3_bufgtrst;
  output [3:0]ch3_bufgtrstmask;
  output ch3_cfokovrdrdy0;
  output ch3_cfokovrdrdy1;
  output [31:0]ch3_dmonitorout;
  output ch3_dmonitoroutclk;
  output ch3_eyescandataerror;
  output ch3_iloresetdone;
  output [15:0]ch3_pcsrsvdout;
  output ch3_phyready;
  output ch3_phystatus;
  output [15:0]ch3_pinrsvdas;
  output ch3_resetexception;
  output [7:0]ch3_rx10gstat;
  output [2:0]ch3_rxbufstatus;
  output ch3_rxbyteisaligned;
  output ch3_rxbyterealign;
  output ch3_rxcdrlock;
  output ch3_rxcdrphdone;
  output ch3_rxchanbondseq;
  output ch3_rxchanisaligned;
  output ch3_rxchanrealign;
  output [4:0]ch3_rxchbondo;
  output [1:0]ch3_rxclkcorcnt;
  output ch3_rxcominitdet;
  output ch3_rxcommadet;
  output ch3_rxcomsasdet;
  output ch3_rxcomwakedet;
  output [15:0]ch3_rxctrl0;
  output [15:0]ch3_rxctrl1;
  output [7:0]ch3_rxctrl2;
  output [7:0]ch3_rxctrl3;
  output [127:0]ch3_rxdata;
  output [7:0]ch3_rxdataextendrsvd;
  output [1:0]ch3_rxdatavalid;
  output ch3_rxdccdone;
  output ch3_rxdlyalignerr;
  output ch3_rxdlyalignprog;
  output ch3_rxelecidle;
  output ch3_rxfinealigndone;
  output [5:0]ch3_rxheader;
  output [1:0]ch3_rxheadervalid;
  output ch3_rxosintdone;
  output ch3_rxosintstarted;
  output ch3_rxosintstrobedone;
  output ch3_rxosintstrobestarted;
  output ch3_rxoutclk;
  output ch3_rxphaligndone;
  output ch3_rxphalignerr;
  output ch3_rxphdlyresetdone;
  output ch3_rxphsetinitdone;
  output ch3_rxphshift180done;
  output ch3_rxpmaresetdone;
  output ch3_rxprbserr;
  output ch3_rxprbslocked;
  output ch3_rxprogdivresetdone;
  output ch3_rxresetdone;
  output ch3_rxsliderdy;
  output [1:0]ch3_rxstartofseq;
  output [2:0]ch3_rxstatus;
  output ch3_rxsyncdone;
  output ch3_rxvalid;
  output ch3_tx10gstat;
  output [1:0]ch3_txbufstatus;
  output ch3_txcomfinish;
  output ch3_txdccdone;
  output ch3_txdlyalignerr;
  output ch3_txdlyalignprog;
  output ch3_txoutclk;
  output ch3_txphaligndone;
  output ch3_txphalignerr;
  output ch3_txphalignoutrsvd;
  output ch3_txphdlyresetdone;
  output ch3_txphsetinitdone;
  output ch3_txphshift180done;
  output ch3_txpmaresetdone;
  output ch3_txprogdivresetdone;
  output ch3_txresetdone;
  output ch3_txsyncdone;
  output correcterr;
  output [31:0]ctrlrsvdout;
  output [15:0]debugtracetdata;
  output debugtracetvalid;
  output [15:0]gpo;
  output gtpowergood;
  output hsclk0_lcpllfbclklost;
  output hsclk0_lcplllock;
  output hsclk0_lcpllrefclklost;
  output hsclk0_lcpllrefclkmonitor;
  output [7:0]hsclk0_lcpllrsvdout;
  output hsclk0_rpllfbclklost;
  output hsclk0_rplllock;
  output hsclk0_rpllrefclklost;
  output hsclk0_rpllrefclkmonitor;
  output [7:0]hsclk0_rpllrsvdout;
  output hsclk0_rxrecclkout0;
  output hsclk0_rxrecclkout1;
  output [1:0]hsclk0_rxrecclksel;
  output hsclk1_lcpllfbclklost;
  output hsclk1_lcplllock;
  output hsclk1_lcpllrefclklost;
  output hsclk1_lcpllrefclkmonitor;
  output [7:0]hsclk1_lcpllrsvdout;
  output hsclk1_rpllfbclklost;
  output hsclk1_rplllock;
  output hsclk1_rpllrefclklost;
  output hsclk1_rpllrefclkmonitor;
  output [7:0]hsclk1_rpllrsvdout;
  output hsclk1_rxrecclkout0;
  output hsclk1_rxrecclkout1;
  output [1:0]hsclk1_rxrecclksel;
  output [5:0]pipenorthout;
  output [5:0]pipesouthout;
  output refclk0_clktestsigint;
  output refclk0_gtrefclkpdint;
  output refclk1_clktestsigint;
  output refclk1_gtrefclkpdint;
  output [1:0]resetdone_northout;
  output [1:0]resetdone_southout;
  output rxmarginreqack;
  output [3:0]rxmarginrescmd;
  output [1:0]rxmarginreslanenum;
  output [7:0]rxmarginrespayld;
  output rxmarginresreq;
  output [3:0]rxpinorthout;
  output [3:0]rxpisouthout;
  output trigackin0;
  output trigout0;
  output [3:0]txpinorthout;
  output [3:0]txpisouthout;
  output ubinterrupt;
  output ubtxuart;
  output uncorrecterr;
  input altclk;
  input apb3clk;
  input [15:0]apb3paddr;
  input apb3penable;
  input apb3presetn;
  input apb3psel;
  input [31:0]apb3pwdata;
  input apb3pwrite;
  input s_axi_lite_clk;
  input s_axi_lite_resetn;
  input [15:0]s_axi_lite_araddr;
  input s_axi_lite_arvalid;
  input s_axi_lite_rready;
  input [15:0]s_axi_lite_awaddr;
  input s_axi_lite_awvalid;
  input [31:0]s_axi_lite_wdata;
  input s_axi_lite_wvalid;
  input s_axi_lite_bready;
  input bgbypassb;
  input bgmonitorenb;
  input bgpdb;
  input [4:0]bgrcalovrd;
  input bgrcalovrdenb;
  input ch0_cdrbmcdrreq;
  input ch0_cdrfreqos;
  input ch0_cdrincpctrl;
  input ch0_cdrstepdir;
  input ch0_cdrstepsq;
  input ch0_cdrstepsx;
  input ch0_cfokovrdfinish;
  input ch0_cfokovrdpulse;
  input ch0_cfokovrdstart;
  input ch0_clkrsvd0;
  input ch0_clkrsvd1;
  input ch0_dmonfiforeset;
  input ch0_dmonitorclk;
  input ch0_eyescanreset;
  input ch0_eyescantrigger;
  input [15:0]ch0_gtrsvd;
  input ch0_gtrxreset;
  input ch0_gttxreset;
  input ch0_hsdppcsreset;
  input ch0_iloreset;
  input ch0_iloresetmask;
  input [2:0]ch0_loopback;
  input ch0_pcierstb;
  input ch0_phyesmadaptsave;
  input ch0_rxcdrhold;
  input ch0_rxcdrovrden;
  input ch0_rxcdrreset;
  input [4:0]ch0_rxchbondi;
  input ch0_rxdapicodeovrden;
  input ch0_rxdapicodereset;
  input ch0_rxdlyalignreq;
  input ch0_rxeqtraining;
  input ch0_rxgearboxslip;
  input ch0_rxlatclk;
  input ch0_rxlpmen;
  input ch0_rxmldchaindone;
  input ch0_rxmldchainreq;
  input ch0_rxmlfinealignreq;
  input ch0_rxoobreset;
  input [4:0]ch0_rxpcsresetmask;
  input [1:0]ch0_rxpd;
  input ch0_rxphalignreq;
  input [1:0]ch0_rxphalignresetmask;
  input ch0_rxphdlypd;
  input ch0_rxphdlyreset;
  input ch0_rxphsetinitreq;
  input ch0_rxphshift180;
  input [6:0]ch0_rxpmaresetmask;
  input ch0_rxpolarity;
  input ch0_rxprbscntreset;
  input [3:0]ch0_rxprbssel;
  input ch0_rxprogdivreset;
  input [7:0]ch0_rxrate;
  input [1:0]ch0_rxresetmode;
  input ch0_rxslide;
  input ch0_rxsyncallin;
  input ch0_rxtermination;
  input ch0_rxuserrdy;
  input ch0_rxusrclk;
  input [19:0]ch0_tstin;
  input ch0_txcominit;
  input ch0_txcomsas;
  input ch0_txcomwake;
  input [15:0]ch0_txctrl0;
  input [15:0]ch0_txctrl1;
  input [7:0]ch0_txctrl2;
  input ch0_txdapicodeovrden;
  input ch0_txdapicodereset;
  input [127:0]ch0_txdata;
  input [7:0]ch0_txdataextendrsvd;
  input [1:0]ch0_txdeemph;
  input ch0_txdetectrx;
  input [4:0]ch0_txdiffctrl;
  input ch0_txdlyalignreq;
  input ch0_txelecidle;
  input [5:0]ch0_txheader;
  input ch0_txinhibit;
  input ch0_txlatclk;
  input [6:0]ch0_txmaincursor;
  input [2:0]ch0_txmargin;
  input ch0_txmldchaindone;
  input ch0_txmldchainreq;
  input ch0_txoneszeros;
  input ch0_txpausedelayalign;
  input ch0_txpcsresetmask;
  input [1:0]ch0_txpd;
  input ch0_txphalignreq;
  input [1:0]ch0_txphalignresetmask;
  input ch0_txphdlypd;
  input ch0_txphdlyreset;
  input ch0_txphdlytstclk;
  input ch0_txphsetinitreq;
  input ch0_txphshift180;
  input ch0_txpicodeovrden;
  input ch0_txpicodereset;
  input ch0_txpippmen;
  input [4:0]ch0_txpippmstepsize;
  input ch0_txpisopd;
  input [2:0]ch0_txpmaresetmask;
  input ch0_txpolarity;
  input [4:0]ch0_txpostcursor;
  input ch0_txprbsforceerr;
  input [3:0]ch0_txprbssel;
  input [4:0]ch0_txprecursor;
  input ch0_txprogdivreset;
  input [7:0]ch0_txrate;
  input [1:0]ch0_txresetmode;
  input [6:0]ch0_txsequence;
  input ch0_txswing;
  input ch0_txsyncallin;
  input ch0_txuserrdy;
  input ch0_txusrclk;
  input ch1_cdrbmcdrreq;
  input ch1_cdrfreqos;
  input ch1_cdrincpctrl;
  input ch1_cdrstepdir;
  input ch1_cdrstepsq;
  input ch1_cdrstepsx;
  input ch1_cfokovrdfinish;
  input ch1_cfokovrdpulse;
  input ch1_cfokovrdstart;
  input ch1_clkrsvd0;
  input ch1_clkrsvd1;
  input ch1_dmonfiforeset;
  input ch1_dmonitorclk;
  input ch1_eyescanreset;
  input ch1_eyescantrigger;
  input [15:0]ch1_gtrsvd;
  input ch1_gtrxreset;
  input ch1_gttxreset;
  input ch1_hsdppcsreset;
  input ch1_iloreset;
  input ch1_iloresetmask;
  input [2:0]ch1_loopback;
  input ch1_pcierstb;
  input ch1_phyesmadaptsave;
  input ch1_rxcdrhold;
  input ch1_rxcdrovrden;
  input ch1_rxcdrreset;
  input [4:0]ch1_rxchbondi;
  input ch1_rxdapicodeovrden;
  input ch1_rxdapicodereset;
  input ch1_rxdlyalignreq;
  input ch1_rxeqtraining;
  input ch1_rxgearboxslip;
  input ch1_rxlatclk;
  input ch1_rxlpmen;
  input ch1_rxmldchaindone;
  input ch1_rxmldchainreq;
  input ch1_rxmlfinealignreq;
  input ch1_rxoobreset;
  input [4:0]ch1_rxpcsresetmask;
  input [1:0]ch1_rxpd;
  input ch1_rxphalignreq;
  input [1:0]ch1_rxphalignresetmask;
  input ch1_rxphdlypd;
  input ch1_rxphdlyreset;
  input ch1_rxphsetinitreq;
  input ch1_rxphshift180;
  input [6:0]ch1_rxpmaresetmask;
  input ch1_rxpolarity;
  input ch1_rxprbscntreset;
  input [3:0]ch1_rxprbssel;
  input ch1_rxprogdivreset;
  input [7:0]ch1_rxrate;
  input [1:0]ch1_rxresetmode;
  input ch1_rxslide;
  input ch1_rxsyncallin;
  input ch1_rxtermination;
  input ch1_rxuserrdy;
  input ch1_rxusrclk;
  input [19:0]ch1_tstin;
  input ch1_txcominit;
  input ch1_txcomsas;
  input ch1_txcomwake;
  input [15:0]ch1_txctrl0;
  input [15:0]ch1_txctrl1;
  input [7:0]ch1_txctrl2;
  input ch1_txdapicodeovrden;
  input ch1_txdapicodereset;
  input [127:0]ch1_txdata;
  input [7:0]ch1_txdataextendrsvd;
  input [1:0]ch1_txdeemph;
  input ch1_txdetectrx;
  input [4:0]ch1_txdiffctrl;
  input ch1_txdlyalignreq;
  input ch1_txelecidle;
  input [5:0]ch1_txheader;
  input ch1_txinhibit;
  input ch1_txlatclk;
  input [6:0]ch1_txmaincursor;
  input [2:0]ch1_txmargin;
  input ch1_txmldchaindone;
  input ch1_txmldchainreq;
  input ch1_txoneszeros;
  input ch1_txpausedelayalign;
  input ch1_txpcsresetmask;
  input [1:0]ch1_txpd;
  input ch1_txphalignreq;
  input [1:0]ch1_txphalignresetmask;
  input ch1_txphdlypd;
  input ch1_txphdlyreset;
  input ch1_txphdlytstclk;
  input ch1_txphsetinitreq;
  input ch1_txphshift180;
  input ch1_txpicodeovrden;
  input ch1_txpicodereset;
  input ch1_txpippmen;
  input [4:0]ch1_txpippmstepsize;
  input ch1_txpisopd;
  input [2:0]ch1_txpmaresetmask;
  input ch1_txpolarity;
  input [4:0]ch1_txpostcursor;
  input ch1_txprbsforceerr;
  input [3:0]ch1_txprbssel;
  input [4:0]ch1_txprecursor;
  input ch1_txprogdivreset;
  input [7:0]ch1_txrate;
  input [1:0]ch1_txresetmode;
  input [6:0]ch1_txsequence;
  input ch1_txswing;
  input ch1_txsyncallin;
  input ch1_txuserrdy;
  input ch1_txusrclk;
  input ch2_cdrbmcdrreq;
  input ch2_cdrfreqos;
  input ch2_cdrincpctrl;
  input ch2_cdrstepdir;
  input ch2_cdrstepsq;
  input ch2_cdrstepsx;
  input ch2_cfokovrdfinish;
  input ch2_cfokovrdpulse;
  input ch2_cfokovrdstart;
  input ch2_clkrsvd0;
  input ch2_clkrsvd1;
  input ch2_dmonfiforeset;
  input ch2_dmonitorclk;
  input ch2_eyescanreset;
  input ch2_eyescantrigger;
  input [15:0]ch2_gtrsvd;
  input ch2_gtrxreset;
  input ch2_gttxreset;
  input ch2_hsdppcsreset;
  input ch2_iloreset;
  input ch2_iloresetmask;
  input [2:0]ch2_loopback;
  input ch2_pcierstb;
  input ch2_phyesmadaptsave;
  input ch2_rxcdrhold;
  input ch2_rxcdrovrden;
  input ch2_rxcdrreset;
  input [4:0]ch2_rxchbondi;
  input ch2_rxdapicodeovrden;
  input ch2_rxdapicodereset;
  input ch2_rxdlyalignreq;
  input ch2_rxeqtraining;
  input ch2_rxgearboxslip;
  input ch2_rxlatclk;
  input ch2_rxlpmen;
  input ch2_rxmldchaindone;
  input ch2_rxmldchainreq;
  input ch2_rxmlfinealignreq;
  input ch2_rxoobreset;
  input [4:0]ch2_rxpcsresetmask;
  input [1:0]ch2_rxpd;
  input ch2_rxphalignreq;
  input [1:0]ch2_rxphalignresetmask;
  input ch2_rxphdlypd;
  input ch2_rxphdlyreset;
  input ch2_rxphsetinitreq;
  input ch2_rxphshift180;
  input [6:0]ch2_rxpmaresetmask;
  input ch2_rxpolarity;
  input ch2_rxprbscntreset;
  input [3:0]ch2_rxprbssel;
  input ch2_rxprogdivreset;
  input [7:0]ch2_rxrate;
  input [1:0]ch2_rxresetmode;
  input ch2_rxslide;
  input ch2_rxsyncallin;
  input ch2_rxtermination;
  input ch2_rxuserrdy;
  input ch2_rxusrclk;
  input [19:0]ch2_tstin;
  input ch2_txcominit;
  input ch2_txcomsas;
  input ch2_txcomwake;
  input [15:0]ch2_txctrl0;
  input [15:0]ch2_txctrl1;
  input [7:0]ch2_txctrl2;
  input ch2_txdapicodeovrden;
  input ch2_txdapicodereset;
  input [127:0]ch2_txdata;
  input [7:0]ch2_txdataextendrsvd;
  input [1:0]ch2_txdeemph;
  input ch2_txdetectrx;
  input [4:0]ch2_txdiffctrl;
  input ch2_txdlyalignreq;
  input ch2_txelecidle;
  input [5:0]ch2_txheader;
  input ch2_txinhibit;
  input ch2_txlatclk;
  input [6:0]ch2_txmaincursor;
  input [2:0]ch2_txmargin;
  input ch2_txmldchaindone;
  input ch2_txmldchainreq;
  input ch2_txoneszeros;
  input ch2_txpausedelayalign;
  input ch2_txpcsresetmask;
  input [1:0]ch2_txpd;
  input ch2_txphalignreq;
  input [1:0]ch2_txphalignresetmask;
  input ch2_txphdlypd;
  input ch2_txphdlyreset;
  input ch2_txphdlytstclk;
  input ch2_txphsetinitreq;
  input ch2_txphshift180;
  input ch2_txpicodeovrden;
  input ch2_txpicodereset;
  input ch2_txpippmen;
  input [4:0]ch2_txpippmstepsize;
  input ch2_txpisopd;
  input [2:0]ch2_txpmaresetmask;
  input ch2_txpolarity;
  input [4:0]ch2_txpostcursor;
  input ch2_txprbsforceerr;
  input [3:0]ch2_txprbssel;
  input [4:0]ch2_txprecursor;
  input ch2_txprogdivreset;
  input [7:0]ch2_txrate;
  input [1:0]ch2_txresetmode;
  input [6:0]ch2_txsequence;
  input ch2_txswing;
  input ch2_txsyncallin;
  input ch2_txuserrdy;
  input ch2_txusrclk;
  input ch3_cdrbmcdrreq;
  input ch3_cdrfreqos;
  input ch3_cdrincpctrl;
  input ch3_cdrstepdir;
  input ch3_cdrstepsq;
  input ch3_cdrstepsx;
  input ch3_cfokovrdfinish;
  input ch3_cfokovrdpulse;
  input ch3_cfokovrdstart;
  input ch3_clkrsvd0;
  input ch3_clkrsvd1;
  input ch3_dmonfiforeset;
  input ch3_dmonitorclk;
  input ch3_eyescanreset;
  input ch3_eyescantrigger;
  input [15:0]ch3_gtrsvd;
  input ch3_gtrxreset;
  input ch3_gttxreset;
  input ch3_hsdppcsreset;
  input ch3_iloreset;
  input ch3_iloresetmask;
  input [2:0]ch3_loopback;
  input ch3_pcierstb;
  input ch3_phyesmadaptsave;
  input ch3_rxcdrhold;
  input ch3_rxcdrovrden;
  input ch3_rxcdrreset;
  input [4:0]ch3_rxchbondi;
  input ch3_rxdapicodeovrden;
  input ch3_rxdapicodereset;
  input ch3_rxdlyalignreq;
  input ch3_rxeqtraining;
  input ch3_rxgearboxslip;
  input ch3_rxlatclk;
  input ch3_rxlpmen;
  input ch3_rxmldchaindone;
  input ch3_rxmldchainreq;
  input ch3_rxmlfinealignreq;
  input ch3_rxoobreset;
  input [4:0]ch3_rxpcsresetmask;
  input [1:0]ch3_rxpd;
  input ch3_rxphalignreq;
  input [1:0]ch3_rxphalignresetmask;
  input ch3_rxphdlypd;
  input ch3_rxphdlyreset;
  input ch3_rxphsetinitreq;
  input ch3_rxphshift180;
  input [6:0]ch3_rxpmaresetmask;
  input ch3_rxpolarity;
  input ch3_rxprbscntreset;
  input [3:0]ch3_rxprbssel;
  input ch3_rxprogdivreset;
  input [7:0]ch3_rxrate;
  input [1:0]ch3_rxresetmode;
  input ch3_rxslide;
  input ch3_rxsyncallin;
  input ch3_rxtermination;
  input ch3_rxuserrdy;
  input ch3_rxusrclk;
  input [19:0]ch3_tstin;
  input ch3_txcominit;
  input ch3_txcomsas;
  input ch3_txcomwake;
  input [15:0]ch3_txctrl0;
  input [15:0]ch3_txctrl1;
  input [7:0]ch3_txctrl2;
  input ch3_txdapicodeovrden;
  input ch3_txdapicodereset;
  input [127:0]ch3_txdata;
  input [7:0]ch3_txdataextendrsvd;
  input [1:0]ch3_txdeemph;
  input ch3_txdetectrx;
  input [4:0]ch3_txdiffctrl;
  input ch3_txdlyalignreq;
  input ch3_txelecidle;
  input [5:0]ch3_txheader;
  input ch3_txinhibit;
  input ch3_txlatclk;
  input [6:0]ch3_txmaincursor;
  input [2:0]ch3_txmargin;
  input ch3_txmldchaindone;
  input ch3_txmldchainreq;
  input ch3_txoneszeros;
  input ch3_txpausedelayalign;
  input ch3_txpcsresetmask;
  input [1:0]ch3_txpd;
  input ch3_txphalignreq;
  input [1:0]ch3_txphalignresetmask;
  input ch3_txphdlypd;
  input ch3_txphdlyreset;
  input ch3_txphdlytstclk;
  input ch3_txphsetinitreq;
  input ch3_txphshift180;
  input ch3_txpicodeovrden;
  input ch3_txpicodereset;
  input ch3_txpippmen;
  input [4:0]ch3_txpippmstepsize;
  input ch3_txpisopd;
  input [2:0]ch3_txpmaresetmask;
  input ch3_txpolarity;
  input [4:0]ch3_txpostcursor;
  input ch3_txprbsforceerr;
  input [3:0]ch3_txprbssel;
  input [4:0]ch3_txprecursor;
  input ch3_txprogdivreset;
  input [7:0]ch3_txrate;
  input [1:0]ch3_txresetmode;
  input [6:0]ch3_txsequence;
  input ch3_txswing;
  input ch3_txsyncallin;
  input ch3_txuserrdy;
  input ch3_txusrclk;
  input [15:0]ctrlrsvdin0;
  input [13:0]ctrlrsvdin1;
  input debugtraceclk;
  input debugtraceready;
  input [15:0]gpi;
  input hsclk0_lcpllclkrsvd0;
  input hsclk0_lcpllclkrsvd1;
  input [7:0]hsclk0_lcpllfbdiv;
  input hsclk0_lcpllgtgrefclk;
  input hsclk0_lcpllpd;
  input [2:0]hsclk0_lcpllrefclksel;
  input hsclk0_lcpllreset;
  input hsclk0_lcpllresetbypassmode;
  input [1:0]hsclk0_lcpllresetmask;
  input [7:0]hsclk0_lcpllrsvd0;
  input [7:0]hsclk0_lcpllrsvd1;
  input [25:0]hsclk0_lcpllsdmdata;
  input hsclk0_lcpllsdmtoggle;
  input hsclk0_rpllclkrsvd0;
  input hsclk0_rpllclkrsvd1;
  input [7:0]hsclk0_rpllfbdiv;
  input hsclk0_rpllgtgrefclk;
  input hsclk0_rpllpd;
  input [2:0]hsclk0_rpllrefclksel;
  input hsclk0_rpllreset;
  input hsclk0_rpllresetbypassmode;
  input [1:0]hsclk0_rpllresetmask;
  input [7:0]hsclk0_rpllrsvd0;
  input [7:0]hsclk0_rpllrsvd1;
  input [25:0]hsclk0_rpllsdmdata;
  input hsclk0_rpllsdmtoggle;
  input hsclk1_lcpllclkrsvd0;
  input hsclk1_lcpllclkrsvd1;
  input [7:0]hsclk1_lcpllfbdiv;
  input hsclk1_lcpllgtgrefclk;
  input hsclk1_lcpllpd;
  input [2:0]hsclk1_lcpllrefclksel;
  input hsclk1_lcpllreset;
  input hsclk1_lcpllresetbypassmode;
  input [1:0]hsclk1_lcpllresetmask;
  input [7:0]hsclk1_lcpllrsvd0;
  input [7:0]hsclk1_lcpllrsvd1;
  input [25:0]hsclk1_lcpllsdmdata;
  input hsclk1_lcpllsdmtoggle;
  input hsclk1_rpllclkrsvd0;
  input hsclk1_rpllclkrsvd1;
  input [7:0]hsclk1_rpllfbdiv;
  input hsclk1_rpllgtgrefclk;
  input hsclk1_rpllpd;
  input [2:0]hsclk1_rpllrefclksel;
  input hsclk1_rpllreset;
  input hsclk1_rpllresetbypassmode;
  input [1:0]hsclk1_rpllresetmask;
  input [7:0]hsclk1_rpllrsvd0;
  input [7:0]hsclk1_rpllrsvd1;
  input [25:0]hsclk1_rpllsdmdata;
  input hsclk1_rpllsdmtoggle;
  input pcielinkreachtarget;
  input [5:0]pcieltssm;
  input [5:0]pipenorthin;
  input [5:0]pipesouthin;
  input rcalenb;
  input refclk0_clktestsig;
  input refclk0_gtrefclkpd;
  input refclk1_clktestsig;
  input refclk1_gtrefclkpd;
  input [1:0]resetdone_northin;
  input [1:0]resetdone_southin;
  input rxmarginclk;
  input [3:0]rxmarginreqcmd;
  input [1:0]rxmarginreqlanenum;
  input [7:0]rxmarginreqpayld;
  input rxmarginreqreq;
  input rxmarginresack;
  input [3:0]rxpinorthin;
  input [3:0]rxpisouthin;
  input trigackout0;
  input trigin0;
  input [3:0]txpinorthin;
  input [3:0]txpisouthin;
  input ubenable;
  input [11:0]ubintr;
  input ubiolmbrst;
  input ubmbrst;
  input ubrxuart;
  input [15:0]ch0_pcsrsvdin;
  input [15:0]ch1_pcsrsvdin;
  input [15:0]ch2_pcsrsvdin;
  input [15:0]ch3_pcsrsvdin;
  input GT_REFCLK0;
  input [3:0]rxp;
  input [3:0]rxn;
  output [3:0]txp;
  output [3:0]txn;
  input ch0_rxmstdatapathreset;
  input ch1_rxmstdatapathreset;
  input ch2_rxmstdatapathreset;
  input ch3_rxmstdatapathreset;
  input ch0_txmstdatapathreset;
  input ch1_txmstdatapathreset;
  input ch2_txmstdatapathreset;
  input ch3_txmstdatapathreset;
  input ch0_rxmstreset;
  input ch1_rxmstreset;
  input ch2_rxmstreset;
  input ch3_rxmstreset;
  output ch0_rxmstresetdone;
  output ch1_rxmstresetdone;
  output ch2_rxmstresetdone;
  output ch3_rxmstresetdone;
  input ch0_txmstreset;
  input ch1_txmstreset;
  input ch2_txmstreset;
  input ch3_txmstreset;
  output ch0_txmstresetdone;
  output ch1_txmstresetdone;
  output ch2_txmstresetdone;
  output ch3_txmstresetdone;

  wire \<const0> ;
  wire GT_REFCLK0;
  wire altclk;
  wire apb3clk;
  wire [15:0]apb3paddr;
  wire [15:0]apb3paddr_quad_int;
  wire apb3penable;
  wire apb3penable_quad_int;
  wire [31:0]apb3prdata;
  wire [31:0]apb3prdata_quad_int;
  wire apb3pready;
  wire apb3pready_quad_int;
  wire apb3presetn;
  wire apb3psel;
  wire apb3pslverr;
  wire apb3pslverr_quad_int;
  wire [31:0]apb3pwdata;
  wire [31:0]apb3pwdata_quad_int;
  wire apb3pwrite;
  wire apb3pwrite_quad_int;
  wire apb3sel_quad_int;
  wire bgbypassb;
  wire bgmonitorenb;
  wire bgpdb;
  wire [4:0]bgrcalovrd;
  wire bgrcalovrdenb;
  wire ch0_bufgtce;
  wire [3:0]ch0_bufgtcemask;
  wire [11:0]ch0_bufgtdiv;
  wire ch0_bufgtrst;
  wire [3:0]ch0_bufgtrstmask;
  wire ch0_cdrbmcdrreq;
  wire ch0_cdrfreqos;
  wire ch0_cdrincpctrl;
  wire ch0_cdrstepdir;
  wire ch0_cdrstepsq;
  wire ch0_cdrstepsx;
  wire ch0_cfokovrdfinish;
  wire ch0_cfokovrdpulse;
  wire ch0_cfokovrdrdy0;
  wire ch0_cfokovrdrdy1;
  wire ch0_cfokovrdstart;
  wire ch0_clkrsvd0;
  wire ch0_clkrsvd1;
  wire ch0_dmonfiforeset;
  wire ch0_dmonitorclk;
  wire [31:0]ch0_dmonitorout;
  wire ch0_dmonitoroutclk;
  wire ch0_eyescandataerror;
  wire ch0_eyescanreset;
  wire ch0_eyescantrigger;
  wire [15:0]ch0_gtrsvd;
  wire ch0_gtrxreset;
  wire ch0_gttxreset;
  wire ch0_hsdppcsreset;
  wire ch0_iloreset;
  wire ch0_iloresetdone;
  wire ch0_iloresetmask;
  wire [2:0]ch0_loopback;
  wire ch0_pcierstb;
  wire [15:0]ch0_pcsrsvdin;
  wire [15:0]ch0_pcsrsvdout;
  wire [11:10]ch0_pcsrsvdout_int;
  wire ch0_phyesmadaptsave;
  wire ch0_phyready;
  wire ch0_phystatus;
  wire [15:0]ch0_pinrsvdas;
  wire ch0_resetexception;
  wire [7:0]ch0_rx10gstat;
  wire ch0_rx_function_inst_n_0;
  wire ch0_rx_function_inst_n_1;
  wire ch0_rx_function_inst_n_2;
  wire [2:0]ch0_rxbufstatus;
  wire ch0_rxbyteisaligned;
  wire ch0_rxbyterealign;
  wire ch0_rxcdrhold;
  wire ch0_rxcdrlock;
  wire ch0_rxcdrovrden;
  wire ch0_rxcdrphdone;
  wire ch0_rxcdrreset;
  wire ch0_rxchanbondseq;
  wire ch0_rxchanisaligned;
  wire ch0_rxchanrealign;
  wire [4:0]ch0_rxchbondi;
  wire [4:0]ch0_rxchbondo;
  wire [1:0]ch0_rxclkcorcnt;
  wire ch0_rxcominitdet;
  wire ch0_rxcommadet;
  wire ch0_rxcomsasdet;
  wire ch0_rxcomwakedet;
  wire [15:0]ch0_rxctrl0;
  wire [15:0]ch0_rxctrl1;
  wire [7:0]ch0_rxctrl2;
  wire [7:0]ch0_rxctrl3;
  wire ch0_rxdapicodeovrden;
  wire ch0_rxdapicodereset;
  wire [127:0]ch0_rxdata;
  wire [7:0]ch0_rxdataextendrsvd;
  wire [1:0]ch0_rxdatavalid;
  wire ch0_rxdccdone;
  wire ch0_rxdlyalignerr;
  wire ch0_rxdlyalignprog;
  wire ch0_rxdlyalignreq;
  wire ch0_rxelecidle;
  wire ch0_rxeqtraining;
  wire ch0_rxfinealigndone;
  wire ch0_rxgearboxslip;
  wire [5:0]ch0_rxheader;
  wire [1:0]ch0_rxheadervalid;
  wire ch0_rxlatclk;
  wire ch0_rxlpmen;
  wire ch0_rxmldchaindone;
  wire ch0_rxmldchainreq;
  wire ch0_rxmlfinealignreq;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire ch0_rxmstresetdone;
  wire ch0_rxoobreset;
  wire ch0_rxosintdone;
  wire ch0_rxosintstarted;
  wire ch0_rxosintstrobedone;
  wire ch0_rxosintstrobestarted;
  wire ch0_rxoutclk;
  wire [4:0]ch0_rxpcsresetmask;
  wire [1:0]ch0_rxpd;
  wire ch0_rxphaligndone;
  wire ch0_rxphalignerr;
  wire ch0_rxphalignreq;
  wire [1:0]ch0_rxphalignresetmask;
  wire ch0_rxphdlypd;
  wire ch0_rxphdlyreset;
  wire ch0_rxphdlyresetdone;
  wire ch0_rxphsetinitdone;
  wire ch0_rxphsetinitreq;
  wire ch0_rxphshift180;
  wire ch0_rxphshift180done;
  wire ch0_rxpmaresetdone;
  wire ch0_rxpmaresetdone_int;
  wire [6:0]ch0_rxpmaresetmask;
  wire ch0_rxpolarity;
  wire ch0_rxprbscntreset;
  wire ch0_rxprbserr;
  wire ch0_rxprbslocked;
  wire [3:0]ch0_rxprbssel;
  wire ch0_rxprogdivreset;
  wire ch0_rxprogdivresetdone;
  wire [7:0]ch0_rxrate;
  wire ch0_rxresetdone;
  wire ch0_rxresetdone_int;
  wire [1:0]ch0_rxresetmode;
  wire ch0_rxslide;
  wire ch0_rxsliderdy;
  wire [1:0]ch0_rxstartofseq;
  wire [2:0]ch0_rxstatus;
  wire ch0_rxsyncallin;
  wire ch0_rxsyncdone;
  wire ch0_rxtermination;
  wire ch0_rxuserrdy;
  wire ch0_rxusrclk;
  wire ch0_rxvalid;
  wire [19:0]ch0_tstin;
  wire ch0_tx10gstat;
  wire ch0_tx_function_inst_n_0;
  wire ch0_tx_function_inst_n_1;
  wire ch0_tx_function_inst_n_2;
  wire [1:0]ch0_txbufstatus;
  wire ch0_txcomfinish;
  wire ch0_txcominit;
  wire ch0_txcomsas;
  wire ch0_txcomwake;
  wire [15:0]ch0_txctrl0;
  wire [15:0]ch0_txctrl1;
  wire [7:0]ch0_txctrl2;
  wire ch0_txdapicodeovrden;
  wire ch0_txdapicodereset;
  wire [127:0]ch0_txdata;
  wire [7:0]ch0_txdataextendrsvd;
  wire ch0_txdccdone;
  wire [1:0]ch0_txdeemph;
  wire ch0_txdetectrx;
  wire [4:0]ch0_txdiffctrl;
  wire ch0_txdlyalignerr;
  wire ch0_txdlyalignprog;
  wire ch0_txdlyalignreq;
  wire ch0_txelecidle;
  wire [5:0]ch0_txheader;
  wire ch0_txinhibit;
  wire ch0_txlatclk;
  wire [6:0]ch0_txmaincursor;
  wire [2:0]ch0_txmargin;
  wire ch0_txmldchaindone;
  wire ch0_txmldchainreq;
  wire ch0_txmstdatapathreset;
  wire ch0_txmstreset;
  wire ch0_txmstresetdone;
  wire ch0_txoneszeros;
  wire ch0_txoutclk;
  wire ch0_txpausedelayalign;
  wire ch0_txpcsresetmask;
  wire [1:0]ch0_txpd;
  wire ch0_txphaligndone;
  wire ch0_txphalignerr;
  wire ch0_txphalignoutrsvd;
  wire ch0_txphalignreq;
  wire [1:0]ch0_txphalignresetmask;
  wire ch0_txphdlypd;
  wire ch0_txphdlyreset;
  wire ch0_txphdlyresetdone;
  wire ch0_txphdlytstclk;
  wire ch0_txphsetinitdone;
  wire ch0_txphsetinitreq;
  wire ch0_txphshift180;
  wire ch0_txphshift180done;
  wire ch0_txpicodeovrden;
  wire ch0_txpicodereset;
  wire ch0_txpippmen;
  wire [4:0]ch0_txpippmstepsize;
  wire ch0_txpisopd;
  wire ch0_txpmaresetdone;
  wire ch0_txpmaresetdone_int;
  wire [2:0]ch0_txpmaresetmask;
  wire ch0_txpolarity;
  wire [4:0]ch0_txpostcursor;
  wire ch0_txprbsforceerr;
  wire [3:0]ch0_txprbssel;
  wire [4:0]ch0_txprecursor;
  wire ch0_txprogdivreset;
  wire ch0_txprogdivresetdone;
  wire [7:0]ch0_txrate;
  wire ch0_txresetdone;
  wire ch0_txresetdone_int;
  wire [1:0]ch0_txresetmode;
  wire [6:0]ch0_txsequence;
  wire ch0_txswing;
  wire ch0_txsyncallin;
  wire ch0_txsyncdone;
  wire ch0_txuserrdy;
  wire ch0_txusrclk;
  wire ch1_bufgtce;
  wire [3:0]ch1_bufgtcemask;
  wire [11:0]ch1_bufgtdiv;
  wire ch1_bufgtrst;
  wire [3:0]ch1_bufgtrstmask;
  wire ch1_cdrbmcdrreq;
  wire ch1_cdrfreqos;
  wire ch1_cdrincpctrl;
  wire ch1_cdrstepdir;
  wire ch1_cdrstepsq;
  wire ch1_cdrstepsx;
  wire ch1_cfokovrdfinish;
  wire ch1_cfokovrdpulse;
  wire ch1_cfokovrdrdy0;
  wire ch1_cfokovrdrdy1;
  wire ch1_cfokovrdstart;
  wire ch1_clkrsvd0;
  wire ch1_clkrsvd1;
  wire ch1_dmonfiforeset;
  wire ch1_dmonitorclk;
  wire [31:0]ch1_dmonitorout;
  wire ch1_dmonitoroutclk;
  wire ch1_eyescandataerror;
  wire ch1_eyescanreset;
  wire ch1_eyescantrigger;
  wire [15:0]ch1_gtrsvd;
  wire ch1_gtrxreset;
  wire ch1_gttxreset;
  wire ch1_hsdppcsreset;
  wire ch1_iloreset;
  wire ch1_iloresetdone;
  wire ch1_iloresetmask;
  wire [2:0]ch1_loopback;
  wire ch1_pcierstb;
  wire [15:0]ch1_pcsrsvdin;
  wire [15:0]ch1_pcsrsvdout;
  wire [11:10]ch1_pcsrsvdout_int;
  wire ch1_phyesmadaptsave;
  wire ch1_phyready;
  wire ch1_phystatus;
  wire [15:0]ch1_pinrsvdas;
  wire ch1_resetexception;
  wire [7:0]ch1_rx10gstat;
  wire ch1_rx_function_inst_n_0;
  wire ch1_rx_function_inst_n_1;
  wire ch1_rx_function_inst_n_2;
  wire [2:0]ch1_rxbufstatus;
  wire ch1_rxbyteisaligned;
  wire ch1_rxbyterealign;
  wire ch1_rxcdrhold;
  wire ch1_rxcdrlock;
  wire ch1_rxcdrovrden;
  wire ch1_rxcdrphdone;
  wire ch1_rxcdrreset;
  wire ch1_rxchanbondseq;
  wire ch1_rxchanisaligned;
  wire ch1_rxchanrealign;
  wire [4:0]ch1_rxchbondi;
  wire [4:0]ch1_rxchbondo;
  wire [1:0]ch1_rxclkcorcnt;
  wire ch1_rxcominitdet;
  wire ch1_rxcommadet;
  wire ch1_rxcomsasdet;
  wire ch1_rxcomwakedet;
  wire [15:0]ch1_rxctrl0;
  wire [15:0]ch1_rxctrl1;
  wire [7:0]ch1_rxctrl2;
  wire [7:0]ch1_rxctrl3;
  wire ch1_rxdapicodeovrden;
  wire ch1_rxdapicodereset;
  wire [127:0]ch1_rxdata;
  wire [7:0]ch1_rxdataextendrsvd;
  wire [1:0]ch1_rxdatavalid;
  wire ch1_rxdccdone;
  wire ch1_rxdlyalignerr;
  wire ch1_rxdlyalignprog;
  wire ch1_rxdlyalignreq;
  wire ch1_rxelecidle;
  wire ch1_rxeqtraining;
  wire ch1_rxfinealigndone;
  wire ch1_rxgearboxslip;
  wire [5:0]ch1_rxheader;
  wire [1:0]ch1_rxheadervalid;
  wire ch1_rxlatclk;
  wire ch1_rxlpmen;
  wire ch1_rxmldchaindone;
  wire ch1_rxmldchainreq;
  wire ch1_rxmlfinealignreq;
  wire ch1_rxmstdatapathreset;
  wire ch1_rxmstreset;
  wire ch1_rxmstresetdone;
  wire ch1_rxoobreset;
  wire ch1_rxosintdone;
  wire ch1_rxosintstarted;
  wire ch1_rxosintstrobedone;
  wire ch1_rxosintstrobestarted;
  wire ch1_rxoutclk;
  wire [4:0]ch1_rxpcsresetmask;
  wire [1:0]ch1_rxpd;
  wire ch1_rxphaligndone;
  wire ch1_rxphalignerr;
  wire ch1_rxphalignreq;
  wire [1:0]ch1_rxphalignresetmask;
  wire ch1_rxphdlypd;
  wire ch1_rxphdlyreset;
  wire ch1_rxphdlyresetdone;
  wire ch1_rxphsetinitdone;
  wire ch1_rxphsetinitreq;
  wire ch1_rxphshift180;
  wire ch1_rxphshift180done;
  wire ch1_rxpmaresetdone;
  wire ch1_rxpmaresetdone_int;
  wire [6:0]ch1_rxpmaresetmask;
  wire ch1_rxpolarity;
  wire ch1_rxprbscntreset;
  wire ch1_rxprbserr;
  wire ch1_rxprbslocked;
  wire [3:0]ch1_rxprbssel;
  wire ch1_rxprogdivreset;
  wire ch1_rxprogdivresetdone;
  wire [7:0]ch1_rxrate;
  wire ch1_rxresetdone;
  wire ch1_rxresetdone_int;
  wire [1:0]ch1_rxresetmode;
  wire ch1_rxslide;
  wire ch1_rxsliderdy;
  wire [1:0]ch1_rxstartofseq;
  wire [2:0]ch1_rxstatus;
  wire ch1_rxsyncallin;
  wire ch1_rxsyncdone;
  wire ch1_rxtermination;
  wire ch1_rxuserrdy;
  wire ch1_rxusrclk;
  wire ch1_rxvalid;
  wire [19:0]ch1_tstin;
  wire ch1_tx10gstat;
  wire ch1_tx_function_inst_n_0;
  wire ch1_tx_function_inst_n_1;
  wire ch1_tx_function_inst_n_2;
  wire [1:0]ch1_txbufstatus;
  wire ch1_txcomfinish;
  wire ch1_txcominit;
  wire ch1_txcomsas;
  wire ch1_txcomwake;
  wire [15:0]ch1_txctrl0;
  wire [15:0]ch1_txctrl1;
  wire [7:0]ch1_txctrl2;
  wire ch1_txdapicodeovrden;
  wire ch1_txdapicodereset;
  wire [127:0]ch1_txdata;
  wire [7:0]ch1_txdataextendrsvd;
  wire ch1_txdccdone;
  wire [1:0]ch1_txdeemph;
  wire ch1_txdetectrx;
  wire [4:0]ch1_txdiffctrl;
  wire ch1_txdlyalignerr;
  wire ch1_txdlyalignprog;
  wire ch1_txdlyalignreq;
  wire ch1_txelecidle;
  wire [5:0]ch1_txheader;
  wire ch1_txinhibit;
  wire ch1_txlatclk;
  wire [6:0]ch1_txmaincursor;
  wire [2:0]ch1_txmargin;
  wire ch1_txmldchaindone;
  wire ch1_txmldchainreq;
  wire ch1_txmstdatapathreset;
  wire ch1_txmstreset;
  wire ch1_txmstresetdone;
  wire ch1_txoneszeros;
  wire ch1_txoutclk;
  wire ch1_txpausedelayalign;
  wire ch1_txpcsresetmask;
  wire [1:0]ch1_txpd;
  wire ch1_txphaligndone;
  wire ch1_txphalignerr;
  wire ch1_txphalignoutrsvd;
  wire ch1_txphalignreq;
  wire [1:0]ch1_txphalignresetmask;
  wire ch1_txphdlypd;
  wire ch1_txphdlyreset;
  wire ch1_txphdlyresetdone;
  wire ch1_txphdlytstclk;
  wire ch1_txphsetinitdone;
  wire ch1_txphsetinitreq;
  wire ch1_txphshift180;
  wire ch1_txphshift180done;
  wire ch1_txpicodeovrden;
  wire ch1_txpicodereset;
  wire ch1_txpippmen;
  wire [4:0]ch1_txpippmstepsize;
  wire ch1_txpisopd;
  wire ch1_txpmaresetdone;
  wire ch1_txpmaresetdone_int;
  wire [2:0]ch1_txpmaresetmask;
  wire ch1_txpolarity;
  wire [4:0]ch1_txpostcursor;
  wire ch1_txprbsforceerr;
  wire [3:0]ch1_txprbssel;
  wire [4:0]ch1_txprecursor;
  wire ch1_txprogdivreset;
  wire ch1_txprogdivresetdone;
  wire [7:0]ch1_txrate;
  wire ch1_txresetdone;
  wire ch1_txresetdone_int;
  wire [1:0]ch1_txresetmode;
  wire [6:0]ch1_txsequence;
  wire ch1_txswing;
  wire ch1_txsyncallin;
  wire ch1_txsyncdone;
  wire ch1_txuserrdy;
  wire ch1_txusrclk;
  wire ch2_bufgtce;
  wire [3:0]ch2_bufgtcemask;
  wire [11:0]ch2_bufgtdiv;
  wire ch2_bufgtrst;
  wire [3:0]ch2_bufgtrstmask;
  wire ch2_cdrbmcdrreq;
  wire ch2_cdrfreqos;
  wire ch2_cdrincpctrl;
  wire ch2_cdrstepdir;
  wire ch2_cdrstepsq;
  wire ch2_cdrstepsx;
  wire ch2_cfokovrdfinish;
  wire ch2_cfokovrdpulse;
  wire ch2_cfokovrdrdy0;
  wire ch2_cfokovrdrdy1;
  wire ch2_cfokovrdstart;
  wire ch2_clkrsvd0;
  wire ch2_clkrsvd1;
  wire ch2_dmonfiforeset;
  wire ch2_dmonitorclk;
  wire [31:0]ch2_dmonitorout;
  wire ch2_dmonitoroutclk;
  wire ch2_eyescandataerror;
  wire ch2_eyescanreset;
  wire ch2_eyescantrigger;
  wire [15:0]ch2_gtrsvd;
  wire ch2_gtrxreset;
  wire ch2_gttxreset;
  wire ch2_hsdppcsreset;
  wire ch2_iloreset;
  wire ch2_iloresetdone;
  wire ch2_iloresetmask;
  wire [2:0]ch2_loopback;
  wire ch2_pcierstb;
  wire [15:0]ch2_pcsrsvdin;
  wire [15:0]ch2_pcsrsvdout;
  wire [11:10]ch2_pcsrsvdout_int;
  wire ch2_phyesmadaptsave;
  wire ch2_phyready;
  wire ch2_phystatus;
  wire [15:0]ch2_pinrsvdas;
  wire ch2_resetexception;
  wire [7:0]ch2_rx10gstat;
  wire ch2_rx_function_inst_n_0;
  wire ch2_rx_function_inst_n_1;
  wire ch2_rx_function_inst_n_2;
  wire [2:0]ch2_rxbufstatus;
  wire ch2_rxbyteisaligned;
  wire ch2_rxbyterealign;
  wire ch2_rxcdrhold;
  wire ch2_rxcdrlock;
  wire ch2_rxcdrovrden;
  wire ch2_rxcdrphdone;
  wire ch2_rxcdrreset;
  wire ch2_rxchanbondseq;
  wire ch2_rxchanisaligned;
  wire ch2_rxchanrealign;
  wire [4:0]ch2_rxchbondi;
  wire [4:0]ch2_rxchbondo;
  wire [1:0]ch2_rxclkcorcnt;
  wire ch2_rxcominitdet;
  wire ch2_rxcommadet;
  wire ch2_rxcomsasdet;
  wire ch2_rxcomwakedet;
  wire [15:0]ch2_rxctrl0;
  wire [15:0]ch2_rxctrl1;
  wire [7:0]ch2_rxctrl2;
  wire [7:0]ch2_rxctrl3;
  wire ch2_rxdapicodeovrden;
  wire ch2_rxdapicodereset;
  wire [127:0]ch2_rxdata;
  wire [7:0]ch2_rxdataextendrsvd;
  wire [1:0]ch2_rxdatavalid;
  wire ch2_rxdccdone;
  wire ch2_rxdlyalignerr;
  wire ch2_rxdlyalignprog;
  wire ch2_rxdlyalignreq;
  wire ch2_rxelecidle;
  wire ch2_rxeqtraining;
  wire ch2_rxfinealigndone;
  wire ch2_rxgearboxslip;
  wire [5:0]ch2_rxheader;
  wire [1:0]ch2_rxheadervalid;
  wire ch2_rxlatclk;
  wire ch2_rxlpmen;
  wire ch2_rxmldchaindone;
  wire ch2_rxmldchainreq;
  wire ch2_rxmlfinealignreq;
  wire ch2_rxmstdatapathreset;
  wire ch2_rxmstreset;
  wire ch2_rxmstresetdone;
  wire ch2_rxoobreset;
  wire ch2_rxosintdone;
  wire ch2_rxosintstarted;
  wire ch2_rxosintstrobedone;
  wire ch2_rxosintstrobestarted;
  wire ch2_rxoutclk;
  wire [4:0]ch2_rxpcsresetmask;
  wire [1:0]ch2_rxpd;
  wire ch2_rxphaligndone;
  wire ch2_rxphalignerr;
  wire ch2_rxphalignreq;
  wire [1:0]ch2_rxphalignresetmask;
  wire ch2_rxphdlypd;
  wire ch2_rxphdlyreset;
  wire ch2_rxphdlyresetdone;
  wire ch2_rxphsetinitdone;
  wire ch2_rxphsetinitreq;
  wire ch2_rxphshift180;
  wire ch2_rxphshift180done;
  wire ch2_rxpmaresetdone;
  wire ch2_rxpmaresetdone_int;
  wire [6:0]ch2_rxpmaresetmask;
  wire ch2_rxpolarity;
  wire ch2_rxprbscntreset;
  wire ch2_rxprbserr;
  wire ch2_rxprbslocked;
  wire [3:0]ch2_rxprbssel;
  wire ch2_rxprogdivreset;
  wire ch2_rxprogdivresetdone;
  wire [7:0]ch2_rxrate;
  wire ch2_rxresetdone;
  wire ch2_rxresetdone_int;
  wire [1:0]ch2_rxresetmode;
  wire ch2_rxslide;
  wire ch2_rxsliderdy;
  wire [1:0]ch2_rxstartofseq;
  wire [2:0]ch2_rxstatus;
  wire ch2_rxsyncallin;
  wire ch2_rxsyncdone;
  wire ch2_rxtermination;
  wire ch2_rxuserrdy;
  wire ch2_rxusrclk;
  wire ch2_rxvalid;
  wire [19:0]ch2_tstin;
  wire ch2_tx10gstat;
  wire ch2_tx_function_inst_n_0;
  wire ch2_tx_function_inst_n_1;
  wire ch2_tx_function_inst_n_2;
  wire [1:0]ch2_txbufstatus;
  wire ch2_txcomfinish;
  wire ch2_txcominit;
  wire ch2_txcomsas;
  wire ch2_txcomwake;
  wire [15:0]ch2_txctrl0;
  wire [15:0]ch2_txctrl1;
  wire [7:0]ch2_txctrl2;
  wire ch2_txdapicodeovrden;
  wire ch2_txdapicodereset;
  wire [127:0]ch2_txdata;
  wire [7:0]ch2_txdataextendrsvd;
  wire ch2_txdccdone;
  wire [1:0]ch2_txdeemph;
  wire ch2_txdetectrx;
  wire [4:0]ch2_txdiffctrl;
  wire ch2_txdlyalignerr;
  wire ch2_txdlyalignprog;
  wire ch2_txdlyalignreq;
  wire ch2_txelecidle;
  wire [5:0]ch2_txheader;
  wire ch2_txinhibit;
  wire ch2_txlatclk;
  wire [6:0]ch2_txmaincursor;
  wire [2:0]ch2_txmargin;
  wire ch2_txmldchaindone;
  wire ch2_txmldchainreq;
  wire ch2_txmstdatapathreset;
  wire ch2_txmstreset;
  wire ch2_txmstresetdone;
  wire ch2_txoneszeros;
  wire ch2_txoutclk;
  wire ch2_txpausedelayalign;
  wire ch2_txpcsresetmask;
  wire [1:0]ch2_txpd;
  wire ch2_txphaligndone;
  wire ch2_txphalignerr;
  wire ch2_txphalignoutrsvd;
  wire ch2_txphalignreq;
  wire [1:0]ch2_txphalignresetmask;
  wire ch2_txphdlypd;
  wire ch2_txphdlyreset;
  wire ch2_txphdlyresetdone;
  wire ch2_txphdlytstclk;
  wire ch2_txphsetinitdone;
  wire ch2_txphsetinitreq;
  wire ch2_txphshift180;
  wire ch2_txphshift180done;
  wire ch2_txpicodeovrden;
  wire ch2_txpicodereset;
  wire ch2_txpippmen;
  wire [4:0]ch2_txpippmstepsize;
  wire ch2_txpisopd;
  wire ch2_txpmaresetdone;
  wire ch2_txpmaresetdone_int;
  wire [2:0]ch2_txpmaresetmask;
  wire ch2_txpolarity;
  wire [4:0]ch2_txpostcursor;
  wire ch2_txprbsforceerr;
  wire [3:0]ch2_txprbssel;
  wire [4:0]ch2_txprecursor;
  wire ch2_txprogdivreset;
  wire ch2_txprogdivresetdone;
  wire [7:0]ch2_txrate;
  wire ch2_txresetdone;
  wire ch2_txresetdone_int;
  wire [1:0]ch2_txresetmode;
  wire [6:0]ch2_txsequence;
  wire ch2_txswing;
  wire ch2_txsyncallin;
  wire ch2_txsyncdone;
  wire ch2_txuserrdy;
  wire ch2_txusrclk;
  wire ch3_bufgtce;
  wire [3:0]ch3_bufgtcemask;
  wire [11:0]ch3_bufgtdiv;
  wire ch3_bufgtrst;
  wire [3:0]ch3_bufgtrstmask;
  wire ch3_cdrbmcdrreq;
  wire ch3_cdrfreqos;
  wire ch3_cdrincpctrl;
  wire ch3_cdrstepdir;
  wire ch3_cdrstepsq;
  wire ch3_cdrstepsx;
  wire ch3_cfokovrdfinish;
  wire ch3_cfokovrdpulse;
  wire ch3_cfokovrdrdy0;
  wire ch3_cfokovrdrdy1;
  wire ch3_cfokovrdstart;
  wire ch3_clkrsvd0;
  wire ch3_clkrsvd1;
  wire ch3_dmonfiforeset;
  wire ch3_dmonitorclk;
  wire [31:0]ch3_dmonitorout;
  wire ch3_dmonitoroutclk;
  wire ch3_eyescandataerror;
  wire ch3_eyescanreset;
  wire ch3_eyescantrigger;
  wire [15:0]ch3_gtrsvd;
  wire ch3_gtrxreset;
  wire ch3_gttxreset;
  wire ch3_hsdppcsreset;
  wire ch3_iloreset;
  wire ch3_iloresetdone;
  wire ch3_iloresetmask;
  wire [2:0]ch3_loopback;
  wire ch3_pcierstb;
  wire [15:0]ch3_pcsrsvdin;
  wire [15:0]ch3_pcsrsvdout;
  wire [11:10]ch3_pcsrsvdout_int;
  wire ch3_phyesmadaptsave;
  wire ch3_phyready;
  wire ch3_phystatus;
  wire [15:0]ch3_pinrsvdas;
  wire ch3_resetexception;
  wire [7:0]ch3_rx10gstat;
  wire ch3_rx_function_inst_n_0;
  wire ch3_rx_function_inst_n_1;
  wire ch3_rx_function_inst_n_2;
  wire [2:0]ch3_rxbufstatus;
  wire ch3_rxbyteisaligned;
  wire ch3_rxbyterealign;
  wire ch3_rxcdrhold;
  wire ch3_rxcdrlock;
  wire ch3_rxcdrovrden;
  wire ch3_rxcdrphdone;
  wire ch3_rxcdrreset;
  wire ch3_rxchanbondseq;
  wire ch3_rxchanisaligned;
  wire ch3_rxchanrealign;
  wire [4:0]ch3_rxchbondi;
  wire [4:0]ch3_rxchbondo;
  wire [1:0]ch3_rxclkcorcnt;
  wire ch3_rxcominitdet;
  wire ch3_rxcommadet;
  wire ch3_rxcomsasdet;
  wire ch3_rxcomwakedet;
  wire [15:0]ch3_rxctrl0;
  wire [15:0]ch3_rxctrl1;
  wire [7:0]ch3_rxctrl2;
  wire [7:0]ch3_rxctrl3;
  wire ch3_rxdapicodeovrden;
  wire ch3_rxdapicodereset;
  wire [127:0]ch3_rxdata;
  wire [7:0]ch3_rxdataextendrsvd;
  wire [1:0]ch3_rxdatavalid;
  wire ch3_rxdccdone;
  wire ch3_rxdlyalignerr;
  wire ch3_rxdlyalignprog;
  wire ch3_rxdlyalignreq;
  wire ch3_rxelecidle;
  wire ch3_rxeqtraining;
  wire ch3_rxfinealigndone;
  wire ch3_rxgearboxslip;
  wire [5:0]ch3_rxheader;
  wire [1:0]ch3_rxheadervalid;
  wire ch3_rxlatclk;
  wire ch3_rxlpmen;
  wire ch3_rxmldchaindone;
  wire ch3_rxmldchainreq;
  wire ch3_rxmlfinealignreq;
  wire ch3_rxmstdatapathreset;
  wire ch3_rxmstreset;
  wire ch3_rxmstresetdone;
  wire ch3_rxoobreset;
  wire ch3_rxosintdone;
  wire ch3_rxosintstarted;
  wire ch3_rxosintstrobedone;
  wire ch3_rxosintstrobestarted;
  wire ch3_rxoutclk;
  wire [4:0]ch3_rxpcsresetmask;
  wire [1:0]ch3_rxpd;
  wire ch3_rxphaligndone;
  wire ch3_rxphalignerr;
  wire ch3_rxphalignreq;
  wire [1:0]ch3_rxphalignresetmask;
  wire ch3_rxphdlypd;
  wire ch3_rxphdlyreset;
  wire ch3_rxphdlyresetdone;
  wire ch3_rxphsetinitdone;
  wire ch3_rxphsetinitreq;
  wire ch3_rxphshift180;
  wire ch3_rxphshift180done;
  wire ch3_rxpmaresetdone;
  wire ch3_rxpmaresetdone_int;
  wire [6:0]ch3_rxpmaresetmask;
  wire ch3_rxpolarity;
  wire ch3_rxprbscntreset;
  wire ch3_rxprbserr;
  wire ch3_rxprbslocked;
  wire [3:0]ch3_rxprbssel;
  wire ch3_rxprogdivreset;
  wire ch3_rxprogdivresetdone;
  wire [7:0]ch3_rxrate;
  wire ch3_rxresetdone;
  wire ch3_rxresetdone_int;
  wire [1:0]ch3_rxresetmode;
  wire ch3_rxslide;
  wire ch3_rxsliderdy;
  wire [1:0]ch3_rxstartofseq;
  wire [2:0]ch3_rxstatus;
  wire ch3_rxsyncallin;
  wire ch3_rxsyncdone;
  wire ch3_rxtermination;
  wire ch3_rxuserrdy;
  wire ch3_rxusrclk;
  wire ch3_rxvalid;
  wire [19:0]ch3_tstin;
  wire ch3_tx10gstat;
  wire ch3_tx_function_inst_n_0;
  wire ch3_tx_function_inst_n_1;
  wire ch3_tx_function_inst_n_2;
  wire [1:0]ch3_txbufstatus;
  wire ch3_txcomfinish;
  wire ch3_txcominit;
  wire ch3_txcomsas;
  wire ch3_txcomwake;
  wire [15:0]ch3_txctrl0;
  wire [15:0]ch3_txctrl1;
  wire [7:0]ch3_txctrl2;
  wire ch3_txdapicodeovrden;
  wire ch3_txdapicodereset;
  wire [127:0]ch3_txdata;
  wire [7:0]ch3_txdataextendrsvd;
  wire ch3_txdccdone;
  wire [1:0]ch3_txdeemph;
  wire ch3_txdetectrx;
  wire [4:0]ch3_txdiffctrl;
  wire ch3_txdlyalignerr;
  wire ch3_txdlyalignprog;
  wire ch3_txdlyalignreq;
  wire ch3_txelecidle;
  wire [5:0]ch3_txheader;
  wire ch3_txinhibit;
  wire ch3_txlatclk;
  wire [6:0]ch3_txmaincursor;
  wire [2:0]ch3_txmargin;
  wire ch3_txmldchaindone;
  wire ch3_txmldchainreq;
  wire ch3_txmstdatapathreset;
  wire ch3_txmstreset;
  wire ch3_txmstresetdone;
  wire ch3_txoneszeros;
  wire ch3_txoutclk;
  wire ch3_txpausedelayalign;
  wire ch3_txpcsresetmask;
  wire [1:0]ch3_txpd;
  wire ch3_txphaligndone;
  wire ch3_txphalignerr;
  wire ch3_txphalignoutrsvd;
  wire ch3_txphalignreq;
  wire [1:0]ch3_txphalignresetmask;
  wire ch3_txphdlypd;
  wire ch3_txphdlyreset;
  wire ch3_txphdlyresetdone;
  wire ch3_txphdlytstclk;
  wire ch3_txphsetinitdone;
  wire ch3_txphsetinitreq;
  wire ch3_txphshift180;
  wire ch3_txphshift180done;
  wire ch3_txpicodeovrden;
  wire ch3_txpicodereset;
  wire ch3_txpippmen;
  wire [4:0]ch3_txpippmstepsize;
  wire ch3_txpisopd;
  wire ch3_txpmaresetdone;
  wire ch3_txpmaresetdone_int;
  wire [2:0]ch3_txpmaresetmask;
  wire ch3_txpolarity;
  wire [4:0]ch3_txpostcursor;
  wire ch3_txprbsforceerr;
  wire [3:0]ch3_txprbssel;
  wire [4:0]ch3_txprecursor;
  wire ch3_txprogdivreset;
  wire ch3_txprogdivresetdone;
  wire [7:0]ch3_txrate;
  wire ch3_txresetdone;
  wire ch3_txresetdone_int;
  wire [1:0]ch3_txresetmode;
  wire [6:0]ch3_txsequence;
  wire ch3_txswing;
  wire ch3_txsyncallin;
  wire ch3_txsyncdone;
  wire ch3_txuserrdy;
  wire ch3_txusrclk;
  wire [30:0]cmd_to_axi;
  wire correcterr;
  wire [15:0]ctrlrsvdin0;
  wire [13:0]ctrlrsvdin1;
  wire [31:0]ctrlrsvdout;
  wire debugtraceclk;
  wire debugtraceready;
  wire [15:0]debugtracetdata;
  wire debugtracetvalid;
  wire [15:0]gpi;
  wire [7:0]gpi_to_gt;
  wire [15:0]gpo;
  wire [7:0]gpoToLogic;
  wire gtpowergood;
  wire gtpowergood_int;
  wire hsclk0_lcpllclkrsvd0;
  wire hsclk0_lcpllclkrsvd1;
  wire hsclk0_lcpllfbclklost;
  wire [7:0]hsclk0_lcpllfbdiv;
  wire hsclk0_lcplllock;
  wire hsclk0_lcpllpd;
  wire hsclk0_lcpllrefclklost;
  wire hsclk0_lcpllrefclkmonitor;
  wire [2:0]hsclk0_lcpllrefclksel;
  wire hsclk0_lcpllreset;
  wire hsclk0_lcpllresetbypassmode;
  wire [1:0]hsclk0_lcpllresetmask;
  wire [7:0]hsclk0_lcpllrsvd0;
  wire [7:0]hsclk0_lcpllrsvd1;
  wire [7:0]hsclk0_lcpllrsvdout;
  wire [25:0]hsclk0_lcpllsdmdata;
  wire hsclk0_lcpllsdmtoggle;
  wire hsclk0_rpllclkrsvd0;
  wire hsclk0_rpllclkrsvd1;
  wire hsclk0_rpllfbclklost;
  wire [7:0]hsclk0_rpllfbdiv;
  wire hsclk0_rplllock;
  wire hsclk0_rpllpd;
  wire hsclk0_rpllrefclklost;
  wire hsclk0_rpllrefclkmonitor;
  wire [2:0]hsclk0_rpllrefclksel;
  wire hsclk0_rpllreset;
  wire hsclk0_rpllresetbypassmode;
  wire [1:0]hsclk0_rpllresetmask;
  wire [7:0]hsclk0_rpllrsvd0;
  wire [7:0]hsclk0_rpllrsvd1;
  wire [7:0]hsclk0_rpllrsvdout;
  wire [25:0]hsclk0_rpllsdmdata;
  wire hsclk0_rpllsdmtoggle;
  wire hsclk0_rxrecclkout0;
  wire hsclk0_rxrecclkout1;
  wire [1:0]hsclk0_rxrecclksel;
  wire hsclk1_lcpllclkrsvd0;
  wire hsclk1_lcpllclkrsvd1;
  wire hsclk1_lcpllfbclklost;
  wire [7:0]hsclk1_lcpllfbdiv;
  wire hsclk1_lcplllock;
  wire hsclk1_lcpllpd;
  wire hsclk1_lcpllrefclklost;
  wire hsclk1_lcpllrefclkmonitor;
  wire [2:0]hsclk1_lcpllrefclksel;
  wire hsclk1_lcpllreset;
  wire hsclk1_lcpllresetbypassmode;
  wire [1:0]hsclk1_lcpllresetmask;
  wire [7:0]hsclk1_lcpllrsvd0;
  wire [7:0]hsclk1_lcpllrsvd1;
  wire [7:0]hsclk1_lcpllrsvdout;
  wire [25:0]hsclk1_lcpllsdmdata;
  wire hsclk1_lcpllsdmtoggle;
  wire hsclk1_rpllclkrsvd0;
  wire hsclk1_rpllclkrsvd1;
  wire hsclk1_rpllfbclklost;
  wire [7:0]hsclk1_rpllfbdiv;
  wire hsclk1_rplllock;
  wire hsclk1_rpllpd;
  wire hsclk1_rpllrefclklost;
  wire hsclk1_rpllrefclkmonitor;
  wire [2:0]hsclk1_rpllrefclksel;
  wire hsclk1_rpllreset;
  wire hsclk1_rpllresetbypassmode;
  wire [1:0]hsclk1_rpllresetmask;
  wire [7:0]hsclk1_rpllrsvd0;
  wire [7:0]hsclk1_rpllrsvd1;
  wire [7:0]hsclk1_rpllrsvdout;
  wire [25:0]hsclk1_rpllsdmdata;
  wire hsclk1_rpllsdmtoggle;
  wire hsclk1_rxrecclkout0;
  wire hsclk1_rxrecclkout1;
  wire [1:0]hsclk1_rxrecclksel;
  wire [3:0]mstrxresetdone_int;
  wire [3:0]msttxresetdone_int;
  wire p_0_in;
  wire pcielinkreachtarget;
  wire [5:0]pcieltssm;
  wire [5:0]pipenorthin;
  wire [5:0]pipenorthout;
  wire [5:0]pipesouthin;
  wire [5:0]pipesouthout;
  wire rcalenb;
  wire refclk0_clktestsig;
  wire refclk0_clktestsigint;
  wire refclk0_gtrefclkpd;
  wire refclk0_gtrefclkpdint;
  wire refclk1_clktestsig;
  wire refclk1_clktestsigint;
  wire refclk1_gtrefclkpd;
  wire refclk1_gtrefclkpdint;
  wire [1:0]resetdone_northin;
  wire [1:0]resetdone_northout;
  wire [1:0]resetdone_southin;
  wire [1:0]resetdone_southout;
  wire rrst;
  wire rxmarginclk;
  wire rxmarginreqack;
  wire [3:0]rxmarginreqcmd;
  wire [1:0]rxmarginreqlanenum;
  wire [7:0]rxmarginreqpayld;
  wire rxmarginreqreq;
  wire rxmarginresack;
  wire [3:0]rxmarginrescmd;
  wire [1:0]rxmarginreslanenum;
  wire [7:0]rxmarginrespayld;
  wire rxmarginresreq;
  wire [3:0]rxn;
  wire [3:0]rxp;
  wire [3:0]rxpinorthin;
  wire [3:0]rxpinorthout;
  wire [3:0]rxpisouthin;
  wire [3:0]rxpisouthout;
  wire s2_axis_tready;
  wire [1:0]state;
  wire \state[0]_i_1_n_0 ;
  wire \state[1]_i_1_n_0 ;
  wire tlast_r;
  wire tlast_r_i_1_n_0;
  wire trigackin0;
  wire trigackout0;
  wire trigin0;
  wire trigout0;
  wire tvalid_r;
  wire tvalid_r_i_1_n_0;
  wire [3:0]txn;
  wire [3:0]txp;
  wire [3:0]txpinorthin;
  wire [3:0]txpinorthout;
  wire [3:0]txpisouthin;
  wire [3:0]txpisouthout;
  wire ubenable;
  wire ubinterrupt;
  wire [11:0]ubintr;
  wire ubiolmbrst;
  wire ubmbrst;
  wire ubrxuart;
  wire ubtxuart;
  wire uncorrecterr;
  wire NLW_quad_inst_M0_AXIS_TLAST_UNCONNECTED;
  wire NLW_quad_inst_M0_AXIS_TVALID_UNCONNECTED;
  wire NLW_quad_inst_M1_AXIS_TLAST_UNCONNECTED;
  wire NLW_quad_inst_M1_AXIS_TVALID_UNCONNECTED;
  wire NLW_quad_inst_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_quad_inst_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_quad_inst_S0_AXIS_TREADY_UNCONNECTED;
  wire NLW_quad_inst_S1_AXIS_TREADY_UNCONNECTED;
  wire [31:0]NLW_quad_inst_M0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_quad_inst_M1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_quad_inst_M2_AXIS_TDATA_UNCONNECTED;

  assign s_axi_lite_arready = \<const0> ;
  assign s_axi_lite_awready = \<const0> ;
  assign s_axi_lite_bresp[1] = \<const0> ;
  assign s_axi_lite_bresp[0] = \<const0> ;
  assign s_axi_lite_bvalid = \<const0> ;
  assign s_axi_lite_rdata[31] = \<const0> ;
  assign s_axi_lite_rdata[30] = \<const0> ;
  assign s_axi_lite_rdata[29] = \<const0> ;
  assign s_axi_lite_rdata[28] = \<const0> ;
  assign s_axi_lite_rdata[27] = \<const0> ;
  assign s_axi_lite_rdata[26] = \<const0> ;
  assign s_axi_lite_rdata[25] = \<const0> ;
  assign s_axi_lite_rdata[24] = \<const0> ;
  assign s_axi_lite_rdata[23] = \<const0> ;
  assign s_axi_lite_rdata[22] = \<const0> ;
  assign s_axi_lite_rdata[21] = \<const0> ;
  assign s_axi_lite_rdata[20] = \<const0> ;
  assign s_axi_lite_rdata[19] = \<const0> ;
  assign s_axi_lite_rdata[18] = \<const0> ;
  assign s_axi_lite_rdata[17] = \<const0> ;
  assign s_axi_lite_rdata[16] = \<const0> ;
  assign s_axi_lite_rdata[15] = \<const0> ;
  assign s_axi_lite_rdata[14] = \<const0> ;
  assign s_axi_lite_rdata[13] = \<const0> ;
  assign s_axi_lite_rdata[12] = \<const0> ;
  assign s_axi_lite_rdata[11] = \<const0> ;
  assign s_axi_lite_rdata[10] = \<const0> ;
  assign s_axi_lite_rdata[9] = \<const0> ;
  assign s_axi_lite_rdata[8] = \<const0> ;
  assign s_axi_lite_rdata[7] = \<const0> ;
  assign s_axi_lite_rdata[6] = \<const0> ;
  assign s_axi_lite_rdata[5] = \<const0> ;
  assign s_axi_lite_rdata[4] = \<const0> ;
  assign s_axi_lite_rdata[3] = \<const0> ;
  assign s_axi_lite_rdata[2] = \<const0> ;
  assign s_axi_lite_rdata[1] = \<const0> ;
  assign s_axi_lite_rdata[0] = \<const0> ;
  assign s_axi_lite_rresp[1] = \<const0> ;
  assign s_axi_lite_rresp[0] = \<const0> ;
  assign s_axi_lite_rvalid = \<const0> ;
  assign s_axi_lite_wready = \<const0> ;
  GND GND
       (.G(\<const0> ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_apb_memcell_arb apb_memcell_arb
       (.D(apb3prdata_quad_int),
        .Q(apb3paddr_quad_int),
        .apb3clk(apb3clk),
        .apb3paddr(apb3paddr),
        .apb3penable(apb3penable),
        .apb3penable_quad_int(apb3penable_quad_int),
        .apb3prdata(apb3prdata),
        .apb3pready_quad_int(apb3pready_quad_int),
        .apb3psel(apb3psel),
        .apb3pslverr(apb3pslverr),
        .apb3pslverr_quad_int(apb3pslverr_quad_int),
        .apb3pwdata(apb3pwdata),
        .apb3pwrite(apb3pwrite),
        .apb3pwrite_quad_int(apb3pwrite_quad_int),
        .apb3sel_quad_int(apb3sel_quad_int),
        .apb_user_prdy_r_reg_0(apb3pready),
        .\di_reg[31]_0 (apb3pwdata_quad_int),
        .p_0_in(p_0_in));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function__xdcDup__1 ch0_rx_function_inst
       (.D({ch0_rx_function_inst_n_0,ch0_rx_function_inst_n_1,ch0_rx_function_inst_n_2,gpoToLogic[4]}),
        .GPI(gpi_to_gt[4]),
        .Q(cmd_to_axi[18:16]),
        .apb3clk(apb3clk),
        .ch0_rxmstdatapathreset(ch0_rxmstdatapathreset),
        .ch0_rxmstreset(ch0_rxmstreset),
        .ch0_rxrate(ch0_rxrate),
        .gpi(gpi[4]),
        .gpo(gpo[4]),
        .out({ch0_rx_function_inst_n_0,ch0_rx_function_inst_n_1,ch0_rx_function_inst_n_2}),
        .rrst(rrst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function__xdcDup__1 ch0_tx_function_inst
       (.D({ch0_tx_function_inst_n_0,ch0_tx_function_inst_n_1,ch0_tx_function_inst_n_2,gpoToLogic[0]}),
        .GPI(gpi_to_gt[0]),
        .Q(cmd_to_axi[3:0]),
        .apb3clk(apb3clk),
        .ch0_txmstdatapathreset(ch0_txmstdatapathreset),
        .ch0_txmstreset(ch0_txmstreset),
        .ch0_txprbssel(ch0_txprbssel),
        .ch0_txrate(ch0_txrate),
        .gpi(gpi[0]),
        .gpo(gpo[0]),
        .out({ch0_tx_function_inst_n_0,ch0_tx_function_inst_n_1,ch0_tx_function_inst_n_2}),
        .rrst(rrst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function__xdcDup__2 ch1_rx_function_inst
       (.D({ch1_rx_function_inst_n_0,ch1_rx_function_inst_n_1,ch1_rx_function_inst_n_2,gpoToLogic[5]}),
        .GPI(gpi_to_gt[5]),
        .Q(cmd_to_axi[22:20]),
        .apb3clk(apb3clk),
        .ch1_rxmstdatapathreset(ch1_rxmstdatapathreset),
        .ch1_rxmstreset(ch1_rxmstreset),
        .ch1_rxrate(ch1_rxrate),
        .gpi(gpi[5]),
        .gpo(gpo[5]),
        .out({ch1_rx_function_inst_n_0,ch1_rx_function_inst_n_1,ch1_rx_function_inst_n_2}),
        .rrst(rrst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function__xdcDup__2 ch1_tx_function_inst
       (.D({ch1_tx_function_inst_n_0,ch1_tx_function_inst_n_1,ch1_tx_function_inst_n_2,gpoToLogic[1]}),
        .GPI(gpi_to_gt[1]),
        .Q(cmd_to_axi[7:4]),
        .apb3clk(apb3clk),
        .ch1_txmstdatapathreset(ch1_txmstdatapathreset),
        .ch1_txmstreset(ch1_txmstreset),
        .ch1_txprbssel(ch1_txprbssel),
        .ch1_txrate(ch1_txrate),
        .gpi(gpi[1]),
        .gpo(gpo[1]),
        .out({ch1_tx_function_inst_n_0,ch1_tx_function_inst_n_1,ch1_tx_function_inst_n_2}),
        .rrst(rrst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function__xdcDup__3 ch2_rx_function_inst
       (.D({ch2_rx_function_inst_n_0,ch2_rx_function_inst_n_1,ch2_rx_function_inst_n_2,gpoToLogic[6]}),
        .GPI(gpi_to_gt[6]),
        .Q(cmd_to_axi[26:24]),
        .apb3clk(apb3clk),
        .ch2_rxmstdatapathreset(ch2_rxmstdatapathreset),
        .ch2_rxmstreset(ch2_rxmstreset),
        .ch2_rxrate(ch2_rxrate),
        .gpi(gpi[6]),
        .gpo(gpo[6]),
        .out({ch2_rx_function_inst_n_0,ch2_rx_function_inst_n_1,ch2_rx_function_inst_n_2}),
        .rrst(rrst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function__xdcDup__3 ch2_tx_function_inst
       (.D({ch2_tx_function_inst_n_0,ch2_tx_function_inst_n_1,ch2_tx_function_inst_n_2,gpoToLogic[2]}),
        .GPI(gpi_to_gt[2]),
        .Q(cmd_to_axi[11:8]),
        .apb3clk(apb3clk),
        .ch2_txmstdatapathreset(ch2_txmstdatapathreset),
        .ch2_txmstreset(ch2_txmstreset),
        .ch2_txprbssel(ch2_txprbssel),
        .ch2_txrate(ch2_txrate),
        .gpi(gpi[2]),
        .gpo(gpo[2]),
        .out({ch2_tx_function_inst_n_0,ch2_tx_function_inst_n_1,ch2_tx_function_inst_n_2}),
        .rrst(rrst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function ch3_rx_function_inst
       (.D({ch3_rx_function_inst_n_0,ch3_rx_function_inst_n_1,ch3_rx_function_inst_n_2,gpoToLogic[7]}),
        .GPI(gpi_to_gt[7]),
        .Q(cmd_to_axi[30:28]),
        .apb3clk(apb3clk),
        .ch3_rxmstdatapathreset(ch3_rxmstdatapathreset),
        .ch3_rxmstreset(ch3_rxmstreset),
        .ch3_rxrate(ch3_rxrate),
        .gpi(gpi[7]),
        .gpo(gpo[7]),
        .gtpowergood_int(gtpowergood_int),
        .out({ch3_rx_function_inst_n_0,ch3_rx_function_inst_n_1,ch3_rx_function_inst_n_2}),
        .p_0_in(p_0_in),
        .rrst(rrst),
        .\rrst_r_reg[3]_0 (gpo[15]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function ch3_tx_function_inst
       (.D({ch3_tx_function_inst_n_0,ch3_tx_function_inst_n_1,ch3_tx_function_inst_n_2,gpoToLogic[3]}),
        .GPI(gpi_to_gt[3]),
        .Q(cmd_to_axi[15:12]),
        .apb3clk(apb3clk),
        .ch3_txmstdatapathreset(ch3_txmstdatapathreset),
        .ch3_txmstreset(ch3_txmstreset),
        .ch3_txprbssel(ch3_txprbssel),
        .ch3_txrate(ch3_txrate),
        .gpi(gpi[3]),
        .gpo(gpo[3]),
        .out({ch3_tx_function_inst_n_0,ch3_tx_function_inst_n_1,ch3_tx_function_inst_n_2}),
        .rrst(rrst));
  LUT2 #(
    .INIT(4'h8)) 
    gtpowergood_INST_0
       (.I0(gpo[15]),
        .I1(gtpowergood_int),
        .O(gtpowergood));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTYE5_QUAD #(
    .A_CFG0(32'h00000740),
    .A_CFG1(32'h4E124E12),
    .A_CFG2(32'h60000000),
    .A_CFG3(32'hE0000000),
    .A_CFG4(32'h60000000),
    .A_CFG5(32'hE0000000),
    .CH0_ADAPT_APT_CFG(32'h00000000),
    .CH0_ADAPT_CAL_CFG(32'h81EE6400),
    .CH0_ADAPT_DFE_CFG(32'h00000040),
    .CH0_ADAPT_GC_CFG0(32'h00901070),
    .CH0_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH0_ADAPT_GC_CFG2(32'h002000E8),
    .CH0_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH0_ADAPT_GEN_CFG0(32'h00320000),
    .CH0_ADAPT_GEN_CFG1(32'h00000000),
    .CH0_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH0_ADAPT_GEN_CFG3(32'h10000000),
    .CH0_ADAPT_H01_CFG(32'h012002A0),
    .CH0_ADAPT_H23_CFG(32'h01A001A0),
    .CH0_ADAPT_H45_CFG(32'h01A001A0),
    .CH0_ADAPT_H67_CFG(32'h01A001A0),
    .CH0_ADAPT_H89_CFG(32'h01A001A0),
    .CH0_ADAPT_HAB_CFG(32'h01A001A0),
    .CH0_ADAPT_HCD_CFG(32'h01A001A0),
    .CH0_ADAPT_HEF_CFG(32'h01A003A0),
    .CH0_ADAPT_KH_CFG0(32'h20087E3F),
    .CH0_ADAPT_KH_CFG1(32'h00000000),
    .CH0_ADAPT_KH_CFG2(32'h000043A0),
    .CH0_ADAPT_KH_CFG3(32'h00000000),
    .CH0_ADAPT_KH_CFG4(32'h00007BA0),
    .CH0_ADAPT_KH_CFG5(32'h00000000),
    .CH0_ADAPT_KL_CFG0(32'h00007E20),
    .CH0_ADAPT_KL_CFG1(32'h000043A0),
    .CH0_ADAPT_LCK_CFG0(32'h00004000),
    .CH0_ADAPT_LCK_CFG1(32'h00004000),
    .CH0_ADAPT_LCK_CFG2(32'h00000000),
    .CH0_ADAPT_LCK_CFG3(32'h00000000),
    .CH0_ADAPT_LOP_CFG(32'hEE000660),
    .CH0_ADAPT_OS_CFG(32'h80000120),
    .CH0_CHCLK_ILO_CFG(32'h00640033),
    .CH0_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH0_CHCLK_RSV_CFG(32'h00000000),
    .CH0_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH0_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH0_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH0_CHCLK_RXPI_CFG(32'h0050080C),
    .CH0_CHCLK_TXCAL_CFG(32'h00400020),
    .CH0_CHCLK_TXPI_CFG0(32'h0047080F),
    .CH0_CHL_RSV_CFG0(32'hC0000009),
    .CH0_CHL_RSV_CFG1(32'h00000000),
    .CH0_CHL_RSV_CFG2(32'h00000000),
    .CH0_CHL_RSV_CFG3(32'h00000000),
    .CH0_CHL_RSV_CFG4(32'h00000000),
    .CH0_DA_CFG(32'h000A000A),
    .CH0_EYESCAN_CFG0(32'h00000800),
    .CH0_EYESCAN_CFG1(32'h00000000),
    .CH0_EYESCAN_CFG10(32'h00000000),
    .CH0_EYESCAN_CFG11(32'h00000000),
    .CH0_EYESCAN_CFG12(32'h00000000),
    .CH0_EYESCAN_CFG13(32'h00000000),
    .CH0_EYESCAN_CFG14(32'h00000000),
    .CH0_EYESCAN_CFG15(32'h00000000),
    .CH0_EYESCAN_CFG16(32'h00000000),
    .CH0_EYESCAN_CFG2(32'h00000000),
    .CH0_EYESCAN_CFG3(32'h00000000),
    .CH0_EYESCAN_CFG4(32'h00000000),
    .CH0_EYESCAN_CFG5(32'h00000000),
    .CH0_EYESCAN_CFG6(32'h00000000),
    .CH0_EYESCAN_CFG7(32'h00000000),
    .CH0_EYESCAN_CFG8(32'h00000000),
    .CH0_EYESCAN_CFG9(32'h00000000),
    .CH0_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH0_FABRIC_INTF_CFG1(32'h00008400),
    .CH0_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH0_FABRIC_INTF_CFG3(32'h00000000),
    .CH0_FABRIC_INTF_CFG4(32'h00005000),
    .CH0_FABRIC_INTF_CFG5(32'h00006402),
    .CH0_INSTANTIATED(1'b1),
    .CH0_MONITOR_CFG(32'h00000000),
    .CH0_PIPE_CTRL_CFG0(32'h00044860),
    .CH0_PIPE_CTRL_CFG1(32'h00200293),
    .CH0_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH0_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH0_PIPE_CTRL_CFG3(32'h0498012F),
    .CH0_PIPE_CTRL_CFG4(32'h00440000),
    .CH0_PIPE_CTRL_CFG5(32'h20000000),
    .CH0_PIPE_CTRL_CFG6(32'h3D900064),
    .CH0_PIPE_CTRL_CFG7(32'h0411D11D),
    .CH0_PIPE_CTRL_CFG8(32'h02046118),
    .CH0_PIPE_CTRL_CFG9(32'h80900000),
    .CH0_PIPE_TX_EQ_CFG0(32'h0A756BD8),
    .CH0_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH0_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH0_PIPE_TX_EQ_CFG3(32'h00000192),
    .CH0_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH0_RESET_CFG(32'h08100025),
    .CH0_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH0_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH0_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH0_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH0_RESET_TIME_CFG0(32'h02108401),
    .CH0_RESET_TIME_CFG1(32'h02108421),
    .CH0_RESET_TIME_CFG2(32'h02108421),
    .CH0_RESET_TIME_CFG3(32'h85082421),
    .CH0_RXOUTCLK_FREQ(60.606100),
    .CH0_RXOUTCLK_REF_FREQ(400.000000),
    .CH0_RXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH0_RX_CDR_CFG0(32'hB4050042),
    .CH0_RX_CDR_CFG1(32'h60000100),
    .CH0_RX_CDR_CFG2(32'h08004A49),
    .CH0_RX_CDR_CFG3(32'h000B5CF6),
    .CH0_RX_CDR_CFG4(32'h243C3000),
    .CH0_RX_CRC_CFG0(32'h00007880),
    .CH0_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH0_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH0_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH0_RX_CTLE_CFG0(32'h01DC0100),
    .CH0_RX_CTLE_CFG1(32'h40000000),
    .CH0_RX_DACI2V_CFG0(32'h04008ECA),
    .CH0_RX_DATA_RATE(8.000000),
    .CH0_RX_DFE_CFG0(32'hD0025408),
    .CH0_RX_ELASTIC_BUF_CFG0(32'h0040277C),
    .CH0_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH0_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH0_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH0_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH0_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH0_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH0_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH0_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH0_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH0_RX_MISC_CFG0(32'h50000000),
    .CH0_RX_OOB_CFG0(32'h2454C204),
    .CH0_RX_OOB_CFG1(32'h010241C4),
    .CH0_RX_PAD_CFG0(32'h00000000),
    .CH0_RX_PAD_CFG1(32'h1044497A),
    .CH0_RX_PCS_CFG0(32'h2835F130),
    .CH0_RX_PCS_CFG1(32'hB4040800),
    .CH0_RX_PCS_CFG2(32'h000000F1),
    .CH0_RX_PCS_CFG3(32'h1C190F0F),
    .CH0_RX_PCS_CFG4(32'h4280A002),
    .CH0_RX_PHALIGN_CFG0(32'h00118003),
    .CH0_RX_PHALIGN_CFG1(32'h5883800A),
    .CH0_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH0_RX_PHALIGN_CFG3(32'h58038000),
    .CH0_RX_PHALIGN_CFG4(32'h0000020A),
    .CH0_RX_PHALIGN_CFG5(32'h03020000),
    .CH0_SIM_MODE("FAST"),
    .CH0_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH0_SIM_RESET_SPEEDUP("TRUE"),
    .CH0_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH0_TXOUTCLK_FREQ(60.606100),
    .CH0_TXOUTCLK_REF_FREQ(400.000000),
    .CH0_TXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH0_TX_10G_CFG0(32'h00000000),
    .CH0_TX_10G_CFG1(32'h40000000),
    .CH0_TX_10G_CFG2(32'h00000000),
    .CH0_TX_10G_CFG3(32'h00000000),
    .CH0_TX_ANA_CFG0(32'h000000D0),
    .CH0_TX_CRC_CFG0(32'h00007800),
    .CH0_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH0_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH0_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH0_TX_DATA_RATE(8.000000),
    .CH0_TX_DRV_CFG0(32'h00400000),
    .CH0_TX_DRV_CFG1(32'h00001800),
    .CH0_TX_PCS_CFG0(32'h62600131),
    .CH0_TX_PCS_CFG1(32'h2835557C),
    .CH0_TX_PCS_CFG2(32'h1555F2AA),
    .CH0_TX_PCS_CFG3(32'h000AAA83),
    .CH0_TX_PHALIGN_CFG0(32'h00118000),
    .CH0_TX_PHALIGN_CFG1(32'h02C47005),
    .CH0_TX_PHALIGN_CFG2(32'h00058038),
    .CH0_TX_PHALIGN_CFG3(32'h00000000),
    .CH0_TX_PHALIGN_CFG4(32'h181600E0),
    .CH0_TX_PHALIGN_CFG5(32'h00000100),
    .CH0_TX_PIPPM_CFG(32'h02000000),
    .CH0_TX_SER_CFG0(32'h00000000),
    .CH1_ADAPT_APT_CFG(32'h00000000),
    .CH1_ADAPT_CAL_CFG(32'h81EE6400),
    .CH1_ADAPT_DFE_CFG(32'h00000040),
    .CH1_ADAPT_GC_CFG0(32'h00901070),
    .CH1_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH1_ADAPT_GC_CFG2(32'h002000E8),
    .CH1_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH1_ADAPT_GEN_CFG0(32'h00320000),
    .CH1_ADAPT_GEN_CFG1(32'h00000000),
    .CH1_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH1_ADAPT_GEN_CFG3(32'h10000000),
    .CH1_ADAPT_H01_CFG(32'h012002A0),
    .CH1_ADAPT_H23_CFG(32'h01A001A0),
    .CH1_ADAPT_H45_CFG(32'h01A001A0),
    .CH1_ADAPT_H67_CFG(32'h01A001A0),
    .CH1_ADAPT_H89_CFG(32'h01A001A0),
    .CH1_ADAPT_HAB_CFG(32'h01A001A0),
    .CH1_ADAPT_HCD_CFG(32'h01A001A0),
    .CH1_ADAPT_HEF_CFG(32'h01A003A0),
    .CH1_ADAPT_KH_CFG0(32'h20087E3F),
    .CH1_ADAPT_KH_CFG1(32'h00000000),
    .CH1_ADAPT_KH_CFG2(32'h000043A0),
    .CH1_ADAPT_KH_CFG3(32'h00000000),
    .CH1_ADAPT_KH_CFG4(32'h00007BA0),
    .CH1_ADAPT_KH_CFG5(32'h00000000),
    .CH1_ADAPT_KL_CFG0(32'h00007E20),
    .CH1_ADAPT_KL_CFG1(32'h000043A0),
    .CH1_ADAPT_LCK_CFG0(32'h00004000),
    .CH1_ADAPT_LCK_CFG1(32'h00004000),
    .CH1_ADAPT_LCK_CFG2(32'h00000000),
    .CH1_ADAPT_LCK_CFG3(32'h00000000),
    .CH1_ADAPT_LOP_CFG(32'hEE000660),
    .CH1_ADAPT_OS_CFG(32'h80000120),
    .CH1_CHCLK_ILO_CFG(32'h00640033),
    .CH1_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH1_CHCLK_RSV_CFG(32'h00000000),
    .CH1_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH1_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH1_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH1_CHCLK_RXPI_CFG(32'h0050080C),
    .CH1_CHCLK_TXCAL_CFG(32'h00400020),
    .CH1_CHCLK_TXPI_CFG0(32'h0047080F),
    .CH1_CHL_RSV_CFG0(32'hC0000009),
    .CH1_CHL_RSV_CFG1(32'h00000000),
    .CH1_CHL_RSV_CFG2(32'h00000000),
    .CH1_CHL_RSV_CFG3(32'h00000000),
    .CH1_CHL_RSV_CFG4(32'h00000000),
    .CH1_DA_CFG(32'h000A000A),
    .CH1_EYESCAN_CFG0(32'h00000800),
    .CH1_EYESCAN_CFG1(32'h00000000),
    .CH1_EYESCAN_CFG10(32'h00000000),
    .CH1_EYESCAN_CFG11(32'h00000000),
    .CH1_EYESCAN_CFG12(32'h00000000),
    .CH1_EYESCAN_CFG13(32'h00000000),
    .CH1_EYESCAN_CFG14(32'h00000000),
    .CH1_EYESCAN_CFG15(32'h00000000),
    .CH1_EYESCAN_CFG16(32'h00000000),
    .CH1_EYESCAN_CFG2(32'h00000000),
    .CH1_EYESCAN_CFG3(32'h00000000),
    .CH1_EYESCAN_CFG4(32'h00000000),
    .CH1_EYESCAN_CFG5(32'h00000000),
    .CH1_EYESCAN_CFG6(32'h00000000),
    .CH1_EYESCAN_CFG7(32'h00000000),
    .CH1_EYESCAN_CFG8(32'h00000000),
    .CH1_EYESCAN_CFG9(32'h00000000),
    .CH1_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH1_FABRIC_INTF_CFG1(32'h00008400),
    .CH1_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH1_FABRIC_INTF_CFG3(32'h00000000),
    .CH1_FABRIC_INTF_CFG4(32'h00005000),
    .CH1_FABRIC_INTF_CFG5(32'h00006402),
    .CH1_INSTANTIATED(1'b1),
    .CH1_MONITOR_CFG(32'h00000000),
    .CH1_PIPE_CTRL_CFG0(32'h00044860),
    .CH1_PIPE_CTRL_CFG1(32'h00200293),
    .CH1_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH1_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH1_PIPE_CTRL_CFG3(32'h0498012F),
    .CH1_PIPE_CTRL_CFG4(32'h00440000),
    .CH1_PIPE_CTRL_CFG5(32'h20000000),
    .CH1_PIPE_CTRL_CFG6(32'h3CB80064),
    .CH1_PIPE_CTRL_CFG7(32'h0411D11D),
    .CH1_PIPE_CTRL_CFG8(32'h02046118),
    .CH1_PIPE_CTRL_CFG9(32'h80902626),
    .CH1_PIPE_TX_EQ_CFG0(32'h0A756BD8),
    .CH1_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH1_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH1_PIPE_TX_EQ_CFG3(32'h00000192),
    .CH1_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH1_RESET_CFG(32'h08100025),
    .CH1_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH1_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH1_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH1_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH1_RESET_TIME_CFG0(32'h02108401),
    .CH1_RESET_TIME_CFG1(32'h02108421),
    .CH1_RESET_TIME_CFG2(32'h02108421),
    .CH1_RESET_TIME_CFG3(32'h85082421),
    .CH1_RXOUTCLK_FREQ(60.606100),
    .CH1_RXOUTCLK_REF_FREQ(400.000000),
    .CH1_RXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH1_RX_CDR_CFG0(32'hB4050042),
    .CH1_RX_CDR_CFG1(32'h60000100),
    .CH1_RX_CDR_CFG2(32'h08004A49),
    .CH1_RX_CDR_CFG3(32'h000B5CF6),
    .CH1_RX_CDR_CFG4(32'h243C3000),
    .CH1_RX_CRC_CFG0(32'h00007880),
    .CH1_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH1_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH1_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH1_RX_CTLE_CFG0(32'h01DC0100),
    .CH1_RX_CTLE_CFG1(32'h40000000),
    .CH1_RX_DACI2V_CFG0(32'h04008ECA),
    .CH1_RX_DATA_RATE(8.000000),
    .CH1_RX_DFE_CFG0(32'hD0025408),
    .CH1_RX_ELASTIC_BUF_CFG0(32'h0040277C),
    .CH1_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH1_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH1_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH1_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH1_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH1_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH1_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH1_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH1_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH1_RX_MISC_CFG0(32'h50000000),
    .CH1_RX_OOB_CFG0(32'h2454C204),
    .CH1_RX_OOB_CFG1(32'h010241C4),
    .CH1_RX_PAD_CFG0(32'h00000000),
    .CH1_RX_PAD_CFG1(32'h1044497A),
    .CH1_RX_PCS_CFG0(32'h2835F130),
    .CH1_RX_PCS_CFG1(32'hB4040800),
    .CH1_RX_PCS_CFG2(32'h000000F1),
    .CH1_RX_PCS_CFG3(32'h1C190F0F),
    .CH1_RX_PCS_CFG4(32'h4280A002),
    .CH1_RX_PHALIGN_CFG0(32'h00108003),
    .CH1_RX_PHALIGN_CFG1(32'h5883800E),
    .CH1_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH1_RX_PHALIGN_CFG3(32'h58038000),
    .CH1_RX_PHALIGN_CFG4(32'h0000020A),
    .CH1_RX_PHALIGN_CFG5(32'h03020000),
    .CH1_SIM_MODE("FAST"),
    .CH1_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH1_SIM_RESET_SPEEDUP("TRUE"),
    .CH1_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH1_TXOUTCLK_FREQ(60.606100),
    .CH1_TXOUTCLK_REF_FREQ(400.000000),
    .CH1_TXOUTCLK_REF_SOURCE("HSCLK0_LCPLLGTREFCLK0"),
    .CH1_TX_10G_CFG0(32'h00000000),
    .CH1_TX_10G_CFG1(32'h40000000),
    .CH1_TX_10G_CFG2(32'h00000000),
    .CH1_TX_10G_CFG3(32'h00000000),
    .CH1_TX_ANA_CFG0(32'h000000D0),
    .CH1_TX_CRC_CFG0(32'h00007800),
    .CH1_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH1_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH1_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH1_TX_DATA_RATE(8.000000),
    .CH1_TX_DRV_CFG0(32'h00400000),
    .CH1_TX_DRV_CFG1(32'h00001800),
    .CH1_TX_PCS_CFG0(32'h62600131),
    .CH1_TX_PCS_CFG1(32'h2835557C),
    .CH1_TX_PCS_CFG2(32'h1555F2AA),
    .CH1_TX_PCS_CFG3(32'h000AAA83),
    .CH1_TX_PHALIGN_CFG0(32'h00108000),
    .CH1_TX_PHALIGN_CFG1(32'h02C47007),
    .CH1_TX_PHALIGN_CFG2(32'h00058038),
    .CH1_TX_PHALIGN_CFG3(32'h00000000),
    .CH1_TX_PHALIGN_CFG4(32'h181600E0),
    .CH1_TX_PHALIGN_CFG5(32'h00000100),
    .CH1_TX_PIPPM_CFG(32'h02000000),
    .CH1_TX_SER_CFG0(32'h00000000),
    .CH2_ADAPT_APT_CFG(32'h00000000),
    .CH2_ADAPT_CAL_CFG(32'h81EE6400),
    .CH2_ADAPT_DFE_CFG(32'h00000040),
    .CH2_ADAPT_GC_CFG0(32'h00901070),
    .CH2_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH2_ADAPT_GC_CFG2(32'h002000E8),
    .CH2_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH2_ADAPT_GEN_CFG0(32'h00320000),
    .CH2_ADAPT_GEN_CFG1(32'h00000000),
    .CH2_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH2_ADAPT_GEN_CFG3(32'h10000000),
    .CH2_ADAPT_H01_CFG(32'h012002A0),
    .CH2_ADAPT_H23_CFG(32'h01A001A0),
    .CH2_ADAPT_H45_CFG(32'h01A001A0),
    .CH2_ADAPT_H67_CFG(32'h01A001A0),
    .CH2_ADAPT_H89_CFG(32'h01A001A0),
    .CH2_ADAPT_HAB_CFG(32'h01A001A0),
    .CH2_ADAPT_HCD_CFG(32'h01A001A0),
    .CH2_ADAPT_HEF_CFG(32'h01A003A0),
    .CH2_ADAPT_KH_CFG0(32'h20087E3F),
    .CH2_ADAPT_KH_CFG1(32'h00000000),
    .CH2_ADAPT_KH_CFG2(32'h000043A0),
    .CH2_ADAPT_KH_CFG3(32'h00000000),
    .CH2_ADAPT_KH_CFG4(32'h00007BA0),
    .CH2_ADAPT_KH_CFG5(32'h00000000),
    .CH2_ADAPT_KL_CFG0(32'h00007E20),
    .CH2_ADAPT_KL_CFG1(32'h000043A0),
    .CH2_ADAPT_LCK_CFG0(32'h00004000),
    .CH2_ADAPT_LCK_CFG1(32'h00004000),
    .CH2_ADAPT_LCK_CFG2(32'h00000000),
    .CH2_ADAPT_LCK_CFG3(32'h00000000),
    .CH2_ADAPT_LOP_CFG(32'hEE000660),
    .CH2_ADAPT_OS_CFG(32'h80000120),
    .CH2_CHCLK_ILO_CFG(32'h00640033),
    .CH2_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH2_CHCLK_RSV_CFG(32'h00000000),
    .CH2_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH2_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH2_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH2_CHCLK_RXPI_CFG(32'h0050080C),
    .CH2_CHCLK_TXCAL_CFG(32'h00400020),
    .CH2_CHCLK_TXPI_CFG0(32'h0047080F),
    .CH2_CHL_RSV_CFG0(32'hC0000009),
    .CH2_CHL_RSV_CFG1(32'h00000000),
    .CH2_CHL_RSV_CFG2(32'h00000000),
    .CH2_CHL_RSV_CFG3(32'h00000000),
    .CH2_CHL_RSV_CFG4(32'h00000000),
    .CH2_DA_CFG(32'h000A000A),
    .CH2_EYESCAN_CFG0(32'h00000800),
    .CH2_EYESCAN_CFG1(32'h00000000),
    .CH2_EYESCAN_CFG10(32'h00000000),
    .CH2_EYESCAN_CFG11(32'h00000000),
    .CH2_EYESCAN_CFG12(32'h00000000),
    .CH2_EYESCAN_CFG13(32'h00000000),
    .CH2_EYESCAN_CFG14(32'h00000000),
    .CH2_EYESCAN_CFG15(32'h00000000),
    .CH2_EYESCAN_CFG16(32'h00000000),
    .CH2_EYESCAN_CFG2(32'h00000000),
    .CH2_EYESCAN_CFG3(32'h00000000),
    .CH2_EYESCAN_CFG4(32'h00000000),
    .CH2_EYESCAN_CFG5(32'h00000000),
    .CH2_EYESCAN_CFG6(32'h00000000),
    .CH2_EYESCAN_CFG7(32'h00000000),
    .CH2_EYESCAN_CFG8(32'h00000000),
    .CH2_EYESCAN_CFG9(32'h00000000),
    .CH2_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH2_FABRIC_INTF_CFG1(32'h00008400),
    .CH2_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH2_FABRIC_INTF_CFG3(32'h00000000),
    .CH2_FABRIC_INTF_CFG4(32'h00005000),
    .CH2_FABRIC_INTF_CFG5(32'h00006402),
    .CH2_INSTANTIATED(1'b1),
    .CH2_MONITOR_CFG(32'h00000000),
    .CH2_PIPE_CTRL_CFG0(32'h00044860),
    .CH2_PIPE_CTRL_CFG1(32'h00200292),
    .CH2_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH2_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH2_PIPE_CTRL_CFG3(32'h0498012F),
    .CH2_PIPE_CTRL_CFG4(32'h00440000),
    .CH2_PIPE_CTRL_CFG5(32'h20000000),
    .CH2_PIPE_CTRL_CFG6(32'h3CB80064),
    .CH2_PIPE_CTRL_CFG7(32'h0411D11D),
    .CH2_PIPE_CTRL_CFG8(32'h02046118),
    .CH2_PIPE_CTRL_CFG9(32'h80902626),
    .CH2_PIPE_TX_EQ_CFG0(32'h0A756BD8),
    .CH2_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH2_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH2_PIPE_TX_EQ_CFG3(32'h00000192),
    .CH2_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH2_RESET_CFG(32'h08100025),
    .CH2_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH2_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH2_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH2_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH2_RESET_TIME_CFG0(32'h02108401),
    .CH2_RESET_TIME_CFG1(32'h02108421),
    .CH2_RESET_TIME_CFG2(32'h02108421),
    .CH2_RESET_TIME_CFG3(32'h85082421),
    .CH2_RXOUTCLK_FREQ(60.606100),
    .CH2_RXOUTCLK_REF_FREQ(400.000000),
    .CH2_RXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH2_RX_CDR_CFG0(32'hB4050042),
    .CH2_RX_CDR_CFG1(32'h60000100),
    .CH2_RX_CDR_CFG2(32'h08004A49),
    .CH2_RX_CDR_CFG3(32'h000B5CF6),
    .CH2_RX_CDR_CFG4(32'h243C3000),
    .CH2_RX_CRC_CFG0(32'h00007880),
    .CH2_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH2_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH2_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH2_RX_CTLE_CFG0(32'h01DC0100),
    .CH2_RX_CTLE_CFG1(32'h40000000),
    .CH2_RX_DACI2V_CFG0(32'h04008ECA),
    .CH2_RX_DATA_RATE(8.000000),
    .CH2_RX_DFE_CFG0(32'hD0025408),
    .CH2_RX_ELASTIC_BUF_CFG0(32'h0040277C),
    .CH2_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH2_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH2_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH2_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH2_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH2_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH2_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH2_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH2_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH2_RX_MISC_CFG0(32'h50000000),
    .CH2_RX_OOB_CFG0(32'h2454C204),
    .CH2_RX_OOB_CFG1(32'h010241C4),
    .CH2_RX_PAD_CFG0(32'h00000000),
    .CH2_RX_PAD_CFG1(32'h1044497A),
    .CH2_RX_PCS_CFG0(32'h2835F130),
    .CH2_RX_PCS_CFG1(32'hB4040800),
    .CH2_RX_PCS_CFG2(32'h000000F1),
    .CH2_RX_PCS_CFG3(32'h1C190F0F),
    .CH2_RX_PCS_CFG4(32'h4280A002),
    .CH2_RX_PHALIGN_CFG0(32'h00108003),
    .CH2_RX_PHALIGN_CFG1(32'h5883800E),
    .CH2_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH2_RX_PHALIGN_CFG3(32'h58038000),
    .CH2_RX_PHALIGN_CFG4(32'h0000020A),
    .CH2_RX_PHALIGN_CFG5(32'h03020000),
    .CH2_SIM_MODE("FAST"),
    .CH2_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH2_SIM_RESET_SPEEDUP("TRUE"),
    .CH2_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH2_TXOUTCLK_FREQ(60.606100),
    .CH2_TXOUTCLK_REF_FREQ(400.000000),
    .CH2_TXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH2_TX_10G_CFG0(32'h00000000),
    .CH2_TX_10G_CFG1(32'h40000000),
    .CH2_TX_10G_CFG2(32'h00000000),
    .CH2_TX_10G_CFG3(32'h00000000),
    .CH2_TX_ANA_CFG0(32'h000000D0),
    .CH2_TX_CRC_CFG0(32'h00007800),
    .CH2_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH2_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH2_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH2_TX_DATA_RATE(8.000000),
    .CH2_TX_DRV_CFG0(32'h00400000),
    .CH2_TX_DRV_CFG1(32'h00001800),
    .CH2_TX_PCS_CFG0(32'h62600131),
    .CH2_TX_PCS_CFG1(32'h2835557C),
    .CH2_TX_PCS_CFG2(32'h1555F2AA),
    .CH2_TX_PCS_CFG3(32'h000AAA83),
    .CH2_TX_PHALIGN_CFG0(32'h00108000),
    .CH2_TX_PHALIGN_CFG1(32'h02C47007),
    .CH2_TX_PHALIGN_CFG2(32'h00058038),
    .CH2_TX_PHALIGN_CFG3(32'h00000000),
    .CH2_TX_PHALIGN_CFG4(32'h181600E0),
    .CH2_TX_PHALIGN_CFG5(32'h00000100),
    .CH2_TX_PIPPM_CFG(32'h02000000),
    .CH2_TX_SER_CFG0(32'h00000000),
    .CH3_ADAPT_APT_CFG(32'h00000000),
    .CH3_ADAPT_CAL_CFG(32'h81EE6400),
    .CH3_ADAPT_DFE_CFG(32'h00000040),
    .CH3_ADAPT_GC_CFG0(32'h00901070),
    .CH3_ADAPT_GC_CFG1(32'h0AA007E0),
    .CH3_ADAPT_GC_CFG2(32'h002000E8),
    .CH3_ADAPT_GC_CFG3(32'h0AA003E0),
    .CH3_ADAPT_GEN_CFG0(32'h00320000),
    .CH3_ADAPT_GEN_CFG1(32'h00000000),
    .CH3_ADAPT_GEN_CFG2(32'h87FFFFFF),
    .CH3_ADAPT_GEN_CFG3(32'h10000000),
    .CH3_ADAPT_H01_CFG(32'h012002A0),
    .CH3_ADAPT_H23_CFG(32'h01A001A0),
    .CH3_ADAPT_H45_CFG(32'h01A001A0),
    .CH3_ADAPT_H67_CFG(32'h01A001A0),
    .CH3_ADAPT_H89_CFG(32'h01A001A0),
    .CH3_ADAPT_HAB_CFG(32'h01A001A0),
    .CH3_ADAPT_HCD_CFG(32'h01A001A0),
    .CH3_ADAPT_HEF_CFG(32'h01A003A0),
    .CH3_ADAPT_KH_CFG0(32'h20087E3F),
    .CH3_ADAPT_KH_CFG1(32'h00000000),
    .CH3_ADAPT_KH_CFG2(32'h000043A0),
    .CH3_ADAPT_KH_CFG3(32'h00000000),
    .CH3_ADAPT_KH_CFG4(32'h00007BA0),
    .CH3_ADAPT_KH_CFG5(32'h00000000),
    .CH3_ADAPT_KL_CFG0(32'h00007E20),
    .CH3_ADAPT_KL_CFG1(32'h000043A0),
    .CH3_ADAPT_LCK_CFG0(32'h00004000),
    .CH3_ADAPT_LCK_CFG1(32'h00004000),
    .CH3_ADAPT_LCK_CFG2(32'h00000000),
    .CH3_ADAPT_LCK_CFG3(32'h00000000),
    .CH3_ADAPT_LOP_CFG(32'hEE000660),
    .CH3_ADAPT_OS_CFG(32'h80000120),
    .CH3_CHCLK_ILO_CFG(32'h00640033),
    .CH3_CHCLK_MISC_CFG(32'hF881DF1F),
    .CH3_CHCLK_RSV_CFG(32'h00000000),
    .CH3_CHCLK_RXCAL_CFG(32'h083C4000),
    .CH3_CHCLK_RXCAL_CFG1(32'h00000000),
    .CH3_CHCLK_RXCAL_CFG2(32'h00000000),
    .CH3_CHCLK_RXPI_CFG(32'h0050080C),
    .CH3_CHCLK_TXCAL_CFG(32'h00400020),
    .CH3_CHCLK_TXPI_CFG0(32'h0047080F),
    .CH3_CHL_RSV_CFG0(32'hC0000009),
    .CH3_CHL_RSV_CFG1(32'h00000000),
    .CH3_CHL_RSV_CFG2(32'h00000000),
    .CH3_CHL_RSV_CFG3(32'h00000000),
    .CH3_CHL_RSV_CFG4(32'h00000000),
    .CH3_DA_CFG(32'h000A000A),
    .CH3_EYESCAN_CFG0(32'h00000800),
    .CH3_EYESCAN_CFG1(32'h00000000),
    .CH3_EYESCAN_CFG10(32'h00000000),
    .CH3_EYESCAN_CFG11(32'h00000000),
    .CH3_EYESCAN_CFG12(32'h00000000),
    .CH3_EYESCAN_CFG13(32'h00000000),
    .CH3_EYESCAN_CFG14(32'h00000000),
    .CH3_EYESCAN_CFG15(32'h00000000),
    .CH3_EYESCAN_CFG16(32'h00000000),
    .CH3_EYESCAN_CFG2(32'h00000000),
    .CH3_EYESCAN_CFG3(32'h00000000),
    .CH3_EYESCAN_CFG4(32'h00000000),
    .CH3_EYESCAN_CFG5(32'h00000000),
    .CH3_EYESCAN_CFG6(32'h00000000),
    .CH3_EYESCAN_CFG7(32'h00000000),
    .CH3_EYESCAN_CFG8(32'h00000000),
    .CH3_EYESCAN_CFG9(32'h00000000),
    .CH3_FABRIC_INTF_CFG0(32'hFEBFF7FB),
    .CH3_FABRIC_INTF_CFG1(32'h00008400),
    .CH3_FABRIC_INTF_CFG2(32'h200FFFF0),
    .CH3_FABRIC_INTF_CFG3(32'h00000000),
    .CH3_FABRIC_INTF_CFG4(32'h00005000),
    .CH3_FABRIC_INTF_CFG5(32'h00006402),
    .CH3_INSTANTIATED(1'b1),
    .CH3_MONITOR_CFG(32'h00000000),
    .CH3_PIPE_CTRL_CFG0(32'h00044860),
    .CH3_PIPE_CTRL_CFG1(32'h00200292),
    .CH3_PIPE_CTRL_CFG10(32'h051FFFEF),
    .CH3_PIPE_CTRL_CFG2(32'h0097D38C),
    .CH3_PIPE_CTRL_CFG3(32'h0498012F),
    .CH3_PIPE_CTRL_CFG4(32'h00440000),
    .CH3_PIPE_CTRL_CFG5(32'h20000000),
    .CH3_PIPE_CTRL_CFG6(32'h3C800064),
    .CH3_PIPE_CTRL_CFG7(32'h0411D11D),
    .CH3_PIPE_CTRL_CFG8(32'h02046118),
    .CH3_PIPE_CTRL_CFG9(32'h80902626),
    .CH3_PIPE_TX_EQ_CFG0(32'h0A756BD8),
    .CH3_PIPE_TX_EQ_CFG1(32'h0912E651),
    .CH3_PIPE_TX_EQ_CFG2(32'h00002042),
    .CH3_PIPE_TX_EQ_CFG3(32'h00000192),
    .CH3_RESET_BYP_HDSHK_CFG(32'h00000000),
    .CH3_RESET_CFG(32'h08100025),
    .CH3_RESET_LOOPER_ID_CFG(32'h00204060),
    .CH3_RESET_LOOP_ID_CFG0(32'h00000210),
    .CH3_RESET_LOOP_ID_CFG1(32'h06543210),
    .CH3_RESET_LOOP_ID_CFG2(32'h00004321),
    .CH3_RESET_TIME_CFG0(32'h02108401),
    .CH3_RESET_TIME_CFG1(32'h02108421),
    .CH3_RESET_TIME_CFG2(32'h02108421),
    .CH3_RESET_TIME_CFG3(32'h85082421),
    .CH3_RXOUTCLK_FREQ(60.606100),
    .CH3_RXOUTCLK_REF_FREQ(400.000000),
    .CH3_RXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH3_RX_CDR_CFG0(32'hB4050042),
    .CH3_RX_CDR_CFG1(32'h60000100),
    .CH3_RX_CDR_CFG2(32'h08004A49),
    .CH3_RX_CDR_CFG3(32'h000B5CF6),
    .CH3_RX_CDR_CFG4(32'h243C3000),
    .CH3_RX_CRC_CFG0(32'h00007880),
    .CH3_RX_CRC_CFG1(32'h1E1E1E1E),
    .CH3_RX_CRC_CFG2(32'h1E1E1E1E),
    .CH3_RX_CRC_CFG3(32'hFFFFFFFF),
    .CH3_RX_CTLE_CFG0(32'h01DC0100),
    .CH3_RX_CTLE_CFG1(32'h40000000),
    .CH3_RX_DACI2V_CFG0(32'h04008ECA),
    .CH3_RX_DATA_RATE(8.000000),
    .CH3_RX_DFE_CFG0(32'hD0025408),
    .CH3_RX_ELASTIC_BUF_CFG0(32'h0040277C),
    .CH3_RX_ELASTIC_BUF_CFG1(32'h00000002),
    .CH3_RX_ELASTIC_BUF_CFG2(32'h00000000),
    .CH3_RX_ELASTIC_BUF_CFG3(32'h9FE00000),
    .CH3_RX_ELASTIC_BUF_CFG4(32'h00000000),
    .CH3_RX_ELASTIC_BUF_CFG5(32'h00000000),
    .CH3_RX_ELASTIC_BUF_CFG6(32'hFFF00000),
    .CH3_RX_ELASTIC_BUF_CFG7(32'h04000005),
    .CH3_RX_ELASTIC_BUF_CFG8(32'h001F0590),
    .CH3_RX_ELASTIC_BUF_CFG9(32'h001F0590),
    .CH3_RX_MISC_CFG0(32'h50000000),
    .CH3_RX_OOB_CFG0(32'h2454C204),
    .CH3_RX_OOB_CFG1(32'h010241C4),
    .CH3_RX_PAD_CFG0(32'h00000000),
    .CH3_RX_PAD_CFG1(32'h1044497A),
    .CH3_RX_PCS_CFG0(32'h2835F130),
    .CH3_RX_PCS_CFG1(32'hB4040800),
    .CH3_RX_PCS_CFG2(32'h000000F1),
    .CH3_RX_PCS_CFG3(32'h1C190F0F),
    .CH3_RX_PCS_CFG4(32'h4280A002),
    .CH3_RX_PHALIGN_CFG0(32'h00108003),
    .CH3_RX_PHALIGN_CFG1(32'h58838006),
    .CH3_RX_PHALIGN_CFG2(32'h0001CA00),
    .CH3_RX_PHALIGN_CFG3(32'h58038000),
    .CH3_RX_PHALIGN_CFG4(32'h0000020A),
    .CH3_RX_PHALIGN_CFG5(32'h03020000),
    .CH3_SIM_MODE("FAST"),
    .CH3_SIM_RECEIVER_DETECT_PASS("TRUE"),
    .CH3_SIM_RESET_SPEEDUP("TRUE"),
    .CH3_SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .CH3_TXOUTCLK_FREQ(60.606100),
    .CH3_TXOUTCLK_REF_FREQ(400.000000),
    .CH3_TXOUTCLK_REF_SOURCE("HSCLK1_LCPLLGTREFCLK0"),
    .CH3_TX_10G_CFG0(32'h00000000),
    .CH3_TX_10G_CFG1(32'h40000000),
    .CH3_TX_10G_CFG2(32'h00000000),
    .CH3_TX_10G_CFG3(32'h00000000),
    .CH3_TX_ANA_CFG0(32'h000000D0),
    .CH3_TX_CRC_CFG0(32'h00007800),
    .CH3_TX_CRC_CFG1(32'h1E1E1E1E),
    .CH3_TX_CRC_CFG2(32'h1E1E1E1E),
    .CH3_TX_CRC_CFG3(32'hFFFFFFFF),
    .CH3_TX_DATA_RATE(8.000000),
    .CH3_TX_DRV_CFG0(32'h00400000),
    .CH3_TX_DRV_CFG1(32'h00001800),
    .CH3_TX_PCS_CFG0(32'h62600131),
    .CH3_TX_PCS_CFG1(32'h2835557C),
    .CH3_TX_PCS_CFG2(32'h1555F2AA),
    .CH3_TX_PCS_CFG3(32'h000AAA83),
    .CH3_TX_PHALIGN_CFG0(32'h00108000),
    .CH3_TX_PHALIGN_CFG1(32'h02C47003),
    .CH3_TX_PHALIGN_CFG2(32'h00058038),
    .CH3_TX_PHALIGN_CFG3(32'h00000000),
    .CH3_TX_PHALIGN_CFG4(32'h181600E0),
    .CH3_TX_PHALIGN_CFG5(32'h00000100),
    .CH3_TX_PIPPM_CFG(32'h02000000),
    .CH3_TX_SER_CFG0(32'h00000000),
    .CHANNEL_CONNECTIVITY("NONE"),
    .CTRL_RSV_CFG0(32'h00000018),
    .CTRL_RSV_CFG1(32'h00000000),
    .HS0_LCPLL_IPS_PIN_EN(1'b0),
    .HS0_LCPLL_IPS_REFCLK_SEL(1),
    .HS0_LCPLL_REFCLK_MAP0(3'h0),
    .HS0_LCPLL_REFCLK_MAP1(3'h1),
    .HS0_LCPLL_REFCLK_MAP2(3'h2),
    .HS0_LCPLL_REFCLK_MAP3(3'h3),
    .HS0_LCPLL_REFCLK_MAP4(3'h4),
    .HS0_LCPLL_REFCLK_MAP5(3'h5),
    .HS0_LCPLL_REFCLK_MAP6(3'h6),
    .HS0_LCPLL_REFCLK_MAP7(3'h7),
    .HS0_RPLL_IPS_PIN_EN(1'b0),
    .HS0_RPLL_IPS_REFCLK_SEL(1),
    .HS0_RPLL_REFCLK_MAP0(3'h0),
    .HS0_RPLL_REFCLK_MAP1(3'h1),
    .HS0_RPLL_REFCLK_MAP2(3'h2),
    .HS0_RPLL_REFCLK_MAP3(3'h3),
    .HS0_RPLL_REFCLK_MAP4(3'h4),
    .HS0_RPLL_REFCLK_MAP5(3'h5),
    .HS0_RPLL_REFCLK_MAP6(3'h6),
    .HS0_RPLL_REFCLK_MAP7(3'h7),
    .HS1_LCPLL_IPS_PIN_EN(1'b0),
    .HS1_LCPLL_IPS_REFCLK_SEL(1),
    .HS1_LCPLL_REFCLK_MAP0(3'h0),
    .HS1_LCPLL_REFCLK_MAP1(3'h2),
    .HS1_LCPLL_REFCLK_MAP2(3'h1),
    .HS1_LCPLL_REFCLK_MAP3(3'h3),
    .HS1_LCPLL_REFCLK_MAP4(3'h4),
    .HS1_LCPLL_REFCLK_MAP5(3'h5),
    .HS1_LCPLL_REFCLK_MAP6(3'h6),
    .HS1_LCPLL_REFCLK_MAP7(3'h7),
    .HS1_RPLL_IPS_PIN_EN(1'b0),
    .HS1_RPLL_IPS_REFCLK_SEL(1),
    .HS1_RPLL_REFCLK_MAP0(3'h0),
    .HS1_RPLL_REFCLK_MAP1(3'h2),
    .HS1_RPLL_REFCLK_MAP2(3'h1),
    .HS1_RPLL_REFCLK_MAP3(3'h3),
    .HS1_RPLL_REFCLK_MAP4(3'h4),
    .HS1_RPLL_REFCLK_MAP5(3'h5),
    .HS1_RPLL_REFCLK_MAP6(3'h6),
    .HS1_RPLL_REFCLK_MAP7(3'h7),
    .HSCLK0_HSDIST_CFG(32'h0001001E),
    .HSCLK0_INSTANTIATED(1'b1),
    .HSCLK0_LCPLL_CFG0(32'h00403F04),
    .HSCLK0_LCPLL_CFG1(32'h04184F00),
    .HSCLK0_LCPLL_CFG2(32'h827F0208),
    .HSCLK0_LCPLL_LGC_CFG0(32'hE5D48B10),
    .HSCLK0_LCPLL_LGC_CFG1(32'h94121880),
    .HSCLK0_LCPLL_LGC_CFG2(32'h00110111),
    .HSCLK0_RPLL_CFG0(32'h80007FC4),
    .HSCLK0_RPLL_CFG1(32'h07E23F28),
    .HSCLK0_RPLL_CFG2(32'h00B323C9),
    .HSCLK0_RPLL_LGC_CFG0(32'hE5D48D90),
    .HSCLK0_RPLL_LGC_CFG1(32'h94121880),
    .HSCLK0_RPLL_LGC_CFG2(32'h00110111),
    .HSCLK0_RXRECCLK_SEL(2'h0),
    .HSCLK1_HSDIST_CFG(32'h0001001E),
    .HSCLK1_INSTANTIATED(1'b1),
    .HSCLK1_LCPLL_CFG0(32'h00403F04),
    .HSCLK1_LCPLL_CFG1(32'h04184F00),
    .HSCLK1_LCPLL_CFG2(32'h827F0208),
    .HSCLK1_LCPLL_LGC_CFG0(32'hE5D48B10),
    .HSCLK1_LCPLL_LGC_CFG1(32'h94121880),
    .HSCLK1_LCPLL_LGC_CFG2(32'h00110111),
    .HSCLK1_RPLL_CFG0(32'h80007FC4),
    .HSCLK1_RPLL_CFG1(32'h07E23F28),
    .HSCLK1_RPLL_CFG2(32'h00B323C9),
    .HSCLK1_RPLL_LGC_CFG0(32'hE5D48D90),
    .HSCLK1_RPLL_LGC_CFG1(32'h94121880),
    .HSCLK1_RPLL_LGC_CFG2(32'h00110111),
    .HSCLK1_RXRECCLK_SEL(2'h0),
    .MEMORY_INIT_FILE("system_gt_quad_base_0_0.mem"),
    .MST_RESET_CFG(32'hFFFFFF0F),
    .PIN_CFG0(32'h01084219),
    .POR_CFG(32'h00045B00),
    .QUAD_INSTANTIATED(1'b1),
    .QUAD_SIM_MODE("FAST"),
    .QUAD_SIM_RESET_SPEEDUP("TRUE"),
    .RCALBG0_CFG0(32'h000003D0),
    .RCALBG0_CFG1(32'h00000040),
    .RCALBG0_CFG2(32'h00000000),
    .RCALBG0_CFG3(32'h80000002),
    .RCALBG0_CFG4(32'h00000117),
    .RCALBG0_CFG5(32'h000002B3),
    .RCALBG1_CFG0(32'h000003D0),
    .RCALBG1_CFG1(32'h00000040),
    .RCALBG1_CFG2(32'h00000000),
    .RCALBG1_CFG3(32'h80000002),
    .RCALBG1_CFG4(32'h00000117),
    .RCALBG1_CFG5(32'h000002B3),
    .RXRSTDONE_DIST_SEL(32'h10171732),
    .SIM_VERSION("2"),
    .STAT_NPI_REG_LIST("3000:3004,3010:3014,3020:3024,3034:304C,3070:3098,30A8:30B4,30BC:30EC,30F4:3178,3180:3184,318C:3190,3198:31A4,31B0:31D8,31E0:31E8,31F0:3228,3230:3274,3280,3288,3294:329C,32A8:32AC,32B4,32BC:32E4,32FC,3430:3444,344C,3470:3498,34A8:34B4,34BC:34EC,34F4:3578,3580:3584,358C:3590,3598:35A4,35B0:35D8,35E0:35E8,35F0:3628,3630:3674,3680,3688,3694:369C,36A8:36AC,36B4,36BC:36E4,3834:383C,3848,3870:3898,38A8:38B4,38BC:38EC,38F4:3978,3980:3984,398C:3990,3998:39A4,39B0:39D8,39E0:39E8,39F0:3A28,3A30:3A74,3A80,3A88,3A94:3A9C,3AA8:3AAC,3AB4,3ABC:3AE4,3AFC,3C08,3C30:3C3C,3C48:3C4C,3C70:3C98,3CA8:3CB4,3CBC:3CEC,3CF4:3D78,3D80:3D84,3D8C:3D90,3D98:3DA4,3DB0:3DD8,3DE0:3DE8,3DF0:3E28,3E30:3E74,3E80,3E88,3E94:3E9C,3EA8:3EAC,3EB4,3EBC:3EE4"),
    .TERMPROG_CFG(32'h00000000),
    .TXRSTDONE_DIST_SEL(32'h10171732),
    .UB_CFG0(32'h73400000)) 
    quad_inst
       (.ALTCLK(altclk),
        .APB3CLK(apb3clk),
        .APB3PADDR(apb3paddr_quad_int),
        .APB3PENABLE(apb3penable_quad_int),
        .APB3PRDATA(apb3prdata_quad_int),
        .APB3PREADY(apb3pready_quad_int),
        .APB3PRESETN(apb3presetn),
        .APB3PSEL(apb3sel_quad_int),
        .APB3PSLVERR(apb3pslverr_quad_int),
        .APB3PWDATA(apb3pwdata_quad_int),
        .APB3PWRITE(apb3pwrite_quad_int),
        .AXISCLK(apb3clk),
        .BGBYPASSB(bgbypassb),
        .BGMONITORENB(bgmonitorenb),
        .BGPDB(bgpdb),
        .BGRCALOVRD(bgrcalovrd),
        .BGRCALOVRDENB(bgrcalovrdenb),
        .CH0_BUFGTCE(ch0_bufgtce),
        .CH0_BUFGTCEMASK(ch0_bufgtcemask),
        .CH0_BUFGTDIV(ch0_bufgtdiv),
        .CH0_BUFGTRST(ch0_bufgtrst),
        .CH0_BUFGTRSTMASK(ch0_bufgtrstmask),
        .CH0_CDRBMCDRREQ(ch0_cdrbmcdrreq),
        .CH0_CDRFREQOS(ch0_cdrfreqos),
        .CH0_CDRINCPCTRL(ch0_cdrincpctrl),
        .CH0_CDRSTEPDIR(ch0_cdrstepdir),
        .CH0_CDRSTEPSQ(ch0_cdrstepsq),
        .CH0_CDRSTEPSX(ch0_cdrstepsx),
        .CH0_CFOKOVRDFINISH(ch0_cfokovrdfinish),
        .CH0_CFOKOVRDPULSE(ch0_cfokovrdpulse),
        .CH0_CFOKOVRDRDY0(ch0_cfokovrdrdy0),
        .CH0_CFOKOVRDRDY1(ch0_cfokovrdrdy1),
        .CH0_CFOKOVRDSTART(ch0_cfokovrdstart),
        .CH0_CLKRSVD0(ch0_clkrsvd0),
        .CH0_CLKRSVD1(ch0_clkrsvd1),
        .CH0_DMONFIFORESET(ch0_dmonfiforeset),
        .CH0_DMONITORCLK(ch0_dmonitorclk),
        .CH0_DMONITOROUT(ch0_dmonitorout),
        .CH0_DMONITOROUTCLK(ch0_dmonitoroutclk),
        .CH0_EYESCANDATAERROR(ch0_eyescandataerror),
        .CH0_EYESCANRESET(ch0_eyescanreset),
        .CH0_EYESCANTRIGGER(ch0_eyescantrigger),
        .CH0_GTRSVD(ch0_gtrsvd),
        .CH0_GTRXRESET(ch0_gtrxreset),
        .CH0_GTTXRESET(ch0_gttxreset),
        .CH0_GTYRXN(rxn[0]),
        .CH0_GTYRXP(rxp[0]),
        .CH0_GTYTXN(txn[0]),
        .CH0_GTYTXP(txp[0]),
        .CH0_HSDPPCSRESET(ch0_hsdppcsreset),
        .CH0_ILORESET(ch0_iloreset),
        .CH0_ILORESETDONE(ch0_iloresetdone),
        .CH0_ILORESETMASK(ch0_iloresetmask),
        .CH0_LOOPBACK(ch0_loopback),
        .CH0_PCIERSTB(ch0_pcierstb),
        .CH0_PCSRSVDIN({ch0_pcsrsvdin[15:11],ch0_gtrxreset,ch0_pcsrsvdin[9:8],ch0_gttxreset,ch0_pcsrsvdin[6:0]}),
        .CH0_PCSRSVDOUT({ch0_pcsrsvdout[15:12],ch0_pcsrsvdout_int,ch0_pcsrsvdout[9:0]}),
        .CH0_PHYESMADAPTSAVE(ch0_phyesmadaptsave),
        .CH0_PHYREADY(ch0_phyready),
        .CH0_PHYSTATUS(ch0_phystatus),
        .CH0_PINRSVDAS(ch0_pinrsvdas),
        .CH0_RESETEXCEPTION(ch0_resetexception),
        .CH0_RX10GSTAT(ch0_rx10gstat),
        .CH0_RXBUFSTATUS(ch0_rxbufstatus),
        .CH0_RXBYTEISALIGNED(ch0_rxbyteisaligned),
        .CH0_RXBYTEREALIGN(ch0_rxbyterealign),
        .CH0_RXCDRHOLD(ch0_rxcdrhold),
        .CH0_RXCDRLOCK(ch0_rxcdrlock),
        .CH0_RXCDROVRDEN(ch0_rxcdrovrden),
        .CH0_RXCDRPHDONE(ch0_rxcdrphdone),
        .CH0_RXCDRRESET(ch0_rxcdrreset),
        .CH0_RXCHANBONDSEQ(ch0_rxchanbondseq),
        .CH0_RXCHANISALIGNED(ch0_rxchanisaligned),
        .CH0_RXCHANREALIGN(ch0_rxchanrealign),
        .CH0_RXCHBONDI(ch0_rxchbondi),
        .CH0_RXCHBONDO(ch0_rxchbondo),
        .CH0_RXCLKCORCNT(ch0_rxclkcorcnt),
        .CH0_RXCOMINITDET(ch0_rxcominitdet),
        .CH0_RXCOMMADET(ch0_rxcommadet),
        .CH0_RXCOMSASDET(ch0_rxcomsasdet),
        .CH0_RXCOMWAKEDET(ch0_rxcomwakedet),
        .CH0_RXCTRL0(ch0_rxctrl0),
        .CH0_RXCTRL1(ch0_rxctrl1),
        .CH0_RXCTRL2(ch0_rxctrl2),
        .CH0_RXCTRL3(ch0_rxctrl3),
        .CH0_RXDAPICODEOVRDEN(ch0_rxdapicodeovrden),
        .CH0_RXDAPICODERESET(ch0_rxdapicodereset),
        .CH0_RXDATA(ch0_rxdata),
        .CH0_RXDATAEXTENDRSVD(ch0_rxdataextendrsvd),
        .CH0_RXDATAVALID(ch0_rxdatavalid),
        .CH0_RXDCCDONE(ch0_rxdccdone),
        .CH0_RXDLYALIGNERR(ch0_rxdlyalignerr),
        .CH0_RXDLYALIGNPROG(ch0_rxdlyalignprog),
        .CH0_RXDLYALIGNREQ(ch0_rxdlyalignreq),
        .CH0_RXELECIDLE(ch0_rxelecidle),
        .CH0_RXEQTRAINING(ch0_rxeqtraining),
        .CH0_RXFINEALIGNDONE(ch0_rxfinealigndone),
        .CH0_RXGEARBOXSLIP(ch0_rxgearboxslip),
        .CH0_RXHEADER(ch0_rxheader),
        .CH0_RXHEADERVALID(ch0_rxheadervalid),
        .CH0_RXLATCLK(ch0_rxlatclk),
        .CH0_RXLPMEN(ch0_rxlpmen),
        .CH0_RXMLDCHAINDONE(ch0_rxmldchaindone),
        .CH0_RXMLDCHAINREQ(ch0_rxmldchainreq),
        .CH0_RXMLFINEALIGNREQ(ch0_rxmlfinealignreq),
        .CH0_RXOOBRESET(ch0_rxoobreset),
        .CH0_RXOSINTDONE(ch0_rxosintdone),
        .CH0_RXOSINTSTARTED(ch0_rxosintstarted),
        .CH0_RXOSINTSTROBEDONE(ch0_rxosintstrobedone),
        .CH0_RXOSINTSTROBESTARTED(ch0_rxosintstrobestarted),
        .CH0_RXOUTCLK(ch0_rxoutclk),
        .CH0_RXPCSRESETMASK(ch0_rxpcsresetmask),
        .CH0_RXPD(ch0_rxpd),
        .CH0_RXPHALIGNDONE(ch0_rxphaligndone),
        .CH0_RXPHALIGNERR(ch0_rxphalignerr),
        .CH0_RXPHALIGNREQ(ch0_rxphalignreq),
        .CH0_RXPHALIGNRESETMASK(ch0_rxphalignresetmask),
        .CH0_RXPHDLYPD(ch0_rxphdlypd),
        .CH0_RXPHDLYRESET(ch0_rxphdlyreset),
        .CH0_RXPHDLYRESETDONE(ch0_rxphdlyresetdone),
        .CH0_RXPHSETINITDONE(ch0_rxphsetinitdone),
        .CH0_RXPHSETINITREQ(ch0_rxphsetinitreq),
        .CH0_RXPHSHIFT180(ch0_rxphshift180),
        .CH0_RXPHSHIFT180DONE(ch0_rxphshift180done),
        .CH0_RXPMARESETDONE(ch0_rxpmaresetdone_int),
        .CH0_RXPMARESETMASK(ch0_rxpmaresetmask),
        .CH0_RXPOLARITY(ch0_rxpolarity),
        .CH0_RXPRBSCNTRESET(ch0_rxprbscntreset),
        .CH0_RXPRBSERR(ch0_rxprbserr),
        .CH0_RXPRBSLOCKED(ch0_rxprbslocked),
        .CH0_RXPRBSSEL(ch0_rxprbssel),
        .CH0_RXPROGDIVRESET(ch0_rxprogdivreset),
        .CH0_RXPROGDIVRESETDONE(ch0_rxprogdivresetdone),
        .CH0_RXRATE(ch0_rxrate),
        .CH0_RXRESETDONE(ch0_rxresetdone_int),
        .CH0_RXRESETMODE(ch0_rxresetmode),
        .CH0_RXSLIDE(ch0_rxslide),
        .CH0_RXSLIDERDY(ch0_rxsliderdy),
        .CH0_RXSTARTOFSEQ(ch0_rxstartofseq),
        .CH0_RXSTATUS(ch0_rxstatus),
        .CH0_RXSYNCALLIN(ch0_rxsyncallin),
        .CH0_RXSYNCDONE(ch0_rxsyncdone),
        .CH0_RXTERMINATION(ch0_rxtermination),
        .CH0_RXUSERRDY(ch0_rxuserrdy),
        .CH0_RXUSRCLK(ch0_rxusrclk),
        .CH0_RXVALID(ch0_rxvalid),
        .CH0_TSTCLK0(apb3clk),
        .CH0_TSTCLK1(apb3clk),
        .CH0_TSTIN(ch0_tstin),
        .CH0_TX10GSTAT(ch0_tx10gstat),
        .CH0_TXBUFSTATUS(ch0_txbufstatus),
        .CH0_TXCOMFINISH(ch0_txcomfinish),
        .CH0_TXCOMINIT(ch0_txcominit),
        .CH0_TXCOMSAS(ch0_txcomsas),
        .CH0_TXCOMWAKE(ch0_txcomwake),
        .CH0_TXCTRL0(ch0_txctrl0),
        .CH0_TXCTRL1(ch0_txctrl1),
        .CH0_TXCTRL2(ch0_txctrl2),
        .CH0_TXDAPICODEOVRDEN(ch0_txdapicodeovrden),
        .CH0_TXDAPICODERESET(ch0_txdapicodereset),
        .CH0_TXDATA(ch0_txdata),
        .CH0_TXDATAEXTENDRSVD(ch0_txdataextendrsvd),
        .CH0_TXDCCDONE(ch0_txdccdone),
        .CH0_TXDEEMPH(ch0_txdeemph),
        .CH0_TXDETECTRX(ch0_txdetectrx),
        .CH0_TXDIFFCTRL(ch0_txdiffctrl),
        .CH0_TXDLYALIGNERR(ch0_txdlyalignerr),
        .CH0_TXDLYALIGNPROG(ch0_txdlyalignprog),
        .CH0_TXDLYALIGNREQ(ch0_txdlyalignreq),
        .CH0_TXELECIDLE(ch0_txelecidle),
        .CH0_TXHEADER(ch0_txheader),
        .CH0_TXINHIBIT(ch0_txinhibit),
        .CH0_TXLATCLK(ch0_txlatclk),
        .CH0_TXMAINCURSOR(ch0_txmaincursor),
        .CH0_TXMARGIN(ch0_txmargin),
        .CH0_TXMLDCHAINDONE(ch0_txmldchaindone),
        .CH0_TXMLDCHAINREQ(ch0_txmldchainreq),
        .CH0_TXONESZEROS(ch0_txoneszeros),
        .CH0_TXOUTCLK(ch0_txoutclk),
        .CH0_TXPAUSEDELAYALIGN(ch0_txpausedelayalign),
        .CH0_TXPCSRESETMASK(ch0_txpcsresetmask),
        .CH0_TXPD(ch0_txpd),
        .CH0_TXPHALIGNDONE(ch0_txphaligndone),
        .CH0_TXPHALIGNERR(ch0_txphalignerr),
        .CH0_TXPHALIGNOUTRSVD(ch0_txphalignoutrsvd),
        .CH0_TXPHALIGNREQ(ch0_txphalignreq),
        .CH0_TXPHALIGNRESETMASK(ch0_txphalignresetmask),
        .CH0_TXPHDLYPD(ch0_txphdlypd),
        .CH0_TXPHDLYRESET(ch0_txphdlyreset),
        .CH0_TXPHDLYRESETDONE(ch0_txphdlyresetdone),
        .CH0_TXPHDLYTSTCLK(ch0_txphdlytstclk),
        .CH0_TXPHSETINITDONE(ch0_txphsetinitdone),
        .CH0_TXPHSETINITREQ(ch0_txphsetinitreq),
        .CH0_TXPHSHIFT180(ch0_txphshift180),
        .CH0_TXPHSHIFT180DONE(ch0_txphshift180done),
        .CH0_TXPICODEOVRDEN(ch0_txpicodeovrden),
        .CH0_TXPICODERESET(ch0_txpicodereset),
        .CH0_TXPIPPMEN(ch0_txpippmen),
        .CH0_TXPIPPMSTEPSIZE(ch0_txpippmstepsize),
        .CH0_TXPISOPD(ch0_txpisopd),
        .CH0_TXPMARESETDONE(ch0_txpmaresetdone_int),
        .CH0_TXPMARESETMASK(ch0_txpmaresetmask),
        .CH0_TXPOLARITY(ch0_txpolarity),
        .CH0_TXPOSTCURSOR(ch0_txpostcursor),
        .CH0_TXPRBSFORCEERR(ch0_txprbsforceerr),
        .CH0_TXPRBSSEL(ch0_txprbssel),
        .CH0_TXPRECURSOR(ch0_txprecursor),
        .CH0_TXPROGDIVRESET(ch0_txprogdivreset),
        .CH0_TXPROGDIVRESETDONE(ch0_txprogdivresetdone),
        .CH0_TXRATE(ch0_txrate),
        .CH0_TXRESETDONE(ch0_txresetdone_int),
        .CH0_TXRESETMODE(ch0_txresetmode),
        .CH0_TXSEQUENCE(ch0_txsequence),
        .CH0_TXSWING(ch0_txswing),
        .CH0_TXSYNCALLIN(ch0_txsyncallin),
        .CH0_TXSYNCDONE(ch0_txsyncdone),
        .CH0_TXUSERRDY(ch0_txuserrdy),
        .CH0_TXUSRCLK(ch0_txusrclk),
        .CH1_BUFGTCE(ch1_bufgtce),
        .CH1_BUFGTCEMASK(ch1_bufgtcemask),
        .CH1_BUFGTDIV(ch1_bufgtdiv),
        .CH1_BUFGTRST(ch1_bufgtrst),
        .CH1_BUFGTRSTMASK(ch1_bufgtrstmask),
        .CH1_CDRBMCDRREQ(ch1_cdrbmcdrreq),
        .CH1_CDRFREQOS(ch1_cdrfreqos),
        .CH1_CDRINCPCTRL(ch1_cdrincpctrl),
        .CH1_CDRSTEPDIR(ch1_cdrstepdir),
        .CH1_CDRSTEPSQ(ch1_cdrstepsq),
        .CH1_CDRSTEPSX(ch1_cdrstepsx),
        .CH1_CFOKOVRDFINISH(ch1_cfokovrdfinish),
        .CH1_CFOKOVRDPULSE(ch1_cfokovrdpulse),
        .CH1_CFOKOVRDRDY0(ch1_cfokovrdrdy0),
        .CH1_CFOKOVRDRDY1(ch1_cfokovrdrdy1),
        .CH1_CFOKOVRDSTART(ch1_cfokovrdstart),
        .CH1_CLKRSVD0(ch1_clkrsvd0),
        .CH1_CLKRSVD1(ch1_clkrsvd1),
        .CH1_DMONFIFORESET(ch1_dmonfiforeset),
        .CH1_DMONITORCLK(ch1_dmonitorclk),
        .CH1_DMONITOROUT(ch1_dmonitorout),
        .CH1_DMONITOROUTCLK(ch1_dmonitoroutclk),
        .CH1_EYESCANDATAERROR(ch1_eyescandataerror),
        .CH1_EYESCANRESET(ch1_eyescanreset),
        .CH1_EYESCANTRIGGER(ch1_eyescantrigger),
        .CH1_GTRSVD(ch1_gtrsvd),
        .CH1_GTRXRESET(ch1_gtrxreset),
        .CH1_GTTXRESET(ch1_gttxreset),
        .CH1_GTYRXN(rxn[1]),
        .CH1_GTYRXP(rxp[1]),
        .CH1_GTYTXN(txn[1]),
        .CH1_GTYTXP(txp[1]),
        .CH1_HSDPPCSRESET(ch1_hsdppcsreset),
        .CH1_ILORESET(ch1_iloreset),
        .CH1_ILORESETDONE(ch1_iloresetdone),
        .CH1_ILORESETMASK(ch1_iloresetmask),
        .CH1_LOOPBACK(ch1_loopback),
        .CH1_PCIERSTB(ch1_pcierstb),
        .CH1_PCSRSVDIN({ch1_pcsrsvdin[15:11],ch1_gtrxreset,ch1_pcsrsvdin[9:8],ch1_gttxreset,ch1_pcsrsvdin[6:0]}),
        .CH1_PCSRSVDOUT({ch1_pcsrsvdout[15:12],ch1_pcsrsvdout_int,ch1_pcsrsvdout[9:0]}),
        .CH1_PHYESMADAPTSAVE(ch1_phyesmadaptsave),
        .CH1_PHYREADY(ch1_phyready),
        .CH1_PHYSTATUS(ch1_phystatus),
        .CH1_PINRSVDAS(ch1_pinrsvdas),
        .CH1_RESETEXCEPTION(ch1_resetexception),
        .CH1_RX10GSTAT(ch1_rx10gstat),
        .CH1_RXBUFSTATUS(ch1_rxbufstatus),
        .CH1_RXBYTEISALIGNED(ch1_rxbyteisaligned),
        .CH1_RXBYTEREALIGN(ch1_rxbyterealign),
        .CH1_RXCDRHOLD(ch1_rxcdrhold),
        .CH1_RXCDRLOCK(ch1_rxcdrlock),
        .CH1_RXCDROVRDEN(ch1_rxcdrovrden),
        .CH1_RXCDRPHDONE(ch1_rxcdrphdone),
        .CH1_RXCDRRESET(ch1_rxcdrreset),
        .CH1_RXCHANBONDSEQ(ch1_rxchanbondseq),
        .CH1_RXCHANISALIGNED(ch1_rxchanisaligned),
        .CH1_RXCHANREALIGN(ch1_rxchanrealign),
        .CH1_RXCHBONDI(ch1_rxchbondi),
        .CH1_RXCHBONDO(ch1_rxchbondo),
        .CH1_RXCLKCORCNT(ch1_rxclkcorcnt),
        .CH1_RXCOMINITDET(ch1_rxcominitdet),
        .CH1_RXCOMMADET(ch1_rxcommadet),
        .CH1_RXCOMSASDET(ch1_rxcomsasdet),
        .CH1_RXCOMWAKEDET(ch1_rxcomwakedet),
        .CH1_RXCTRL0(ch1_rxctrl0),
        .CH1_RXCTRL1(ch1_rxctrl1),
        .CH1_RXCTRL2(ch1_rxctrl2),
        .CH1_RXCTRL3(ch1_rxctrl3),
        .CH1_RXDAPICODEOVRDEN(ch1_rxdapicodeovrden),
        .CH1_RXDAPICODERESET(ch1_rxdapicodereset),
        .CH1_RXDATA(ch1_rxdata),
        .CH1_RXDATAEXTENDRSVD(ch1_rxdataextendrsvd),
        .CH1_RXDATAVALID(ch1_rxdatavalid),
        .CH1_RXDCCDONE(ch1_rxdccdone),
        .CH1_RXDLYALIGNERR(ch1_rxdlyalignerr),
        .CH1_RXDLYALIGNPROG(ch1_rxdlyalignprog),
        .CH1_RXDLYALIGNREQ(ch1_rxdlyalignreq),
        .CH1_RXELECIDLE(ch1_rxelecidle),
        .CH1_RXEQTRAINING(ch1_rxeqtraining),
        .CH1_RXFINEALIGNDONE(ch1_rxfinealigndone),
        .CH1_RXGEARBOXSLIP(ch1_rxgearboxslip),
        .CH1_RXHEADER(ch1_rxheader),
        .CH1_RXHEADERVALID(ch1_rxheadervalid),
        .CH1_RXLATCLK(ch1_rxlatclk),
        .CH1_RXLPMEN(ch1_rxlpmen),
        .CH1_RXMLDCHAINDONE(ch1_rxmldchaindone),
        .CH1_RXMLDCHAINREQ(ch1_rxmldchainreq),
        .CH1_RXMLFINEALIGNREQ(ch1_rxmlfinealignreq),
        .CH1_RXOOBRESET(ch1_rxoobreset),
        .CH1_RXOSINTDONE(ch1_rxosintdone),
        .CH1_RXOSINTSTARTED(ch1_rxosintstarted),
        .CH1_RXOSINTSTROBEDONE(ch1_rxosintstrobedone),
        .CH1_RXOSINTSTROBESTARTED(ch1_rxosintstrobestarted),
        .CH1_RXOUTCLK(ch1_rxoutclk),
        .CH1_RXPCSRESETMASK(ch1_rxpcsresetmask),
        .CH1_RXPD(ch1_rxpd),
        .CH1_RXPHALIGNDONE(ch1_rxphaligndone),
        .CH1_RXPHALIGNERR(ch1_rxphalignerr),
        .CH1_RXPHALIGNREQ(ch1_rxphalignreq),
        .CH1_RXPHALIGNRESETMASK(ch1_rxphalignresetmask),
        .CH1_RXPHDLYPD(ch1_rxphdlypd),
        .CH1_RXPHDLYRESET(ch1_rxphdlyreset),
        .CH1_RXPHDLYRESETDONE(ch1_rxphdlyresetdone),
        .CH1_RXPHSETINITDONE(ch1_rxphsetinitdone),
        .CH1_RXPHSETINITREQ(ch1_rxphsetinitreq),
        .CH1_RXPHSHIFT180(ch1_rxphshift180),
        .CH1_RXPHSHIFT180DONE(ch1_rxphshift180done),
        .CH1_RXPMARESETDONE(ch1_rxpmaresetdone_int),
        .CH1_RXPMARESETMASK(ch1_rxpmaresetmask),
        .CH1_RXPOLARITY(ch1_rxpolarity),
        .CH1_RXPRBSCNTRESET(ch1_rxprbscntreset),
        .CH1_RXPRBSERR(ch1_rxprbserr),
        .CH1_RXPRBSLOCKED(ch1_rxprbslocked),
        .CH1_RXPRBSSEL(ch1_rxprbssel),
        .CH1_RXPROGDIVRESET(ch1_rxprogdivreset),
        .CH1_RXPROGDIVRESETDONE(ch1_rxprogdivresetdone),
        .CH1_RXRATE(ch1_rxrate),
        .CH1_RXRESETDONE(ch1_rxresetdone_int),
        .CH1_RXRESETMODE(ch1_rxresetmode),
        .CH1_RXSLIDE(ch1_rxslide),
        .CH1_RXSLIDERDY(ch1_rxsliderdy),
        .CH1_RXSTARTOFSEQ(ch1_rxstartofseq),
        .CH1_RXSTATUS(ch1_rxstatus),
        .CH1_RXSYNCALLIN(ch1_rxsyncallin),
        .CH1_RXSYNCDONE(ch1_rxsyncdone),
        .CH1_RXTERMINATION(ch1_rxtermination),
        .CH1_RXUSERRDY(ch1_rxuserrdy),
        .CH1_RXUSRCLK(ch1_rxusrclk),
        .CH1_RXVALID(ch1_rxvalid),
        .CH1_TSTCLK0(apb3clk),
        .CH1_TSTCLK1(apb3clk),
        .CH1_TSTIN(ch1_tstin),
        .CH1_TX10GSTAT(ch1_tx10gstat),
        .CH1_TXBUFSTATUS(ch1_txbufstatus),
        .CH1_TXCOMFINISH(ch1_txcomfinish),
        .CH1_TXCOMINIT(ch1_txcominit),
        .CH1_TXCOMSAS(ch1_txcomsas),
        .CH1_TXCOMWAKE(ch1_txcomwake),
        .CH1_TXCTRL0(ch1_txctrl0),
        .CH1_TXCTRL1(ch1_txctrl1),
        .CH1_TXCTRL2(ch1_txctrl2),
        .CH1_TXDAPICODEOVRDEN(ch1_txdapicodeovrden),
        .CH1_TXDAPICODERESET(ch1_txdapicodereset),
        .CH1_TXDATA(ch1_txdata),
        .CH1_TXDATAEXTENDRSVD(ch1_txdataextendrsvd),
        .CH1_TXDCCDONE(ch1_txdccdone),
        .CH1_TXDEEMPH(ch1_txdeemph),
        .CH1_TXDETECTRX(ch1_txdetectrx),
        .CH1_TXDIFFCTRL(ch1_txdiffctrl),
        .CH1_TXDLYALIGNERR(ch1_txdlyalignerr),
        .CH1_TXDLYALIGNPROG(ch1_txdlyalignprog),
        .CH1_TXDLYALIGNREQ(ch1_txdlyalignreq),
        .CH1_TXELECIDLE(ch1_txelecidle),
        .CH1_TXHEADER(ch1_txheader),
        .CH1_TXINHIBIT(ch1_txinhibit),
        .CH1_TXLATCLK(ch1_txlatclk),
        .CH1_TXMAINCURSOR(ch1_txmaincursor),
        .CH1_TXMARGIN(ch1_txmargin),
        .CH1_TXMLDCHAINDONE(ch1_txmldchaindone),
        .CH1_TXMLDCHAINREQ(ch1_txmldchainreq),
        .CH1_TXONESZEROS(ch1_txoneszeros),
        .CH1_TXOUTCLK(ch1_txoutclk),
        .CH1_TXPAUSEDELAYALIGN(ch1_txpausedelayalign),
        .CH1_TXPCSRESETMASK(ch1_txpcsresetmask),
        .CH1_TXPD(ch1_txpd),
        .CH1_TXPHALIGNDONE(ch1_txphaligndone),
        .CH1_TXPHALIGNERR(ch1_txphalignerr),
        .CH1_TXPHALIGNOUTRSVD(ch1_txphalignoutrsvd),
        .CH1_TXPHALIGNREQ(ch1_txphalignreq),
        .CH1_TXPHALIGNRESETMASK(ch1_txphalignresetmask),
        .CH1_TXPHDLYPD(ch1_txphdlypd),
        .CH1_TXPHDLYRESET(ch1_txphdlyreset),
        .CH1_TXPHDLYRESETDONE(ch1_txphdlyresetdone),
        .CH1_TXPHDLYTSTCLK(ch1_txphdlytstclk),
        .CH1_TXPHSETINITDONE(ch1_txphsetinitdone),
        .CH1_TXPHSETINITREQ(ch1_txphsetinitreq),
        .CH1_TXPHSHIFT180(ch1_txphshift180),
        .CH1_TXPHSHIFT180DONE(ch1_txphshift180done),
        .CH1_TXPICODEOVRDEN(ch1_txpicodeovrden),
        .CH1_TXPICODERESET(ch1_txpicodereset),
        .CH1_TXPIPPMEN(ch1_txpippmen),
        .CH1_TXPIPPMSTEPSIZE(ch1_txpippmstepsize),
        .CH1_TXPISOPD(ch1_txpisopd),
        .CH1_TXPMARESETDONE(ch1_txpmaresetdone_int),
        .CH1_TXPMARESETMASK(ch1_txpmaresetmask),
        .CH1_TXPOLARITY(ch1_txpolarity),
        .CH1_TXPOSTCURSOR(ch1_txpostcursor),
        .CH1_TXPRBSFORCEERR(ch1_txprbsforceerr),
        .CH1_TXPRBSSEL(ch1_txprbssel),
        .CH1_TXPRECURSOR(ch1_txprecursor),
        .CH1_TXPROGDIVRESET(ch1_txprogdivreset),
        .CH1_TXPROGDIVRESETDONE(ch1_txprogdivresetdone),
        .CH1_TXRATE(ch1_txrate),
        .CH1_TXRESETDONE(ch1_txresetdone_int),
        .CH1_TXRESETMODE(ch1_txresetmode),
        .CH1_TXSEQUENCE(ch1_txsequence),
        .CH1_TXSWING(ch1_txswing),
        .CH1_TXSYNCALLIN(ch1_txsyncallin),
        .CH1_TXSYNCDONE(ch1_txsyncdone),
        .CH1_TXUSERRDY(ch1_txuserrdy),
        .CH1_TXUSRCLK(ch1_txusrclk),
        .CH2_BUFGTCE(ch2_bufgtce),
        .CH2_BUFGTCEMASK(ch2_bufgtcemask),
        .CH2_BUFGTDIV(ch2_bufgtdiv),
        .CH2_BUFGTRST(ch2_bufgtrst),
        .CH2_BUFGTRSTMASK(ch2_bufgtrstmask),
        .CH2_CDRBMCDRREQ(ch2_cdrbmcdrreq),
        .CH2_CDRFREQOS(ch2_cdrfreqos),
        .CH2_CDRINCPCTRL(ch2_cdrincpctrl),
        .CH2_CDRSTEPDIR(ch2_cdrstepdir),
        .CH2_CDRSTEPSQ(ch2_cdrstepsq),
        .CH2_CDRSTEPSX(ch2_cdrstepsx),
        .CH2_CFOKOVRDFINISH(ch2_cfokovrdfinish),
        .CH2_CFOKOVRDPULSE(ch2_cfokovrdpulse),
        .CH2_CFOKOVRDRDY0(ch2_cfokovrdrdy0),
        .CH2_CFOKOVRDRDY1(ch2_cfokovrdrdy1),
        .CH2_CFOKOVRDSTART(ch2_cfokovrdstart),
        .CH2_CLKRSVD0(ch2_clkrsvd0),
        .CH2_CLKRSVD1(ch2_clkrsvd1),
        .CH2_DMONFIFORESET(ch2_dmonfiforeset),
        .CH2_DMONITORCLK(ch2_dmonitorclk),
        .CH2_DMONITOROUT(ch2_dmonitorout),
        .CH2_DMONITOROUTCLK(ch2_dmonitoroutclk),
        .CH2_EYESCANDATAERROR(ch2_eyescandataerror),
        .CH2_EYESCANRESET(ch2_eyescanreset),
        .CH2_EYESCANTRIGGER(ch2_eyescantrigger),
        .CH2_GTRSVD(ch2_gtrsvd),
        .CH2_GTRXRESET(ch2_gtrxreset),
        .CH2_GTTXRESET(ch2_gttxreset),
        .CH2_GTYRXN(rxn[2]),
        .CH2_GTYRXP(rxp[2]),
        .CH2_GTYTXN(txn[2]),
        .CH2_GTYTXP(txp[2]),
        .CH2_HSDPPCSRESET(ch2_hsdppcsreset),
        .CH2_ILORESET(ch2_iloreset),
        .CH2_ILORESETDONE(ch2_iloresetdone),
        .CH2_ILORESETMASK(ch2_iloresetmask),
        .CH2_LOOPBACK(ch2_loopback),
        .CH2_PCIERSTB(ch2_pcierstb),
        .CH2_PCSRSVDIN({ch2_pcsrsvdin[15:11],ch2_gtrxreset,ch2_pcsrsvdin[9:8],ch2_gttxreset,ch2_pcsrsvdin[6:0]}),
        .CH2_PCSRSVDOUT({ch2_pcsrsvdout[15:12],ch2_pcsrsvdout_int,ch2_pcsrsvdout[9:0]}),
        .CH2_PHYESMADAPTSAVE(ch2_phyesmadaptsave),
        .CH2_PHYREADY(ch2_phyready),
        .CH2_PHYSTATUS(ch2_phystatus),
        .CH2_PINRSVDAS(ch2_pinrsvdas),
        .CH2_RESETEXCEPTION(ch2_resetexception),
        .CH2_RX10GSTAT(ch2_rx10gstat),
        .CH2_RXBUFSTATUS(ch2_rxbufstatus),
        .CH2_RXBYTEISALIGNED(ch2_rxbyteisaligned),
        .CH2_RXBYTEREALIGN(ch2_rxbyterealign),
        .CH2_RXCDRHOLD(ch2_rxcdrhold),
        .CH2_RXCDRLOCK(ch2_rxcdrlock),
        .CH2_RXCDROVRDEN(ch2_rxcdrovrden),
        .CH2_RXCDRPHDONE(ch2_rxcdrphdone),
        .CH2_RXCDRRESET(ch2_rxcdrreset),
        .CH2_RXCHANBONDSEQ(ch2_rxchanbondseq),
        .CH2_RXCHANISALIGNED(ch2_rxchanisaligned),
        .CH2_RXCHANREALIGN(ch2_rxchanrealign),
        .CH2_RXCHBONDI(ch2_rxchbondi),
        .CH2_RXCHBONDO(ch2_rxchbondo),
        .CH2_RXCLKCORCNT(ch2_rxclkcorcnt),
        .CH2_RXCOMINITDET(ch2_rxcominitdet),
        .CH2_RXCOMMADET(ch2_rxcommadet),
        .CH2_RXCOMSASDET(ch2_rxcomsasdet),
        .CH2_RXCOMWAKEDET(ch2_rxcomwakedet),
        .CH2_RXCTRL0(ch2_rxctrl0),
        .CH2_RXCTRL1(ch2_rxctrl1),
        .CH2_RXCTRL2(ch2_rxctrl2),
        .CH2_RXCTRL3(ch2_rxctrl3),
        .CH2_RXDAPICODEOVRDEN(ch2_rxdapicodeovrden),
        .CH2_RXDAPICODERESET(ch2_rxdapicodereset),
        .CH2_RXDATA(ch2_rxdata),
        .CH2_RXDATAEXTENDRSVD(ch2_rxdataextendrsvd),
        .CH2_RXDATAVALID(ch2_rxdatavalid),
        .CH2_RXDCCDONE(ch2_rxdccdone),
        .CH2_RXDLYALIGNERR(ch2_rxdlyalignerr),
        .CH2_RXDLYALIGNPROG(ch2_rxdlyalignprog),
        .CH2_RXDLYALIGNREQ(ch2_rxdlyalignreq),
        .CH2_RXELECIDLE(ch2_rxelecidle),
        .CH2_RXEQTRAINING(ch2_rxeqtraining),
        .CH2_RXFINEALIGNDONE(ch2_rxfinealigndone),
        .CH2_RXGEARBOXSLIP(ch2_rxgearboxslip),
        .CH2_RXHEADER(ch2_rxheader),
        .CH2_RXHEADERVALID(ch2_rxheadervalid),
        .CH2_RXLATCLK(ch2_rxlatclk),
        .CH2_RXLPMEN(ch2_rxlpmen),
        .CH2_RXMLDCHAINDONE(ch2_rxmldchaindone),
        .CH2_RXMLDCHAINREQ(ch2_rxmldchainreq),
        .CH2_RXMLFINEALIGNREQ(ch2_rxmlfinealignreq),
        .CH2_RXOOBRESET(ch2_rxoobreset),
        .CH2_RXOSINTDONE(ch2_rxosintdone),
        .CH2_RXOSINTSTARTED(ch2_rxosintstarted),
        .CH2_RXOSINTSTROBEDONE(ch2_rxosintstrobedone),
        .CH2_RXOSINTSTROBESTARTED(ch2_rxosintstrobestarted),
        .CH2_RXOUTCLK(ch2_rxoutclk),
        .CH2_RXPCSRESETMASK(ch2_rxpcsresetmask),
        .CH2_RXPD(ch2_rxpd),
        .CH2_RXPHALIGNDONE(ch2_rxphaligndone),
        .CH2_RXPHALIGNERR(ch2_rxphalignerr),
        .CH2_RXPHALIGNREQ(ch2_rxphalignreq),
        .CH2_RXPHALIGNRESETMASK(ch2_rxphalignresetmask),
        .CH2_RXPHDLYPD(ch2_rxphdlypd),
        .CH2_RXPHDLYRESET(ch2_rxphdlyreset),
        .CH2_RXPHDLYRESETDONE(ch2_rxphdlyresetdone),
        .CH2_RXPHSETINITDONE(ch2_rxphsetinitdone),
        .CH2_RXPHSETINITREQ(ch2_rxphsetinitreq),
        .CH2_RXPHSHIFT180(ch2_rxphshift180),
        .CH2_RXPHSHIFT180DONE(ch2_rxphshift180done),
        .CH2_RXPMARESETDONE(ch2_rxpmaresetdone_int),
        .CH2_RXPMARESETMASK(ch2_rxpmaresetmask),
        .CH2_RXPOLARITY(ch2_rxpolarity),
        .CH2_RXPRBSCNTRESET(ch2_rxprbscntreset),
        .CH2_RXPRBSERR(ch2_rxprbserr),
        .CH2_RXPRBSLOCKED(ch2_rxprbslocked),
        .CH2_RXPRBSSEL(ch2_rxprbssel),
        .CH2_RXPROGDIVRESET(ch2_rxprogdivreset),
        .CH2_RXPROGDIVRESETDONE(ch2_rxprogdivresetdone),
        .CH2_RXRATE(ch2_rxrate),
        .CH2_RXRESETDONE(ch2_rxresetdone_int),
        .CH2_RXRESETMODE(ch2_rxresetmode),
        .CH2_RXSLIDE(ch2_rxslide),
        .CH2_RXSLIDERDY(ch2_rxsliderdy),
        .CH2_RXSTARTOFSEQ(ch2_rxstartofseq),
        .CH2_RXSTATUS(ch2_rxstatus),
        .CH2_RXSYNCALLIN(ch2_rxsyncallin),
        .CH2_RXSYNCDONE(ch2_rxsyncdone),
        .CH2_RXTERMINATION(ch2_rxtermination),
        .CH2_RXUSERRDY(ch2_rxuserrdy),
        .CH2_RXUSRCLK(ch2_rxusrclk),
        .CH2_RXVALID(ch2_rxvalid),
        .CH2_TSTCLK0(apb3clk),
        .CH2_TSTCLK1(apb3clk),
        .CH2_TSTIN(ch2_tstin),
        .CH2_TX10GSTAT(ch2_tx10gstat),
        .CH2_TXBUFSTATUS(ch2_txbufstatus),
        .CH2_TXCOMFINISH(ch2_txcomfinish),
        .CH2_TXCOMINIT(ch2_txcominit),
        .CH2_TXCOMSAS(ch2_txcomsas),
        .CH2_TXCOMWAKE(ch2_txcomwake),
        .CH2_TXCTRL0(ch2_txctrl0),
        .CH2_TXCTRL1(ch2_txctrl1),
        .CH2_TXCTRL2(ch2_txctrl2),
        .CH2_TXDAPICODEOVRDEN(ch2_txdapicodeovrden),
        .CH2_TXDAPICODERESET(ch2_txdapicodereset),
        .CH2_TXDATA(ch2_txdata),
        .CH2_TXDATAEXTENDRSVD(ch2_txdataextendrsvd),
        .CH2_TXDCCDONE(ch2_txdccdone),
        .CH2_TXDEEMPH(ch2_txdeemph),
        .CH2_TXDETECTRX(ch2_txdetectrx),
        .CH2_TXDIFFCTRL(ch2_txdiffctrl),
        .CH2_TXDLYALIGNERR(ch2_txdlyalignerr),
        .CH2_TXDLYALIGNPROG(ch2_txdlyalignprog),
        .CH2_TXDLYALIGNREQ(ch2_txdlyalignreq),
        .CH2_TXELECIDLE(ch2_txelecidle),
        .CH2_TXHEADER(ch2_txheader),
        .CH2_TXINHIBIT(ch2_txinhibit),
        .CH2_TXLATCLK(ch2_txlatclk),
        .CH2_TXMAINCURSOR(ch2_txmaincursor),
        .CH2_TXMARGIN(ch2_txmargin),
        .CH2_TXMLDCHAINDONE(ch2_txmldchaindone),
        .CH2_TXMLDCHAINREQ(ch2_txmldchainreq),
        .CH2_TXONESZEROS(ch2_txoneszeros),
        .CH2_TXOUTCLK(ch2_txoutclk),
        .CH2_TXPAUSEDELAYALIGN(ch2_txpausedelayalign),
        .CH2_TXPCSRESETMASK(ch2_txpcsresetmask),
        .CH2_TXPD(ch2_txpd),
        .CH2_TXPHALIGNDONE(ch2_txphaligndone),
        .CH2_TXPHALIGNERR(ch2_txphalignerr),
        .CH2_TXPHALIGNOUTRSVD(ch2_txphalignoutrsvd),
        .CH2_TXPHALIGNREQ(ch2_txphalignreq),
        .CH2_TXPHALIGNRESETMASK(ch2_txphalignresetmask),
        .CH2_TXPHDLYPD(ch2_txphdlypd),
        .CH2_TXPHDLYRESET(ch2_txphdlyreset),
        .CH2_TXPHDLYRESETDONE(ch2_txphdlyresetdone),
        .CH2_TXPHDLYTSTCLK(ch2_txphdlytstclk),
        .CH2_TXPHSETINITDONE(ch2_txphsetinitdone),
        .CH2_TXPHSETINITREQ(ch2_txphsetinitreq),
        .CH2_TXPHSHIFT180(ch2_txphshift180),
        .CH2_TXPHSHIFT180DONE(ch2_txphshift180done),
        .CH2_TXPICODEOVRDEN(ch2_txpicodeovrden),
        .CH2_TXPICODERESET(ch2_txpicodereset),
        .CH2_TXPIPPMEN(ch2_txpippmen),
        .CH2_TXPIPPMSTEPSIZE(ch2_txpippmstepsize),
        .CH2_TXPISOPD(ch2_txpisopd),
        .CH2_TXPMARESETDONE(ch2_txpmaresetdone_int),
        .CH2_TXPMARESETMASK(ch2_txpmaresetmask),
        .CH2_TXPOLARITY(ch2_txpolarity),
        .CH2_TXPOSTCURSOR(ch2_txpostcursor),
        .CH2_TXPRBSFORCEERR(ch2_txprbsforceerr),
        .CH2_TXPRBSSEL(ch2_txprbssel),
        .CH2_TXPRECURSOR(ch2_txprecursor),
        .CH2_TXPROGDIVRESET(ch2_txprogdivreset),
        .CH2_TXPROGDIVRESETDONE(ch2_txprogdivresetdone),
        .CH2_TXRATE(ch2_txrate),
        .CH2_TXRESETDONE(ch2_txresetdone_int),
        .CH2_TXRESETMODE(ch2_txresetmode),
        .CH2_TXSEQUENCE(ch2_txsequence),
        .CH2_TXSWING(ch2_txswing),
        .CH2_TXSYNCALLIN(ch2_txsyncallin),
        .CH2_TXSYNCDONE(ch2_txsyncdone),
        .CH2_TXUSERRDY(ch2_txuserrdy),
        .CH2_TXUSRCLK(ch2_txusrclk),
        .CH3_BUFGTCE(ch3_bufgtce),
        .CH3_BUFGTCEMASK(ch3_bufgtcemask),
        .CH3_BUFGTDIV(ch3_bufgtdiv),
        .CH3_BUFGTRST(ch3_bufgtrst),
        .CH3_BUFGTRSTMASK(ch3_bufgtrstmask),
        .CH3_CDRBMCDRREQ(ch3_cdrbmcdrreq),
        .CH3_CDRFREQOS(ch3_cdrfreqos),
        .CH3_CDRINCPCTRL(ch3_cdrincpctrl),
        .CH3_CDRSTEPDIR(ch3_cdrstepdir),
        .CH3_CDRSTEPSQ(ch3_cdrstepsq),
        .CH3_CDRSTEPSX(ch3_cdrstepsx),
        .CH3_CFOKOVRDFINISH(ch3_cfokovrdfinish),
        .CH3_CFOKOVRDPULSE(ch3_cfokovrdpulse),
        .CH3_CFOKOVRDRDY0(ch3_cfokovrdrdy0),
        .CH3_CFOKOVRDRDY1(ch3_cfokovrdrdy1),
        .CH3_CFOKOVRDSTART(ch3_cfokovrdstart),
        .CH3_CLKRSVD0(ch3_clkrsvd0),
        .CH3_CLKRSVD1(ch3_clkrsvd1),
        .CH3_DMONFIFORESET(ch3_dmonfiforeset),
        .CH3_DMONITORCLK(ch3_dmonitorclk),
        .CH3_DMONITOROUT(ch3_dmonitorout),
        .CH3_DMONITOROUTCLK(ch3_dmonitoroutclk),
        .CH3_EYESCANDATAERROR(ch3_eyescandataerror),
        .CH3_EYESCANRESET(ch3_eyescanreset),
        .CH3_EYESCANTRIGGER(ch3_eyescantrigger),
        .CH3_GTRSVD(ch3_gtrsvd),
        .CH3_GTRXRESET(ch3_gtrxreset),
        .CH3_GTTXRESET(ch3_gttxreset),
        .CH3_GTYRXN(rxn[3]),
        .CH3_GTYRXP(rxp[3]),
        .CH3_GTYTXN(txn[3]),
        .CH3_GTYTXP(txp[3]),
        .CH3_HSDPPCSRESET(ch3_hsdppcsreset),
        .CH3_ILORESET(ch3_iloreset),
        .CH3_ILORESETDONE(ch3_iloresetdone),
        .CH3_ILORESETMASK(ch3_iloresetmask),
        .CH3_LOOPBACK(ch3_loopback),
        .CH3_PCIERSTB(ch3_pcierstb),
        .CH3_PCSRSVDIN({ch3_pcsrsvdin[15:11],ch3_gtrxreset,ch3_pcsrsvdin[9:8],ch3_gttxreset,ch3_pcsrsvdin[6:0]}),
        .CH3_PCSRSVDOUT({ch3_pcsrsvdout[15:12],ch3_pcsrsvdout_int,ch3_pcsrsvdout[9:0]}),
        .CH3_PHYESMADAPTSAVE(ch3_phyesmadaptsave),
        .CH3_PHYREADY(ch3_phyready),
        .CH3_PHYSTATUS(ch3_phystatus),
        .CH3_PINRSVDAS(ch3_pinrsvdas),
        .CH3_RESETEXCEPTION(ch3_resetexception),
        .CH3_RX10GSTAT(ch3_rx10gstat),
        .CH3_RXBUFSTATUS(ch3_rxbufstatus),
        .CH3_RXBYTEISALIGNED(ch3_rxbyteisaligned),
        .CH3_RXBYTEREALIGN(ch3_rxbyterealign),
        .CH3_RXCDRHOLD(ch3_rxcdrhold),
        .CH3_RXCDRLOCK(ch3_rxcdrlock),
        .CH3_RXCDROVRDEN(ch3_rxcdrovrden),
        .CH3_RXCDRPHDONE(ch3_rxcdrphdone),
        .CH3_RXCDRRESET(ch3_rxcdrreset),
        .CH3_RXCHANBONDSEQ(ch3_rxchanbondseq),
        .CH3_RXCHANISALIGNED(ch3_rxchanisaligned),
        .CH3_RXCHANREALIGN(ch3_rxchanrealign),
        .CH3_RXCHBONDI(ch3_rxchbondi),
        .CH3_RXCHBONDO(ch3_rxchbondo),
        .CH3_RXCLKCORCNT(ch3_rxclkcorcnt),
        .CH3_RXCOMINITDET(ch3_rxcominitdet),
        .CH3_RXCOMMADET(ch3_rxcommadet),
        .CH3_RXCOMSASDET(ch3_rxcomsasdet),
        .CH3_RXCOMWAKEDET(ch3_rxcomwakedet),
        .CH3_RXCTRL0(ch3_rxctrl0),
        .CH3_RXCTRL1(ch3_rxctrl1),
        .CH3_RXCTRL2(ch3_rxctrl2),
        .CH3_RXCTRL3(ch3_rxctrl3),
        .CH3_RXDAPICODEOVRDEN(ch3_rxdapicodeovrden),
        .CH3_RXDAPICODERESET(ch3_rxdapicodereset),
        .CH3_RXDATA(ch3_rxdata),
        .CH3_RXDATAEXTENDRSVD(ch3_rxdataextendrsvd),
        .CH3_RXDATAVALID(ch3_rxdatavalid),
        .CH3_RXDCCDONE(ch3_rxdccdone),
        .CH3_RXDLYALIGNERR(ch3_rxdlyalignerr),
        .CH3_RXDLYALIGNPROG(ch3_rxdlyalignprog),
        .CH3_RXDLYALIGNREQ(ch3_rxdlyalignreq),
        .CH3_RXELECIDLE(ch3_rxelecidle),
        .CH3_RXEQTRAINING(ch3_rxeqtraining),
        .CH3_RXFINEALIGNDONE(ch3_rxfinealigndone),
        .CH3_RXGEARBOXSLIP(ch3_rxgearboxslip),
        .CH3_RXHEADER(ch3_rxheader),
        .CH3_RXHEADERVALID(ch3_rxheadervalid),
        .CH3_RXLATCLK(ch3_rxlatclk),
        .CH3_RXLPMEN(ch3_rxlpmen),
        .CH3_RXMLDCHAINDONE(ch3_rxmldchaindone),
        .CH3_RXMLDCHAINREQ(ch3_rxmldchainreq),
        .CH3_RXMLFINEALIGNREQ(ch3_rxmlfinealignreq),
        .CH3_RXOOBRESET(ch3_rxoobreset),
        .CH3_RXOSINTDONE(ch3_rxosintdone),
        .CH3_RXOSINTSTARTED(ch3_rxosintstarted),
        .CH3_RXOSINTSTROBEDONE(ch3_rxosintstrobedone),
        .CH3_RXOSINTSTROBESTARTED(ch3_rxosintstrobestarted),
        .CH3_RXOUTCLK(ch3_rxoutclk),
        .CH3_RXPCSRESETMASK(ch3_rxpcsresetmask),
        .CH3_RXPD(ch3_rxpd),
        .CH3_RXPHALIGNDONE(ch3_rxphaligndone),
        .CH3_RXPHALIGNERR(ch3_rxphalignerr),
        .CH3_RXPHALIGNREQ(ch3_rxphalignreq),
        .CH3_RXPHALIGNRESETMASK(ch3_rxphalignresetmask),
        .CH3_RXPHDLYPD(ch3_rxphdlypd),
        .CH3_RXPHDLYRESET(ch3_rxphdlyreset),
        .CH3_RXPHDLYRESETDONE(ch3_rxphdlyresetdone),
        .CH3_RXPHSETINITDONE(ch3_rxphsetinitdone),
        .CH3_RXPHSETINITREQ(ch3_rxphsetinitreq),
        .CH3_RXPHSHIFT180(ch3_rxphshift180),
        .CH3_RXPHSHIFT180DONE(ch3_rxphshift180done),
        .CH3_RXPMARESETDONE(ch3_rxpmaresetdone_int),
        .CH3_RXPMARESETMASK(ch3_rxpmaresetmask),
        .CH3_RXPOLARITY(ch3_rxpolarity),
        .CH3_RXPRBSCNTRESET(ch3_rxprbscntreset),
        .CH3_RXPRBSERR(ch3_rxprbserr),
        .CH3_RXPRBSLOCKED(ch3_rxprbslocked),
        .CH3_RXPRBSSEL(ch3_rxprbssel),
        .CH3_RXPROGDIVRESET(ch3_rxprogdivreset),
        .CH3_RXPROGDIVRESETDONE(ch3_rxprogdivresetdone),
        .CH3_RXRATE(ch3_rxrate),
        .CH3_RXRESETDONE(ch3_rxresetdone_int),
        .CH3_RXRESETMODE(ch3_rxresetmode),
        .CH3_RXSLIDE(ch3_rxslide),
        .CH3_RXSLIDERDY(ch3_rxsliderdy),
        .CH3_RXSTARTOFSEQ(ch3_rxstartofseq),
        .CH3_RXSTATUS(ch3_rxstatus),
        .CH3_RXSYNCALLIN(ch3_rxsyncallin),
        .CH3_RXSYNCDONE(ch3_rxsyncdone),
        .CH3_RXTERMINATION(ch3_rxtermination),
        .CH3_RXUSERRDY(ch3_rxuserrdy),
        .CH3_RXUSRCLK(ch3_rxusrclk),
        .CH3_RXVALID(ch3_rxvalid),
        .CH3_TSTCLK0(apb3clk),
        .CH3_TSTCLK1(apb3clk),
        .CH3_TSTIN(ch3_tstin),
        .CH3_TX10GSTAT(ch3_tx10gstat),
        .CH3_TXBUFSTATUS(ch3_txbufstatus),
        .CH3_TXCOMFINISH(ch3_txcomfinish),
        .CH3_TXCOMINIT(ch3_txcominit),
        .CH3_TXCOMSAS(ch3_txcomsas),
        .CH3_TXCOMWAKE(ch3_txcomwake),
        .CH3_TXCTRL0(ch3_txctrl0),
        .CH3_TXCTRL1(ch3_txctrl1),
        .CH3_TXCTRL2(ch3_txctrl2),
        .CH3_TXDAPICODEOVRDEN(ch3_txdapicodeovrden),
        .CH3_TXDAPICODERESET(ch3_txdapicodereset),
        .CH3_TXDATA(ch3_txdata),
        .CH3_TXDATAEXTENDRSVD(ch3_txdataextendrsvd),
        .CH3_TXDCCDONE(ch3_txdccdone),
        .CH3_TXDEEMPH(ch3_txdeemph),
        .CH3_TXDETECTRX(ch3_txdetectrx),
        .CH3_TXDIFFCTRL(ch3_txdiffctrl),
        .CH3_TXDLYALIGNERR(ch3_txdlyalignerr),
        .CH3_TXDLYALIGNPROG(ch3_txdlyalignprog),
        .CH3_TXDLYALIGNREQ(ch3_txdlyalignreq),
        .CH3_TXELECIDLE(ch3_txelecidle),
        .CH3_TXHEADER(ch3_txheader),
        .CH3_TXINHIBIT(ch3_txinhibit),
        .CH3_TXLATCLK(ch3_txlatclk),
        .CH3_TXMAINCURSOR(ch3_txmaincursor),
        .CH3_TXMARGIN(ch3_txmargin),
        .CH3_TXMLDCHAINDONE(ch3_txmldchaindone),
        .CH3_TXMLDCHAINREQ(ch3_txmldchainreq),
        .CH3_TXONESZEROS(ch3_txoneszeros),
        .CH3_TXOUTCLK(ch3_txoutclk),
        .CH3_TXPAUSEDELAYALIGN(ch3_txpausedelayalign),
        .CH3_TXPCSRESETMASK(ch3_txpcsresetmask),
        .CH3_TXPD(ch3_txpd),
        .CH3_TXPHALIGNDONE(ch3_txphaligndone),
        .CH3_TXPHALIGNERR(ch3_txphalignerr),
        .CH3_TXPHALIGNOUTRSVD(ch3_txphalignoutrsvd),
        .CH3_TXPHALIGNREQ(ch3_txphalignreq),
        .CH3_TXPHALIGNRESETMASK(ch3_txphalignresetmask),
        .CH3_TXPHDLYPD(ch3_txphdlypd),
        .CH3_TXPHDLYRESET(ch3_txphdlyreset),
        .CH3_TXPHDLYRESETDONE(ch3_txphdlyresetdone),
        .CH3_TXPHDLYTSTCLK(ch3_txphdlytstclk),
        .CH3_TXPHSETINITDONE(ch3_txphsetinitdone),
        .CH3_TXPHSETINITREQ(ch3_txphsetinitreq),
        .CH3_TXPHSHIFT180(ch3_txphshift180),
        .CH3_TXPHSHIFT180DONE(ch3_txphshift180done),
        .CH3_TXPICODEOVRDEN(ch3_txpicodeovrden),
        .CH3_TXPICODERESET(ch3_txpicodereset),
        .CH3_TXPIPPMEN(ch3_txpippmen),
        .CH3_TXPIPPMSTEPSIZE(ch3_txpippmstepsize),
        .CH3_TXPISOPD(ch3_txpisopd),
        .CH3_TXPMARESETDONE(ch3_txpmaresetdone_int),
        .CH3_TXPMARESETMASK(ch3_txpmaresetmask),
        .CH3_TXPOLARITY(ch3_txpolarity),
        .CH3_TXPOSTCURSOR(ch3_txpostcursor),
        .CH3_TXPRBSFORCEERR(ch3_txprbsforceerr),
        .CH3_TXPRBSSEL(ch3_txprbssel),
        .CH3_TXPRECURSOR(ch3_txprecursor),
        .CH3_TXPROGDIVRESET(ch3_txprogdivreset),
        .CH3_TXPROGDIVRESETDONE(ch3_txprogdivresetdone),
        .CH3_TXRATE(ch3_txrate),
        .CH3_TXRESETDONE(ch3_txresetdone_int),
        .CH3_TXRESETMODE(ch3_txresetmode),
        .CH3_TXSEQUENCE(ch3_txsequence),
        .CH3_TXSWING(ch3_txswing),
        .CH3_TXSYNCALLIN(ch3_txsyncallin),
        .CH3_TXSYNCDONE(ch3_txsyncdone),
        .CH3_TXUSERRDY(ch3_txuserrdy),
        .CH3_TXUSRCLK(ch3_txusrclk),
        .CORRECTERR(correcterr),
        .CTRLRSVDIN0(ctrlrsvdin0),
        .CTRLRSVDIN1(ctrlrsvdin1),
        .CTRLRSVDOUT(ctrlrsvdout),
        .DEBUGTRACECLK(debugtraceclk),
        .DEBUGTRACEREADY(debugtraceready),
        .DEBUGTRACETDATA(debugtracetdata),
        .DEBUGTRACETVALID(debugtracetvalid),
        .GPI({gpi[15:8],gpi_to_gt}),
        .GPO({gpo[15:8],gpoToLogic}),
        .GTPOWERGOOD(gtpowergood_int),
        .HSCLK0_LCPLLCLKRSVD0(hsclk0_lcpllclkrsvd0),
        .HSCLK0_LCPLLCLKRSVD1(hsclk0_lcpllclkrsvd1),
        .HSCLK0_LCPLLFBCLKLOST(hsclk0_lcpllfbclklost),
        .HSCLK0_LCPLLFBDIV(hsclk0_lcpllfbdiv),
        .HSCLK0_LCPLLGTGREFCLK(1'b0),
        .HSCLK0_LCPLLGTREFCLK0(GT_REFCLK0),
        .HSCLK0_LCPLLGTREFCLK1(1'b0),
        .HSCLK0_LCPLLLOCK(hsclk0_lcplllock),
        .HSCLK0_LCPLLNORTHREFCLK0(1'b0),
        .HSCLK0_LCPLLNORTHREFCLK1(1'b0),
        .HSCLK0_LCPLLPD(hsclk0_lcpllpd),
        .HSCLK0_LCPLLREFCLKLOST(hsclk0_lcpllrefclklost),
        .HSCLK0_LCPLLREFCLKMONITOR(hsclk0_lcpllrefclkmonitor),
        .HSCLK0_LCPLLREFCLKSEL(hsclk0_lcpllrefclksel),
        .HSCLK0_LCPLLRESET(hsclk0_lcpllreset),
        .HSCLK0_LCPLLRESETBYPASSMODE(hsclk0_lcpllresetbypassmode),
        .HSCLK0_LCPLLRESETMASK(hsclk0_lcpllresetmask),
        .HSCLK0_LCPLLRSVD0(hsclk0_lcpllrsvd0),
        .HSCLK0_LCPLLRSVD1(hsclk0_lcpllrsvd1),
        .HSCLK0_LCPLLRSVDOUT(hsclk0_lcpllrsvdout),
        .HSCLK0_LCPLLSDMDATA(hsclk0_lcpllsdmdata),
        .HSCLK0_LCPLLSDMTOGGLE(hsclk0_lcpllsdmtoggle),
        .HSCLK0_LCPLLSOUTHREFCLK0(1'b0),
        .HSCLK0_LCPLLSOUTHREFCLK1(1'b0),
        .HSCLK0_RPLLCLKRSVD0(hsclk0_rpllclkrsvd0),
        .HSCLK0_RPLLCLKRSVD1(hsclk0_rpllclkrsvd1),
        .HSCLK0_RPLLFBCLKLOST(hsclk0_rpllfbclklost),
        .HSCLK0_RPLLFBDIV(hsclk0_rpllfbdiv),
        .HSCLK0_RPLLGTGREFCLK(1'b0),
        .HSCLK0_RPLLGTREFCLK0(1'b0),
        .HSCLK0_RPLLGTREFCLK1(1'b0),
        .HSCLK0_RPLLLOCK(hsclk0_rplllock),
        .HSCLK0_RPLLNORTHREFCLK0(1'b0),
        .HSCLK0_RPLLNORTHREFCLK1(1'b0),
        .HSCLK0_RPLLPD(hsclk0_rpllpd),
        .HSCLK0_RPLLREFCLKLOST(hsclk0_rpllrefclklost),
        .HSCLK0_RPLLREFCLKMONITOR(hsclk0_rpllrefclkmonitor),
        .HSCLK0_RPLLREFCLKSEL(hsclk0_rpllrefclksel),
        .HSCLK0_RPLLRESET(hsclk0_rpllreset),
        .HSCLK0_RPLLRESETBYPASSMODE(hsclk0_rpllresetbypassmode),
        .HSCLK0_RPLLRESETMASK(hsclk0_rpllresetmask),
        .HSCLK0_RPLLRSVD0(hsclk0_rpllrsvd0),
        .HSCLK0_RPLLRSVD1(hsclk0_rpllrsvd1),
        .HSCLK0_RPLLRSVDOUT(hsclk0_rpllrsvdout),
        .HSCLK0_RPLLSDMDATA(hsclk0_rpllsdmdata),
        .HSCLK0_RPLLSDMTOGGLE(hsclk0_rpllsdmtoggle),
        .HSCLK0_RPLLSOUTHREFCLK0(1'b0),
        .HSCLK0_RPLLSOUTHREFCLK1(1'b0),
        .HSCLK0_RXRECCLKOUT0(hsclk0_rxrecclkout0),
        .HSCLK0_RXRECCLKOUT1(hsclk0_rxrecclkout1),
        .HSCLK0_RXRECCLKSEL(hsclk0_rxrecclksel),
        .HSCLK1_LCPLLCLKRSVD0(hsclk1_lcpllclkrsvd0),
        .HSCLK1_LCPLLCLKRSVD1(hsclk1_lcpllclkrsvd1),
        .HSCLK1_LCPLLFBCLKLOST(hsclk1_lcpllfbclklost),
        .HSCLK1_LCPLLFBDIV(hsclk1_lcpllfbdiv),
        .HSCLK1_LCPLLGTGREFCLK(1'b0),
        .HSCLK1_LCPLLGTREFCLK0(GT_REFCLK0),
        .HSCLK1_LCPLLGTREFCLK1(1'b0),
        .HSCLK1_LCPLLLOCK(hsclk1_lcplllock),
        .HSCLK1_LCPLLNORTHREFCLK0(1'b0),
        .HSCLK1_LCPLLNORTHREFCLK1(1'b0),
        .HSCLK1_LCPLLPD(hsclk1_lcpllpd),
        .HSCLK1_LCPLLREFCLKLOST(hsclk1_lcpllrefclklost),
        .HSCLK1_LCPLLREFCLKMONITOR(hsclk1_lcpllrefclkmonitor),
        .HSCLK1_LCPLLREFCLKSEL(hsclk1_lcpllrefclksel),
        .HSCLK1_LCPLLRESET(hsclk1_lcpllreset),
        .HSCLK1_LCPLLRESETBYPASSMODE(hsclk1_lcpllresetbypassmode),
        .HSCLK1_LCPLLRESETMASK(hsclk1_lcpllresetmask),
        .HSCLK1_LCPLLRSVD0(hsclk1_lcpllrsvd0),
        .HSCLK1_LCPLLRSVD1(hsclk1_lcpllrsvd1),
        .HSCLK1_LCPLLRSVDOUT(hsclk1_lcpllrsvdout),
        .HSCLK1_LCPLLSDMDATA(hsclk1_lcpllsdmdata),
        .HSCLK1_LCPLLSDMTOGGLE(hsclk1_lcpllsdmtoggle),
        .HSCLK1_LCPLLSOUTHREFCLK0(1'b0),
        .HSCLK1_LCPLLSOUTHREFCLK1(1'b0),
        .HSCLK1_RPLLCLKRSVD0(hsclk1_rpllclkrsvd0),
        .HSCLK1_RPLLCLKRSVD1(hsclk1_rpllclkrsvd1),
        .HSCLK1_RPLLFBCLKLOST(hsclk1_rpllfbclklost),
        .HSCLK1_RPLLFBDIV(hsclk1_rpllfbdiv),
        .HSCLK1_RPLLGTGREFCLK(1'b0),
        .HSCLK1_RPLLGTREFCLK0(1'b0),
        .HSCLK1_RPLLGTREFCLK1(1'b0),
        .HSCLK1_RPLLLOCK(hsclk1_rplllock),
        .HSCLK1_RPLLNORTHREFCLK0(1'b0),
        .HSCLK1_RPLLNORTHREFCLK1(1'b0),
        .HSCLK1_RPLLPD(hsclk1_rpllpd),
        .HSCLK1_RPLLREFCLKLOST(hsclk1_rpllrefclklost),
        .HSCLK1_RPLLREFCLKMONITOR(hsclk1_rpllrefclkmonitor),
        .HSCLK1_RPLLREFCLKSEL(hsclk1_rpllrefclksel),
        .HSCLK1_RPLLRESET(hsclk1_rpllreset),
        .HSCLK1_RPLLRESETBYPASSMODE(hsclk1_rpllresetbypassmode),
        .HSCLK1_RPLLRESETMASK(hsclk1_rpllresetmask),
        .HSCLK1_RPLLRSVD0(hsclk1_rpllrsvd0),
        .HSCLK1_RPLLRSVD1(hsclk1_rpllrsvd1),
        .HSCLK1_RPLLRSVDOUT(hsclk1_rpllrsvdout),
        .HSCLK1_RPLLSDMDATA(hsclk1_rpllsdmdata),
        .HSCLK1_RPLLSDMTOGGLE(hsclk1_rpllsdmtoggle),
        .HSCLK1_RPLLSOUTHREFCLK0(1'b0),
        .HSCLK1_RPLLSOUTHREFCLK1(1'b0),
        .HSCLK1_RXRECCLKOUT0(hsclk1_rxrecclkout0),
        .HSCLK1_RXRECCLKOUT1(hsclk1_rxrecclkout1),
        .HSCLK1_RXRECCLKSEL(hsclk1_rxrecclksel),
        .M0_AXIS_TDATA(NLW_quad_inst_M0_AXIS_TDATA_UNCONNECTED[31:0]),
        .M0_AXIS_TLAST(NLW_quad_inst_M0_AXIS_TLAST_UNCONNECTED),
        .M0_AXIS_TREADY(1'b0),
        .M0_AXIS_TVALID(NLW_quad_inst_M0_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(NLW_quad_inst_M1_AXIS_TDATA_UNCONNECTED[31:0]),
        .M1_AXIS_TLAST(NLW_quad_inst_M1_AXIS_TLAST_UNCONNECTED),
        .M1_AXIS_TREADY(1'b0),
        .M1_AXIS_TVALID(NLW_quad_inst_M1_AXIS_TVALID_UNCONNECTED),
        .M2_AXIS_TDATA(NLW_quad_inst_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_quad_inst_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(1'b0),
        .M2_AXIS_TVALID(NLW_quad_inst_M2_AXIS_TVALID_UNCONNECTED),
        .MSTRXRESET({1'b0,1'b0,1'b0,1'b0}),
        .MSTRXRESETDONE(mstrxresetdone_int),
        .MSTTXRESET({1'b0,1'b0,1'b0,1'b0}),
        .MSTTXRESETDONE(msttxresetdone_int),
        .PCIELINKREACHTARGET(pcielinkreachtarget),
        .PCIELTSSM(pcieltssm),
        .PIPENORTHIN(pipenorthin),
        .PIPENORTHOUT(pipenorthout),
        .PIPESOUTHIN(pipesouthin),
        .PIPESOUTHOUT(pipesouthout),
        .RCALENB(rcalenb),
        .REFCLK0_CLKTESTSIG(refclk0_clktestsig),
        .REFCLK0_CLKTESTSIGINT(refclk0_clktestsigint),
        .REFCLK0_GTREFCLKPD(refclk0_gtrefclkpd),
        .REFCLK0_GTREFCLKPDINT(refclk0_gtrefclkpdint),
        .REFCLK1_CLKTESTSIG(refclk1_clktestsig),
        .REFCLK1_CLKTESTSIGINT(refclk1_clktestsigint),
        .REFCLK1_GTREFCLKPD(refclk1_gtrefclkpd),
        .REFCLK1_GTREFCLKPDINT(refclk1_gtrefclkpdint),
        .RESETDONE_NORTHIN(resetdone_northin),
        .RESETDONE_NORTHOUT(resetdone_northout),
        .RESETDONE_SOUTHIN(resetdone_southin),
        .RESETDONE_SOUTHOUT(resetdone_southout),
        .RXMARGINCLK(rxmarginclk),
        .RXMARGINREQACK(rxmarginreqack),
        .RXMARGINREQCMD(rxmarginreqcmd),
        .RXMARGINREQLANENUM(rxmarginreqlanenum),
        .RXMARGINREQPAYLD(rxmarginreqpayld),
        .RXMARGINREQREQ(rxmarginreqreq),
        .RXMARGINRESACK(rxmarginresack),
        .RXMARGINRESCMD(rxmarginrescmd),
        .RXMARGINRESLANENUM(rxmarginreslanenum),
        .RXMARGINRESPAYLD(rxmarginrespayld),
        .RXMARGINRESREQ(rxmarginresreq),
        .RXPINORTHIN(rxpinorthin),
        .RXPINORTHOUT(rxpinorthout),
        .RXPISOUTHIN(rxpisouthin),
        .RXPISOUTHOUT(rxpisouthout),
        .S0_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXIS_TLAST(1'b0),
        .S0_AXIS_TREADY(NLW_quad_inst_S0_AXIS_TREADY_UNCONNECTED),
        .S0_AXIS_TVALID(1'b0),
        .S1_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXIS_TLAST(1'b0),
        .S1_AXIS_TREADY(NLW_quad_inst_S1_AXIS_TREADY_UNCONNECTED),
        .S1_AXIS_TVALID(1'b0),
        .S2_AXIS_TDATA({1'b0,cmd_to_axi[30:28],1'b0,cmd_to_axi[26:24],1'b0,cmd_to_axi[22:20],1'b0,cmd_to_axi[18:0]}),
        .S2_AXIS_TLAST(tlast_r),
        .S2_AXIS_TREADY(s2_axis_tready),
        .S2_AXIS_TVALID(tvalid_r),
        .TRIGACKIN0(trigackin0),
        .TRIGACKOUT0(trigackout0),
        .TRIGIN0(trigin0),
        .TRIGOUT0(trigout0),
        .TXPINORTHIN(txpinorthin),
        .TXPINORTHOUT(txpinorthout),
        .TXPISOUTHIN(txpisouthin),
        .TXPISOUTHOUT(txpisouthout),
        .UBENABLE(ubenable),
        .UBINTERRUPT(ubinterrupt),
        .UBINTR(ubintr),
        .UBIOLMBRST(ubiolmbrst),
        .UBMBRST(ubmbrst),
        .UBRXUART(ubrxuart),
        .UBTXUART(ubtxuart),
        .UNCORRECTERR(uncorrecterr));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \state[0]_i_1 
       (.I0(s2_axis_tready),
        .I1(state[0]),
        .I2(state[1]),
        .O(\state[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \state[1]_i_1 
       (.I0(state[0]),
        .I1(state[1]),
        .O(\state[1]_i_1_n_0 ));
  FDRE \state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\state[0]_i_1_n_0 ),
        .Q(state[0]),
        .R(p_0_in));
  FDRE \state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\state[1]_i_1_n_0 ),
        .Q(state[1]),
        .R(p_0_in));
  LUT2 #(
    .INIT(4'h7)) 
    tlast_r_i_1
       (.I0(state[0]),
        .I1(state[1]),
        .O(tlast_r_i_1_n_0));
  FDRE tlast_r_reg
       (.C(apb3clk),
        .CE(tlast_r_i_1_n_0),
        .D(\state[0]_i_1_n_0 ),
        .Q(tlast_r),
        .R(p_0_in));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT2 #(
    .INIT(4'h1)) 
    tvalid_r_i_1
       (.I0(state[0]),
        .I1(state[1]),
        .O(tvalid_r_i_1_n_0));
  FDRE tvalid_r_reg
       (.C(apb3clk),
        .CE(tlast_r_i_1_n_0),
        .D(tvalid_r_i_1_n_0),
        .Q(tvalid_r),
        .R(p_0_in));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__25 u_ch0_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch0_pcsrsvdout(ch0_pcsrsvdout[10]),
        .src_in(ch0_pcsrsvdout_int[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__29 u_ch0_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch0_pcsrsvdout(ch0_pcsrsvdout[11]),
        .src_in(ch0_pcsrsvdout_int[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__21 u_ch0_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .src_in(mstrxresetdone_int[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__17 u_ch0_msttxresetdone
       (.apb3clk(apb3clk),
        .ch0_txmstresetdone(ch0_txmstresetdone),
        .src_in(msttxresetdone_int[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__5 u_ch0_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .src_in(ch0_rxpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__13 u_ch0_rxresetdone
       (.apb3clk(apb3clk),
        .ch0_rxresetdone(ch0_rxresetdone),
        .src_in(ch0_rxresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__1 u_ch0_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch0_txpmaresetdone(ch0_txpmaresetdone),
        .src_in(ch0_txpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__9 u_ch0_txresetdone
       (.apb3clk(apb3clk),
        .ch0_txresetdone(ch0_txresetdone),
        .src_in(ch0_txresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__26 u_ch1_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch1_pcsrsvdout(ch1_pcsrsvdout[10]),
        .src_in(ch1_pcsrsvdout_int[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__30 u_ch1_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch1_pcsrsvdout(ch1_pcsrsvdout[11]),
        .src_in(ch1_pcsrsvdout_int[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__22 u_ch1_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch1_rxmstresetdone(ch1_rxmstresetdone),
        .src_in(mstrxresetdone_int[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__18 u_ch1_msttxresetdone
       (.apb3clk(apb3clk),
        .ch1_txmstresetdone(ch1_txmstresetdone),
        .src_in(msttxresetdone_int[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__6 u_ch1_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch1_rxpmaresetdone(ch1_rxpmaresetdone),
        .src_in(ch1_rxpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__14 u_ch1_rxresetdone
       (.apb3clk(apb3clk),
        .ch1_rxresetdone(ch1_rxresetdone),
        .src_in(ch1_rxresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__2 u_ch1_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch1_txpmaresetdone(ch1_txpmaresetdone),
        .src_in(ch1_txpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__10 u_ch1_txresetdone
       (.apb3clk(apb3clk),
        .ch1_txresetdone(ch1_txresetdone),
        .src_in(ch1_txresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__27 u_ch2_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch2_pcsrsvdout(ch2_pcsrsvdout[10]),
        .src_in(ch2_pcsrsvdout_int[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__31 u_ch2_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch2_pcsrsvdout(ch2_pcsrsvdout[11]),
        .src_in(ch2_pcsrsvdout_int[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__23 u_ch2_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch2_rxmstresetdone(ch2_rxmstresetdone),
        .src_in(mstrxresetdone_int[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__19 u_ch2_msttxresetdone
       (.apb3clk(apb3clk),
        .ch2_txmstresetdone(ch2_txmstresetdone),
        .src_in(msttxresetdone_int[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__7 u_ch2_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch2_rxpmaresetdone(ch2_rxpmaresetdone),
        .src_in(ch2_rxpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__15 u_ch2_rxresetdone
       (.apb3clk(apb3clk),
        .ch2_rxresetdone(ch2_rxresetdone),
        .src_in(ch2_rxresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__3 u_ch2_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch2_txpmaresetdone(ch2_txpmaresetdone),
        .src_in(ch2_txpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__11 u_ch2_txresetdone
       (.apb3clk(apb3clk),
        .ch2_txresetdone(ch2_txresetdone),
        .src_in(ch2_txresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__28 u_ch3_10_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch3_pcsrsvdout(ch3_pcsrsvdout[10]),
        .src_in(ch3_pcsrsvdout_int[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone u_ch3_11_pcsrsvdout
       (.apb3clk(apb3clk),
        .ch3_pcsrsvdout(ch3_pcsrsvdout[11]),
        .src_in(ch3_pcsrsvdout_int[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__24 u_ch3_mstrxresetdone
       (.apb3clk(apb3clk),
        .ch3_rxmstresetdone(ch3_rxmstresetdone),
        .src_in(mstrxresetdone_int[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__20 u_ch3_msttxresetdone
       (.apb3clk(apb3clk),
        .ch3_txmstresetdone(ch3_txmstresetdone),
        .src_in(msttxresetdone_int[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__8 u_ch3_rxpmaresetdone
       (.apb3clk(apb3clk),
        .ch3_rxpmaresetdone(ch3_rxpmaresetdone),
        .src_in(ch3_rxpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__16 u_ch3_rxresetdone
       (.apb3clk(apb3clk),
        .ch3_rxresetdone(ch3_rxresetdone),
        .src_in(ch3_rxresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__4 u_ch3_txpmaresetdone
       (.apb3clk(apb3clk),
        .ch3_txpmaresetdone(ch3_txpmaresetdone),
        .src_in(ch3_txpmaresetdone_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_gtye5_rstdone__xdcDup__12 u_ch3_txresetdone
       (.apb3clk(apb3clk),
        .ch3_txresetdone(ch3_txresetdone),
        .src_in(ch3_txresetdone_int));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function
   (out,
    rrst,
    gpo,
    GPI,
    p_0_in,
    Q,
    ch3_rxrate,
    apb3clk,
    gpi,
    ch3_rxmstreset,
    ch3_rxmstdatapathreset,
    \rrst_r_reg[3]_0 ,
    gtpowergood_int,
    D);
  output [2:0]out;
  output rrst;
  output [0:0]gpo;
  output [0:0]GPI;
  output p_0_in;
  output [2:0]Q;
  input [7:0]ch3_rxrate;
  input apb3clk;
  input [0:0]gpi;
  input ch3_rxmstreset;
  input ch3_rxmstdatapathreset;
  input [0:0]\rrst_r_reg[3]_0 ;
  input gtpowergood_int;
  input [3:0]D;

  wire \Command[0]_i_1__6_n_0 ;
  wire \Command[1]_i_1__6_n_0 ;
  wire \Command[2]_i_1__6_n_0 ;
  wire \Command[2]_i_2__2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__6_n_0 ;
  wire \arb_state[1]_i_4__5_n_0 ;
  wire \arb_state[1]_i_5__5_n_0 ;
  wire \arb_state[1]_i_6__5_n_0 ;
  wire \arb_state[1]_i_7__5_n_0 ;
  wire \arb_state[3]_i_2__6_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch3_rxmstdatapathreset;
  wire ch3_rxmstreset;
  wire [7:0]ch3_rxrate;
  wire counter;
  wire \counter[0]_i_1__6_n_0 ;
  wire \counter[1]_i_1__6_n_0 ;
  wire \counter[2]_i_1__6_n_0 ;
  wire \counter[3]_i_1__6_n_0 ;
  wire \counter[4]_i_1__6_n_0 ;
  wire \counter[5]_i_1__6_n_0 ;
  wire \counter[6]_i_1__6_n_0 ;
  wire \counter[7]_i_2__6_n_0 ;
  wire \counter[7]_i_3__6_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__6_n_0 ;
  wire \en[1][0]_i_1__6_n_0 ;
  wire \en[1][1]_i_1__2_n_0 ;
  wire \en[1][1]_i_2__5_n_0 ;
  wire \en[2][0]_i_1__6_n_0 ;
  wire \en[2][1]_i_1__2_n_0 ;
  wire \en[2][1]_i_2__5_n_0 ;
  wire \en[3][0]_i_1__6_n_0 ;
  wire \en[3][1]_i_1__2_n_0 ;
  wire \en[3][1]_i_2__2_n_0 ;
  wire \en[4][0]_i_1__6_n_0 ;
  wire \en[4][1]_i_1__6_n_0 ;
  wire \en[4][1]_i_2__6_n_0 ;
  wire \en[5][0]_i_1__6_n_0 ;
  wire \en[5][1]_i_1__6_n_0 ;
  wire \en[5][1]_i_2__2_n_0 ;
  wire \en[6][0]_i_1__6_n_0 ;
  wire \en[6][1]_i_1__6_n_0 ;
  wire \en[6][1]_i_2__6_n_0 ;
  wire \en[7][0]_i_1__6_n_0 ;
  wire \en[7][1]_i_1__6_n_0 ;
  wire \en[7][1]_i_2__6_n_0 ;
  wire [1:0]en__2;
  wire [0:0]\en_reg[0]_0 ;
  wire [1:0]\en_reg[1]_4 ;
  wire [1:0]\en_reg[5]_3 ;
  wire [1:0]\en_reg[6]_2 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_6;
  wire gpi_i_1__6_n_0;
  wire gpi_i_2__6_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_5;
  wire gtpowergood_int;
  wire idx;
  wire \idx[0]_i_1__2_n_0 ;
  wire \idx[1]_i_1__6_n_0 ;
  wire \idx[2]_i_2__2_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__6_n_0;
  wire needService_i_2__6_n_0;
  wire needService_i_3__2_n_0;
  wire p_0_in;
  wire p_0_in_1;
  wire [3:0]p_0_in__0;
  wire [4:1]p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire [2:0]rrst_r;
  wire [0:0]\rrst_r_reg[3]_0 ;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1__2_n_0 ;
  wire \rxrate_counter[1]_i_1__2_n_0 ;
  wire \rxrate_counter[2]_i_1__2_n_0 ;
  wire \rxrate_counter[3]_i_2__2_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1__2_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2__2_n_0 ;
  wire \rxrate_state[1]_i_3__2_n_0 ;
  wire \rxrate_state[1]_i_4__2_n_0 ;
  wire \rxrate_state[2]_i_1__2_n_0 ;
  wire \rxrate_state[3]_i_2__2_n_0 ;
  wire \rxrate_state[3]_i_3__2_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__6 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2__2 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2__2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__6_n_0 ),
        .D(\Command[0]_i_1__6_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__6_n_0 ),
        .D(\Command[1]_i_1__6_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__6_n_0 ),
        .D(\Command[2]_i_2__2_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__198 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(ch3_rxmstreset));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(ch3_rxmstdatapathreset));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__6 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__5 
       (.I0(\arb_state[1]_i_4__5_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__5_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__5 
       (.I0(\arb_state[1]_i_6__5_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_7__5_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__5 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg[6]_2 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_3 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\arb_state[1]_i_4__5_n_0 ));
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \arb_state[1]_i_5__5 
       (.I0(\en_reg_n_0_[3][1] ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_4 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_5__5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_6__5 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_2 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_3 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_6__5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_7__5 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_4 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_0 ),
        .O(\arb_state[1]_i_7__5_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__6 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__6 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__6_n_0 ),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__6 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__6 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__6_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__6 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__6_n_0 ),
        .O(\counter[5]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__6 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__6_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__6 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__6 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__6_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__6 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__6_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__6_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__6_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__6 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2__2 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][1]_i_1__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_4 [0]),
        .I5(\en_reg[1]_4 [1]),
        .O(\en[1][1]_i_2__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][1]_i_1__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][1]_i_1__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][1]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][1]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_3 [0]),
        .I5(\en_reg[5]_3 [1]),
        .O(\en[5][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][1]_i_1__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__6 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_2 [0]),
        .I5(\en_reg[6]_2 [1]),
        .O(\en[6][1]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_1__6 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][1]_i_1__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in_1),
        .O(\en[7][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__6 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][1]_i_3__2 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__6_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_0 ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1__2_n_0 ),
        .D(\en[1][0]_i_1__6_n_0 ),
        .Q(\en_reg[1]_4 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1__2_n_0 ),
        .D(\en[1][1]_i_2__5_n_0 ),
        .Q(\en_reg[1]_4 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1__2_n_0 ),
        .D(\en[2][0]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1__2_n_0 ),
        .D(\en[2][1]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1__2_n_0 ),
        .D(\en[3][0]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1__2_n_0 ),
        .D(\en[3][1]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__6_n_0 ),
        .D(\en[4][0]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__6_n_0 ),
        .D(\en[4][1]_i_2__6_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__6_n_0 ),
        .D(\en[5][0]_i_1__6_n_0 ),
        .Q(\en_reg[5]_3 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__6_n_0 ),
        .D(\en[5][1]_i_2__2_n_0 ),
        .Q(\en_reg[5]_3 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__6_n_0 ),
        .D(\en[6][0]_i_1__6_n_0 ),
        .Q(\en_reg[6]_2 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__6_n_0 ),
        .D(\en[6][1]_i_2__6_n_0 ),
        .Q(\en_reg[6]_2 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__6_n_0 ),
        .D(\en[7][0]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__6_n_0 ),
        .D(\en[7][1]_i_2__6_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__6
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__6_n_0),
        .I4(gpi_6),
        .I5(GPI),
        .O(gpi_i_1__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__6
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3__2
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_6));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__6_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__6
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_5));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_5),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \idx[0]_i_1__2 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .O(\idx[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT5 #(
    .INIT(32'hEFFEEEEE)) 
    \idx[1]_i_1__6 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .O(\idx[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__6 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2__2 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[0]_i_1__2_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[1]_i_1__6_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2__2_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_1__6
       (.I0(needService_i_2__6_n_0),
        .I1(\en_reg[0]_0 ),
        .I2(\en_reg_n_0_[7][0] ),
        .I3(needService_i_3__2_n_0),
        .O(needService_i_1__6_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__6
       (.I0(\en_reg[6]_2 [1]),
        .I1(\en_reg[6]_2 [0]),
        .I2(\en_reg[5]_3 [1]),
        .I3(\en_reg[5]_3 [0]),
        .O(needService_i_2__6_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3__2
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_4 [0]),
        .I3(\en_reg[1]_4 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3__2_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__6_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in_1),
        .R(rrst));
  LUT2 #(
    .INIT(4'h7)) 
    reset_xpm_internal_sync_i_1
       (.I0(\rrst_r_reg[3]_0 ),
        .I1(gtpowergood_int),
        .O(p_0_in));
  FDPE \rrst_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_0_in),
        .Q(rrst_r[0]));
  FDPE \rrst_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(rrst_r[0]),
        .PRE(p_0_in),
        .Q(rrst_r[1]));
  FDPE \rrst_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(rrst_r[1]),
        .PRE(p_0_in),
        .Q(rrst_r[2]));
  FDPE \rrst_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(rrst_r[2]),
        .PRE(p_0_in),
        .Q(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1__2 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2__2_n_0 ),
        .O(\rxrate_counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1__2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1__2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1__2 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2__2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2__2_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1__2_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1__2_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1__2_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2__2_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1__2
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1__2_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1__2_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1__2 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2__2_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1__2 
       (.I0(\rxrate_state[1]_i_2__2_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2__2_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2__2 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3__2_n_0 ),
        .I5(\rxrate_state[1]_i_4__2_n_0 ),
        .O(\rxrate_state[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3__2 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4__2 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1__2 
       (.I0(\rxrate_state[3]_i_2__2_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1__2 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2__2_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2__2 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3__2_n_0 ),
        .O(\rxrate_state[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3__2 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3__2_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1__2_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__190 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(ch3_rxrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__191 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(ch3_rxrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__192 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(ch3_rxrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__193 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(ch3_rxrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__194 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(ch3_rxrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__195 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(ch3_rxrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__196 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(ch3_rxrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__197 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(ch3_rxrate[7]));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_rx_function" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function__xdcDup__1
   (out,
    gpo,
    GPI,
    Q,
    ch0_rxrate,
    apb3clk,
    gpi,
    ch0_rxmstreset,
    ch0_rxmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [2:0]Q;
  input [7:0]ch0_rxrate;
  input apb3clk;
  input [0:0]gpi;
  input ch0_rxmstreset;
  input ch0_rxmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__3_n_0 ;
  wire \Command[1]_i_1__3_n_0 ;
  wire \Command[2]_i_1__3_n_0 ;
  wire \Command[2]_i_2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__3_n_0 ;
  wire \arb_state[1]_i_4__2_n_0 ;
  wire \arb_state[1]_i_5__2_n_0 ;
  wire \arb_state[1]_i_6__2_n_0 ;
  wire \arb_state[1]_i_7__2_n_0 ;
  wire \arb_state[3]_i_2__3_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire [7:0]ch0_rxrate;
  wire counter;
  wire \counter[0]_i_1__3_n_0 ;
  wire \counter[1]_i_1__3_n_0 ;
  wire \counter[2]_i_1__3_n_0 ;
  wire \counter[3]_i_1__3_n_0 ;
  wire \counter[4]_i_1__3_n_0 ;
  wire \counter[5]_i_1__3_n_0 ;
  wire \counter[6]_i_1__3_n_0 ;
  wire \counter[7]_i_2__3_n_0 ;
  wire \counter[7]_i_3__3_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__3_n_0 ;
  wire \en[1][0]_i_1__3_n_0 ;
  wire \en[1][1]_i_1_n_0 ;
  wire \en[1][1]_i_2__2_n_0 ;
  wire \en[2][0]_i_1__3_n_0 ;
  wire \en[2][1]_i_1_n_0 ;
  wire \en[2][1]_i_2__2_n_0 ;
  wire \en[3][0]_i_1__3_n_0 ;
  wire \en[3][1]_i_1_n_0 ;
  wire \en[3][1]_i_2_n_0 ;
  wire \en[4][0]_i_1__3_n_0 ;
  wire \en[4][1]_i_1__3_n_0 ;
  wire \en[4][1]_i_2__3_n_0 ;
  wire \en[5][0]_i_1__3_n_0 ;
  wire \en[5][1]_i_1__3_n_0 ;
  wire \en[5][1]_i_2_n_0 ;
  wire \en[6][0]_i_1__3_n_0 ;
  wire \en[6][1]_i_1__3_n_0 ;
  wire \en[6][1]_i_2__3_n_0 ;
  wire \en[7][0]_i_1__3_n_0 ;
  wire \en[7][1]_i_1__3_n_0 ;
  wire \en[7][1]_i_2__3_n_0 ;
  wire [1:0]en__2;
  wire [0:0]\en_reg[0]_0 ;
  wire [1:0]\en_reg[1]_3 ;
  wire [1:0]\en_reg[5]_2 ;
  wire [1:0]\en_reg[6]_1 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__3_n_0;
  wire gpi_i_2__3_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire \idx[0]_i_1_n_0 ;
  wire \idx[1]_i_1__3_n_0 ;
  wire \idx[2]_i_2_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__3_n_0;
  wire needService_i_2__3_n_0;
  wire needService_i_3_n_0;
  wire p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:1]p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1_n_0 ;
  wire \rxrate_counter[1]_i_1_n_0 ;
  wire \rxrate_counter[2]_i_1_n_0 ;
  wire \rxrate_counter[3]_i_2_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2_n_0 ;
  wire \rxrate_state[1]_i_3_n_0 ;
  wire \rxrate_state[1]_i_4_n_0 ;
  wire \rxrate_state[2]_i_1_n_0 ;
  wire \rxrate_state[3]_i_2_n_0 ;
  wire \rxrate_state[3]_i_3_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__3 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__3_n_0 ),
        .D(\Command[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__3_n_0 ),
        .D(\Command[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__3_n_0 ),
        .D(\Command[2]_i_2_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__168 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(ch0_rxmstreset));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__169 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(ch0_rxmstdatapathreset));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__12 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__3 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__2 
       (.I0(\arb_state[1]_i_4__2_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__2_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__2 
       (.I0(\arb_state[1]_i_6__2_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_7__2_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__2 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg[6]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_2 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\arb_state[1]_i_4__2_n_0 ));
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \arb_state[1]_i_5__2 
       (.I0(\en_reg_n_0_[3][1] ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_3 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_6__2 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_1 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_7__2 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_3 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_0 ),
        .O(\arb_state[1]_i_7__2_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__3 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__3 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__3_n_0 ),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__3 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__3 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__3_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__3 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__3_n_0 ),
        .O(\counter[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__3 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__3_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__3 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__3 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__3_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__3 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__3_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__3_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__3_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__3 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][1]_i_1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_3 [0]),
        .I5(\en_reg[1]_3 [1]),
        .O(\en[1][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][1]_i_1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][1]_i_1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][1]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][1]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_2 [0]),
        .I5(\en_reg[5]_2 [1]),
        .O(\en[5][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][1]_i_1__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_1 [0]),
        .I5(\en_reg[6]_1 [1]),
        .O(\en[6][1]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_1__3 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][1]_i_1__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in),
        .O(\en[7][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][1]_i_3 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__3_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_0 ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1_n_0 ),
        .D(\en[1][0]_i_1__3_n_0 ),
        .Q(\en_reg[1]_3 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1_n_0 ),
        .D(\en[1][1]_i_2__2_n_0 ),
        .Q(\en_reg[1]_3 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1_n_0 ),
        .D(\en[2][0]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1_n_0 ),
        .D(\en[2][1]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1_n_0 ),
        .D(\en[3][0]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1_n_0 ),
        .D(\en[3][1]_i_2_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__3_n_0 ),
        .D(\en[4][0]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__3_n_0 ),
        .D(\en[4][1]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__3_n_0 ),
        .D(\en[5][0]_i_1__3_n_0 ),
        .Q(\en_reg[5]_2 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__3_n_0 ),
        .D(\en[5][1]_i_2_n_0 ),
        .Q(\en_reg[5]_2 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__3_n_0 ),
        .D(\en[6][0]_i_1__3_n_0 ),
        .Q(\en_reg[6]_1 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__3_n_0 ),
        .D(\en[6][1]_i_2__3_n_0 ),
        .Q(\en_reg[6]_1 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__3_n_0 ),
        .D(\en[7][0]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__3_n_0 ),
        .D(\en[7][1]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__3
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__3_n_0),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__3
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__3_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__3
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \idx[0]_i_1 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .O(\idx[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'hEFFEEEEE)) 
    \idx[1]_i_1__3 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .O(\idx[1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__3 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[0]_i_1_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[1]_i_1__3_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_1__3
       (.I0(needService_i_2__3_n_0),
        .I1(\en_reg[0]_0 ),
        .I2(\en_reg_n_0_[7][0] ),
        .I3(needService_i_3_n_0),
        .O(needService_i_1__3_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__3
       (.I0(\en_reg[6]_1 [1]),
        .I1(\en_reg[6]_1 [0]),
        .I2(\en_reg[5]_2 [1]),
        .I3(\en_reg[5]_2 [0]),
        .O(needService_i_2__3_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_3 [0]),
        .I3(\en_reg[1]_3 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__3_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2_n_0 ),
        .O(\rxrate_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1 
       (.I0(\rxrate_state[1]_i_2_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3_n_0 ),
        .I5(\rxrate_state[1]_i_4_n_0 ),
        .O(\rxrate_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1 
       (.I0(\rxrate_state[3]_i_2_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3_n_0 ),
        .O(\rxrate_state[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__160 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(ch0_rxrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__161 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(ch0_rxrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__162 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(ch0_rxrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__163 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(ch0_rxrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__164 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(ch0_rxrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__165 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(ch0_rxrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__166 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(ch0_rxrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__167 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(ch0_rxrate[7]));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_rx_function" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function__xdcDup__2
   (out,
    gpo,
    GPI,
    Q,
    ch1_rxrate,
    apb3clk,
    gpi,
    ch1_rxmstreset,
    ch1_rxmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [2:0]Q;
  input [7:0]ch1_rxrate;
  input apb3clk;
  input [0:0]gpi;
  input ch1_rxmstreset;
  input ch1_rxmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__4_n_0 ;
  wire \Command[1]_i_1__4_n_0 ;
  wire \Command[2]_i_1__4_n_0 ;
  wire \Command[2]_i_2__0_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__4_n_0 ;
  wire \arb_state[1]_i_4__3_n_0 ;
  wire \arb_state[1]_i_5__3_n_0 ;
  wire \arb_state[1]_i_6__3_n_0 ;
  wire \arb_state[1]_i_7__3_n_0 ;
  wire \arb_state[3]_i_2__4_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch1_rxmstdatapathreset;
  wire ch1_rxmstreset;
  wire [7:0]ch1_rxrate;
  wire counter;
  wire \counter[0]_i_1__4_n_0 ;
  wire \counter[1]_i_1__4_n_0 ;
  wire \counter[2]_i_1__4_n_0 ;
  wire \counter[3]_i_1__4_n_0 ;
  wire \counter[4]_i_1__4_n_0 ;
  wire \counter[5]_i_1__4_n_0 ;
  wire \counter[6]_i_1__4_n_0 ;
  wire \counter[7]_i_2__4_n_0 ;
  wire \counter[7]_i_3__4_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__4_n_0 ;
  wire \en[1][0]_i_1__4_n_0 ;
  wire \en[1][1]_i_1__0_n_0 ;
  wire \en[1][1]_i_2__3_n_0 ;
  wire \en[2][0]_i_1__4_n_0 ;
  wire \en[2][1]_i_1__0_n_0 ;
  wire \en[2][1]_i_2__3_n_0 ;
  wire \en[3][0]_i_1__4_n_0 ;
  wire \en[3][1]_i_1__0_n_0 ;
  wire \en[3][1]_i_2__0_n_0 ;
  wire \en[4][0]_i_1__4_n_0 ;
  wire \en[4][1]_i_1__4_n_0 ;
  wire \en[4][1]_i_2__4_n_0 ;
  wire \en[5][0]_i_1__4_n_0 ;
  wire \en[5][1]_i_1__4_n_0 ;
  wire \en[5][1]_i_2__0_n_0 ;
  wire \en[6][0]_i_1__4_n_0 ;
  wire \en[6][1]_i_1__4_n_0 ;
  wire \en[6][1]_i_2__4_n_0 ;
  wire \en[7][0]_i_1__4_n_0 ;
  wire \en[7][1]_i_1__4_n_0 ;
  wire \en[7][1]_i_2__4_n_0 ;
  wire [1:0]en__2;
  wire [0:0]\en_reg[0]_0 ;
  wire [1:0]\en_reg[1]_3 ;
  wire [1:0]\en_reg[5]_2 ;
  wire [1:0]\en_reg[6]_1 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__4_n_0;
  wire gpi_i_2__4_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire \idx[0]_i_1__0_n_0 ;
  wire \idx[1]_i_1__4_n_0 ;
  wire \idx[2]_i_2__0_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__4_n_0;
  wire needService_i_2__4_n_0;
  wire needService_i_3__0_n_0;
  wire p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:1]p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1__0_n_0 ;
  wire \rxrate_counter[1]_i_1__0_n_0 ;
  wire \rxrate_counter[2]_i_1__0_n_0 ;
  wire \rxrate_counter[3]_i_2__0_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1__0_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2__0_n_0 ;
  wire \rxrate_state[1]_i_3__0_n_0 ;
  wire \rxrate_state[1]_i_4__0_n_0 ;
  wire \rxrate_state[2]_i_1__0_n_0 ;
  wire \rxrate_state[3]_i_2__0_n_0 ;
  wire \rxrate_state[3]_i_3__0_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__4 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2__0 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2__0_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__4_n_0 ),
        .D(\Command[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__4_n_0 ),
        .D(\Command[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__4_n_0 ),
        .D(\Command[2]_i_2__0_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__178 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(ch1_rxmstreset));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__179 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(ch1_rxmstdatapathreset));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__13 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__4 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__3 
       (.I0(\arb_state[1]_i_4__3_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__3_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__3 
       (.I0(\arb_state[1]_i_6__3_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_7__3_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__3 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg[6]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_2 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\arb_state[1]_i_4__3_n_0 ));
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \arb_state[1]_i_5__3 
       (.I0(\en_reg_n_0_[3][1] ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_3 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_5__3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_6__3 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_1 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_6__3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_7__3 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_3 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_0 ),
        .O(\arb_state[1]_i_7__3_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__4 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__4 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__4_n_0 ),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__4 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__4 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__4_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__4 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__4_n_0 ),
        .O(\counter[5]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__4 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__4_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__4 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__4 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__4_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__4 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__4_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__4_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__4_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__4 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2__0 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][1]_i_1__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_3 [0]),
        .I5(\en_reg[1]_3 [1]),
        .O(\en[1][1]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][1]_i_1__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][1]_i_1__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][1]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][1]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_2 [0]),
        .I5(\en_reg[5]_2 [1]),
        .O(\en[5][1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][1]_i_1__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_1 [0]),
        .I5(\en_reg[6]_1 [1]),
        .O(\en[6][1]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_1__4 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][1]_i_1__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in),
        .O(\en[7][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][1]_i_3__0 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__4_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_0 ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1__0_n_0 ),
        .D(\en[1][0]_i_1__4_n_0 ),
        .Q(\en_reg[1]_3 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1__0_n_0 ),
        .D(\en[1][1]_i_2__3_n_0 ),
        .Q(\en_reg[1]_3 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1__0_n_0 ),
        .D(\en[2][0]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1__0_n_0 ),
        .D(\en[2][1]_i_2__3_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1__0_n_0 ),
        .D(\en[3][0]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1__0_n_0 ),
        .D(\en[3][1]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__4_n_0 ),
        .D(\en[4][0]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__4_n_0 ),
        .D(\en[4][1]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__4_n_0 ),
        .D(\en[5][0]_i_1__4_n_0 ),
        .Q(\en_reg[5]_2 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__4_n_0 ),
        .D(\en[5][1]_i_2__0_n_0 ),
        .Q(\en_reg[5]_2 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__4_n_0 ),
        .D(\en[6][0]_i_1__4_n_0 ),
        .Q(\en_reg[6]_1 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__4_n_0 ),
        .D(\en[6][1]_i_2__4_n_0 ),
        .Q(\en_reg[6]_1 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__4_n_0 ),
        .D(\en[7][0]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__4_n_0 ),
        .D(\en[7][1]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__4
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__4_n_0),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__4
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3__0
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__4_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__4
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \idx[0]_i_1__0 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .O(\idx[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT5 #(
    .INIT(32'hEFFEEEEE)) 
    \idx[1]_i_1__4 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .O(\idx[1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__4 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2__0 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[0]_i_1__0_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[1]_i_1__4_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2__0_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_1__4
       (.I0(needService_i_2__4_n_0),
        .I1(\en_reg[0]_0 ),
        .I2(\en_reg_n_0_[7][0] ),
        .I3(needService_i_3__0_n_0),
        .O(needService_i_1__4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__4
       (.I0(\en_reg[6]_1 [1]),
        .I1(\en_reg[6]_1 [0]),
        .I2(\en_reg[5]_2 [1]),
        .I3(\en_reg[5]_2 [0]),
        .O(needService_i_2__4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3__0
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_3 [0]),
        .I3(\en_reg[1]_3 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3__0_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__4_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1__0 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2__0_n_0 ),
        .O(\rxrate_counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1__0 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1__0 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1__0 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2__0 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2__0_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1__0_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1__0_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1__0_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2__0_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1__0
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1__0_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1__0_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1__0 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2__0_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1__0 
       (.I0(\rxrate_state[1]_i_2__0_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2__0_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2__0 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3__0_n_0 ),
        .I5(\rxrate_state[1]_i_4__0_n_0 ),
        .O(\rxrate_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3__0 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4__0 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1__0 
       (.I0(\rxrate_state[3]_i_2__0_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1__0 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2__0_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2__0 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3__0_n_0 ),
        .O(\rxrate_state[3]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3__0 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3__0_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1__0_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__170 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(ch1_rxrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__171 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(ch1_rxrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__172 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(ch1_rxrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__173 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(ch1_rxrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__174 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(ch1_rxrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__175 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(ch1_rxrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__176 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(ch1_rxrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__177 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(ch1_rxrate[7]));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_rx_function" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_rx_function__xdcDup__3
   (out,
    gpo,
    GPI,
    Q,
    ch2_rxrate,
    apb3clk,
    gpi,
    ch2_rxmstreset,
    ch2_rxmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [2:0]Q;
  input [7:0]ch2_rxrate;
  input apb3clk;
  input [0:0]gpi;
  input ch2_rxmstreset;
  input ch2_rxmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__5_n_0 ;
  wire \Command[1]_i_1__5_n_0 ;
  wire \Command[2]_i_1__5_n_0 ;
  wire \Command[2]_i_2__1_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTRXRESET_r1;
  wire MSTRXRESET_r2;
  wire MSTRXRESET_sync;
  wire [2:0]Q;
  wire RXDATAPATHRESET_r1;
  wire RXDATAPATHRESET_r2;
  wire RXDATAPATHRESET_sync;
  wire RXPRERATECHANGE_r1;
  wire RXPRERATECHANGE_r2;
  wire RXPRERATECHANGE_sync;
  wire [7:0]RXRATE_r1;
  wire [7:0]RXRATE_r2;
  wire [7:0]RXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[0]_i_1__5_n_0 ;
  wire \arb_state[1]_i_4__4_n_0 ;
  wire \arb_state[1]_i_5__4_n_0 ;
  wire \arb_state[1]_i_6__4_n_0 ;
  wire \arb_state[1]_i_7__4_n_0 ;
  wire \arb_state[3]_i_2__5_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch2_rxmstdatapathreset;
  wire ch2_rxmstreset;
  wire [7:0]ch2_rxrate;
  wire counter;
  wire \counter[0]_i_1__5_n_0 ;
  wire \counter[1]_i_1__5_n_0 ;
  wire \counter[2]_i_1__5_n_0 ;
  wire \counter[3]_i_1__5_n_0 ;
  wire \counter[4]_i_1__5_n_0 ;
  wire \counter[5]_i_1__5_n_0 ;
  wire \counter[6]_i_1__5_n_0 ;
  wire \counter[7]_i_2__5_n_0 ;
  wire \counter[7]_i_3__5_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__5_n_0 ;
  wire \en[1][0]_i_1__5_n_0 ;
  wire \en[1][1]_i_1__1_n_0 ;
  wire \en[1][1]_i_2__4_n_0 ;
  wire \en[2][0]_i_1__5_n_0 ;
  wire \en[2][1]_i_1__1_n_0 ;
  wire \en[2][1]_i_2__4_n_0 ;
  wire \en[3][0]_i_1__5_n_0 ;
  wire \en[3][1]_i_1__1_n_0 ;
  wire \en[3][1]_i_2__1_n_0 ;
  wire \en[4][0]_i_1__5_n_0 ;
  wire \en[4][1]_i_1__5_n_0 ;
  wire \en[4][1]_i_2__5_n_0 ;
  wire \en[5][0]_i_1__5_n_0 ;
  wire \en[5][1]_i_1__5_n_0 ;
  wire \en[5][1]_i_2__1_n_0 ;
  wire \en[6][0]_i_1__5_n_0 ;
  wire \en[6][1]_i_1__5_n_0 ;
  wire \en[6][1]_i_2__5_n_0 ;
  wire \en[7][0]_i_1__5_n_0 ;
  wire \en[7][1]_i_1__5_n_0 ;
  wire \en[7][1]_i_2__5_n_0 ;
  wire [1:0]en__2;
  wire [0:0]\en_reg[0]_0 ;
  wire [1:0]\en_reg[1]_3 ;
  wire [1:0]\en_reg[5]_2 ;
  wire [1:0]\en_reg[6]_1 ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__5_n_0;
  wire gpi_i_2__5_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire \idx[0]_i_1__1_n_0 ;
  wire \idx[1]_i_1__5_n_0 ;
  wire \idx[2]_i_2__1_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire needService;
  wire needService_i_1__5_n_0;
  wire needService_i_2__5_n_0;
  wire needService_i_3__1_n_0;
  wire p_0_in;
  wire [3:0]p_0_in__0;
  wire [4:1]p_0_in__1;
  wire [6:0]p_0_out;
  wire p_14_out__0;
  wire p_1_in__0;
  wire [6:1]request;
  wire rrst;
  wire rxrate_counter;
  wire \rxrate_counter[0]_i_1__1_n_0 ;
  wire \rxrate_counter[1]_i_1__1_n_0 ;
  wire \rxrate_counter[2]_i_1__1_n_0 ;
  wire \rxrate_counter[3]_i_2__1_n_0 ;
  wire [2:0]rxrate_counter__0;
  wire \rxrate_counter_reg_n_0_[3] ;
  wire rxrate_is_zero__0;
  wire rxrate_is_zero_i_1__1_n_0;
  wire rxrate_is_zero_r1;
  wire rxrate_is_zero_r2;
  wire [2:0]rxrate_state;
  wire \rxrate_state[1]_i_2__1_n_0 ;
  wire \rxrate_state[1]_i_3__1_n_0 ;
  wire \rxrate_state[1]_i_4__1_n_0 ;
  wire \rxrate_state[2]_i_1__1_n_0 ;
  wire \rxrate_state[3]_i_2__1_n_0 ;
  wire \rxrate_state[3]_i_3__1_n_0 ;
  wire \rxrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[0]_i_1__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[1]_i_1__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Command[2]_i_1__5 
       (.I0(arb_state[0]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\Command[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Command[2]_i_2__1 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_2__1_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__5_n_0 ),
        .D(\Command[0]_i_1__5_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__5_n_0 ),
        .D(\Command[1]_i_1__5_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[2]_i_1__5_n_0 ),
        .D(\Command[2]_i_2__1_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE MSTRXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_sync),
        .Q(MSTRXRESET_r1),
        .R(rrst));
  FDRE MSTRXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTRXRESET_r1),
        .Q(MSTRXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__188 MSTRXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTRXRESET_sync),
        .src_rst(ch2_rxmstreset));
  FDRE RXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_sync),
        .Q(RXDATAPATHRESET_r1),
        .R(rrst));
  FDRE RXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXDATAPATHRESET_r1),
        .Q(RXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__189 RXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXDATAPATHRESET_sync),
        .src_rst(ch2_rxmstdatapathreset));
  FDRE RXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_sync),
        .Q(RXPRERATECHANGE_r1),
        .R(rrst));
  FDRE RXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXPRERATECHANGE_r1),
        .Q(RXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__14 RXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(RXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \RXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[0]),
        .Q(RXRATE_r1[0]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[1]),
        .Q(RXRATE_r1[1]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[2]),
        .Q(RXRATE_r1[2]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[3]),
        .Q(RXRATE_r1[3]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[4]),
        .Q(RXRATE_r1[4]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[5]),
        .Q(RXRATE_r1[5]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[6]),
        .Q(RXRATE_r1[6]),
        .R(rrst));
  FDRE \RXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_sync[7]),
        .Q(RXRATE_r1[7]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[0]),
        .Q(RXRATE_r2[0]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[1]),
        .Q(RXRATE_r2[1]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[2]),
        .Q(RXRATE_r2[2]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[3]),
        .Q(RXRATE_r2[3]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[4]),
        .Q(RXRATE_r2[4]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[5]),
        .Q(RXRATE_r2[5]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[6]),
        .Q(RXRATE_r2[6]),
        .R(rrst));
  FDRE \RXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(RXRATE_r1[7]),
        .Q(RXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__5 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(\arb_state[0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0F0E00000F000)) 
    \arb_state[1]_i_1__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .I5(arb_state[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_2__4 
       (.I0(\arb_state[1]_i_4__4_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_5__4_n_0 ),
        .O(en__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_state[1]_i_3__4 
       (.I0(\arb_state[1]_i_6__4_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\arb_state[1]_i_7__4_n_0 ),
        .O(en__2[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_4__4 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg[6]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_2 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\arb_state[1]_i_4__4_n_0 ));
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \arb_state[1]_i_5__4 
       (.I0(\en_reg_n_0_[3][1] ),
        .I1(\en_reg_n_0_[2][1] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_3 [1]),
        .I4(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_5__4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_6__4 
       (.I0(\en_reg_n_0_[7][0] ),
        .I1(\en_reg[6]_1 [0]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[5]_2 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[4][0] ),
        .O(\arb_state[1]_i_6__4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \arb_state[1]_i_7__4 
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[2][0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en_reg[1]_3 [0]),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[0]_0 ),
        .O(\arb_state[1]_i_7__4_n_0 ));
  LUT4 #(
    .INIT(16'hA080)) 
    \arb_state[2]_i_1__5 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[2]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__5 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__5_n_0 ),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \arb_state[3]_i_2__5 
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpoFromGTsync_r[3]),
        .I4(arb_state[2]),
        .O(\arb_state[3]_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__5 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(\counter_reg_n_0_[7] ),
        .I2(arb_state[3]),
        .O(p_0_in__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\arb_state[0]_i_1__5_n_0 ),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(\counter[1]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \counter[2]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(\counter_reg_n_0_[0] ),
        .O(\counter[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[0] ),
        .I4(\counter_reg_n_0_[1] ),
        .O(\counter[3]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \counter[4]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter_reg_n_0_[2] ),
        .O(\counter[4]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[5]_i_1__5 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[5] ),
        .I2(\counter[7]_i_3__5_n_0 ),
        .O(\counter[5]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__5 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__5_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000016)) 
    \counter[7]_i_1__5 
       (.I0(arb_state[0]),
        .I1(arb_state[3]),
        .I2(arb_state[2]),
        .I3(arb_state[4]),
        .I4(arb_state[1]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h7080F000)) 
    \counter[7]_i_2__5 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__5_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[7] ),
        .I4(\counter_reg_n_0_[6] ),
        .O(\counter[7]_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__5 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__5_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__5_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__5_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'h0002)) 
    \en[0][0]_i_1__5 
       (.I0(p_14_out__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .O(\en[0][0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[0][0]_i_2__1 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .O(p_1_in__0));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[1][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_14_out__0),
        .O(\en[1][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[1][1]_i_1__1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[1]),
        .O(\en[1][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[1][1]_i_2__4 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[1]_3 [0]),
        .I5(\en_reg[1]_3 [1]),
        .O(\en[1][1]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[2][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[2][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[2][1]_i_1__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(request[2]),
        .O(\en[2][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[2][1]_i_2__4 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[3][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[3][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[3][1]_i_1__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[3]),
        .O(\en[3][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[3][1]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF8FFFFFFFFFFFF)) 
    \en[4][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[4][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \en[4][1]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(request[4]),
        .O(\en[4][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFEFFFEFFF0000)) 
    \en[4][1]_i_2__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8FFFFFFFFFFF)) 
    \en[5][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[5][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \en[5][1]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[5]),
        .O(\en[5][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFFF0000)) 
    \en[5][1]_i_2__1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[5]_2 [0]),
        .I5(\en_reg[5]_2 [1]),
        .O(\en[5][1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hF8FFFFFFFFFFFFFF)) 
    \en[6][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(p_14_out__0),
        .O(\en[6][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0800)) 
    \en[6][1]_i_1__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(request[6]),
        .O(\en[6][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFF7FFF7FF0000)) 
    \en[6][1]_i_2__5 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(p_14_out__0),
        .I4(\en_reg[6]_1 [0]),
        .I5(\en_reg[6]_1 [1]),
        .O(\en[6][1]_i_2__5_n_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFFFFFFFFFF)) 
    \en[7][0]_i_1__5 
       (.I0(en__2[0]),
        .I1(en__2[1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_14_out__0),
        .O(\en[7][0]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \en[7][1]_i_1__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(p_0_in),
        .O(\en[7][1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF0000)) 
    \en[7][1]_i_2__5 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(p_14_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[7][1]_i_3__1 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_14_out__0));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__5_n_0 ),
        .D(p_1_in__0),
        .Q(\en_reg[0]_0 ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1__1_n_0 ),
        .D(\en[1][0]_i_1__5_n_0 ),
        .Q(\en_reg[1]_3 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(\en[1][1]_i_1__1_n_0 ),
        .D(\en[1][1]_i_2__4_n_0 ),
        .Q(\en_reg[1]_3 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1__1_n_0 ),
        .D(\en[2][0]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(\en[2][1]_i_1__1_n_0 ),
        .D(\en[2][1]_i_2__4_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1__1_n_0 ),
        .D(\en[3][0]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(\en[3][1]_i_1__1_n_0 ),
        .D(\en[3][1]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__5_n_0 ),
        .D(\en[4][0]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(\en[4][1]_i_1__5_n_0 ),
        .D(\en[4][1]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__5_n_0 ),
        .D(\en[5][0]_i_1__5_n_0 ),
        .Q(\en_reg[5]_2 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(\en[5][1]_i_1__5_n_0 ),
        .D(\en[5][1]_i_2__1_n_0 ),
        .Q(\en_reg[5]_2 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__5_n_0 ),
        .D(\en[6][0]_i_1__5_n_0 ),
        .Q(\en_reg[6]_1 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(\en[6][1]_i_1__5_n_0 ),
        .D(\en[6][1]_i_2__5_n_0 ),
        .Q(\en_reg[6]_1 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__5_n_0 ),
        .D(\en[7][0]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(\en[7][1]_i_1__5_n_0 ),
        .D(\en[7][1]_i_2__5_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    gpi_i_1__5
       (.I0(en__2[1]),
        .I1(en__2[0]),
        .I2(arb_state[0]),
        .I3(gpi_i_2__5_n_0),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h01)) 
    gpi_i_2__5
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .O(gpi_i_2__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_3__1
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__5_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8EAAAAA)) 
    gpo_i_1__5
       (.I0(gpo),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(gpoFromGTsync_r[3]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'hEFEE)) 
    \idx[0]_i_1__1 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(needService),
        .O(\idx[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hEFFEEEEE)) 
    \idx[1]_i_1__5 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(needService),
        .O(\idx[1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \idx[2]_i_1__5 
       (.I0(arb_state[4]),
        .I1(arb_state[2]),
        .I2(arb_state[1]),
        .I3(arb_state[3]),
        .I4(arb_state[0]),
        .O(idx));
  LUT6 #(
    .INIT(64'hEFFFFEEEEEEEEEEE)) 
    \idx[2]_i_2__1 
       (.I0(\en_reg_n_0_[7][1] ),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(needService),
        .O(\idx[2]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[0]_i_1__1_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[1]_i_1__5_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_2__1_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_1__5
       (.I0(needService_i_2__5_n_0),
        .I1(\en_reg[0]_0 ),
        .I2(\en_reg_n_0_[7][0] ),
        .I3(needService_i_3__1_n_0),
        .O(needService_i_1__5_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    needService_i_2__5
       (.I0(\en_reg[6]_1 [1]),
        .I1(\en_reg[6]_1 [0]),
        .I2(\en_reg[5]_2 [1]),
        .I3(\en_reg[5]_2 [0]),
        .O(needService_i_2__5_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_3__1
       (.I0(\en_reg_n_0_[3][0] ),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg[1]_3 [0]),
        .I3(\en_reg[1]_3 [1]),
        .I4(\en_reg_n_0_[2][0] ),
        .O(needService_i_3__1_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__5_n_0),
        .Q(needService),
        .R(rrst));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTRXRESET_r1),
        .I1(MSTRXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTRXRESET_r2),
        .I1(MSTRXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(RXPRERATECHANGE_r1),
        .I1(RXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(RXPRERATECHANGE_r2),
        .I1(RXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(RXDATAPATHRESET_r1),
        .I1(RXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(RXDATAPATHRESET_r2),
        .I1(RXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(rxrate_is_zero_r1),
        .I1(rxrate_is_zero_r2),
        .O(p_0_out[6]));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(p_0_in),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \rxrate_counter[0]_i_1__1 
       (.I0(rxrate_state[2]),
        .I1(rxrate_counter__0[0]),
        .I2(\rxrate_state[3]_i_2__1_n_0 ),
        .O(\rxrate_counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \rxrate_counter[1]_i_1__1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .O(\rxrate_counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \rxrate_counter[2]_i_1__1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(rxrate_counter__0[0]),
        .I3(rxrate_counter__0[1]),
        .I4(rxrate_counter__0[2]),
        .O(\rxrate_counter[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \rxrate_counter[3]_i_1__1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[0]),
        .O(rxrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \rxrate_counter[3]_i_2__1 
       (.I0(rxrate_state[2]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(rxrate_counter__0[1]),
        .I3(rxrate_counter__0[0]),
        .I4(rxrate_counter__0[2]),
        .I5(\rxrate_counter_reg_n_0_[3] ),
        .O(\rxrate_counter[3]_i_2__1_n_0 ));
  FDRE \rxrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[0]_i_1__1_n_0 ),
        .Q(rxrate_counter__0[0]),
        .R(rrst));
  FDRE \rxrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[1]_i_1__1_n_0 ),
        .Q(rxrate_counter__0[1]),
        .R(rrst));
  FDRE \rxrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[2]_i_1__1_n_0 ),
        .Q(rxrate_counter__0[2]),
        .R(rrst));
  FDRE \rxrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(rxrate_counter),
        .D(\rxrate_counter[3]_i_2__1_n_0 ),
        .Q(\rxrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    rxrate_is_zero_i_1__1
       (.I0(rxrate_state[2]),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state_reg_n_0_[3] ),
        .I3(rxrate_state[1]),
        .I4(rxrate_is_zero__0),
        .O(rxrate_is_zero_i_1__1_n_0));
  FDRE rxrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero__0),
        .Q(rxrate_is_zero_r1),
        .R(rrst));
  FDRE rxrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_r1),
        .Q(rxrate_is_zero_r2),
        .R(rrst));
  FDRE rxrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(rxrate_is_zero_i_1__1_n_0),
        .Q(rxrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \rxrate_state[0]_i_1__1 
       (.I0(\rxrate_state_reg_n_0_[3] ),
        .I1(rxrate_state[1]),
        .I2(rxrate_state[2]),
        .I3(\rxrate_state[1]_i_2__1_n_0 ),
        .I4(rxrate_state[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \rxrate_state[1]_i_1__1 
       (.I0(\rxrate_state[1]_i_2__1_n_0 ),
        .I1(rxrate_state[0]),
        .I2(\rxrate_state[3]_i_2__1_n_0 ),
        .I3(rxrate_state[2]),
        .I4(rxrate_state[1]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \rxrate_state[1]_i_2__1 
       (.I0(RXRATE_r1[7]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r1[6]),
        .I3(RXRATE_r2[6]),
        .I4(\rxrate_state[1]_i_3__1_n_0 ),
        .I5(\rxrate_state[1]_i_4__1_n_0 ),
        .O(\rxrate_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_3__1 
       (.I0(RXRATE_r2[3]),
        .I1(RXRATE_r1[3]),
        .I2(RXRATE_r1[5]),
        .I3(RXRATE_r2[5]),
        .I4(RXRATE_r1[4]),
        .I5(RXRATE_r2[4]),
        .O(\rxrate_state[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \rxrate_state[1]_i_4__1 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r1[0]),
        .I2(RXRATE_r1[2]),
        .I3(RXRATE_r2[2]),
        .I4(RXRATE_r1[1]),
        .I5(RXRATE_r2[1]),
        .O(\rxrate_state[1]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \rxrate_state[2]_i_1__1 
       (.I0(\rxrate_state[3]_i_2__1_n_0 ),
        .I1(\rxrate_counter_reg_n_0_[3] ),
        .I2(rxrate_state[2]),
        .I3(rxrate_state[1]),
        .I4(rxrate_state[0]),
        .I5(\rxrate_state_reg_n_0_[3] ),
        .O(\rxrate_state[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rxrate_state[3]_i_1__1 
       (.I0(rxrate_state[1]),
        .I1(\rxrate_state[3]_i_2__1_n_0 ),
        .I2(\rxrate_counter_reg_n_0_[3] ),
        .I3(rxrate_state[2]),
        .I4(\rxrate_state_reg_n_0_[3] ),
        .I5(rxrate_state[0]),
        .O(p_0_in__0[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \rxrate_state[3]_i_2__1 
       (.I0(RXRATE_r2[0]),
        .I1(RXRATE_r2[1]),
        .I2(RXRATE_r2[2]),
        .I3(RXRATE_r2[3]),
        .I4(\rxrate_state[3]_i_3__1_n_0 ),
        .O(\rxrate_state[3]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rxrate_state[3]_i_3__1 
       (.I0(RXRATE_r2[6]),
        .I1(RXRATE_r2[7]),
        .I2(RXRATE_r2[5]),
        .I3(RXRATE_r2[4]),
        .O(\rxrate_state[3]_i_3__1_n_0 ));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \rxrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\rxrate_state[2]_i_1__1_n_0 ),
        .Q(rxrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "RXRATE_START:00001,RXRATE_STATE1:00010,RXRATE_STATE2:00100,RXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \rxrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\rxrate_state_reg_n_0_[3] ),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__180 \synch_vec_rxrate[0].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[0]),
        .src_rst(ch2_rxrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__181 \synch_vec_rxrate[1].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[1]),
        .src_rst(ch2_rxrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__182 \synch_vec_rxrate[2].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[2]),
        .src_rst(ch2_rxrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__183 \synch_vec_rxrate[3].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[3]),
        .src_rst(ch2_rxrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__184 \synch_vec_rxrate[4].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[4]),
        .src_rst(ch2_rxrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__185 \synch_vec_rxrate[5].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[5]),
        .src_rst(ch2_rxrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__186 \synch_vec_rxrate[6].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[6]),
        .src_rst(ch2_rxrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__187 \synch_vec_rxrate[7].RXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(RXRATE_sync[7]),
        .src_rst(ch2_rxrate[7]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function
   (out,
    gpo,
    GPI,
    Q,
    ch3_txrate,
    apb3clk,
    ch3_txprbssel,
    gpi,
    ch3_txmstreset,
    ch3_txmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input [7:0]ch3_txrate;
  input apb3clk;
  input [3:0]ch3_txprbssel;
  input [0:0]gpi;
  input ch3_txmstreset;
  input ch3_txmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__2_n_0 ;
  wire \Command[1]_i_1__2_n_0 ;
  wire \Command[2]_i_1__2_n_0 ;
  wire \Command[3]_i_1__2_n_0 ;
  wire \Command[3]_i_2__2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[1]_i_2__1_n_0 ;
  wire \arb_state[1]_i_5__1_n_0 ;
  wire \arb_state[1]_i_6__1_n_0 ;
  wire \arb_state[1]_i_7__1_n_0 ;
  wire \arb_state[3]_i_2__2_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch3_txmstdatapathreset;
  wire ch3_txmstreset;
  wire [3:0]ch3_txprbssel;
  wire [7:0]ch3_txrate;
  wire counter;
  wire \counter[0]_i_1__2_n_0 ;
  wire \counter[1]_i_1__2_n_0 ;
  wire \counter[2]_i_1__2_n_0 ;
  wire \counter[3]_i_1__2_n_0 ;
  wire \counter[4]_i_1__2_n_0 ;
  wire \counter[5]_i_1__2_n_0 ;
  wire \counter[6]_i_1__2_n_0 ;
  wire \counter[7]_i_2__2_n_0 ;
  wire \counter[7]_i_3__2_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__2_n_0 ;
  wire \en[0][0]_i_2__6_n_0 ;
  wire \en[0][1]_i_1__2_n_0 ;
  wire \en[10][0]_i_1__1_n_0 ;
  wire \en[10][0]_i_3__1_n_0 ;
  wire \en[10][1]_i_1__2_n_0 ;
  wire \en[10][1]_i_2__2_n_0 ;
  wire \en[1][0]_i_1__2_n_0 ;
  wire \en[1][0]_i_2__2_n_0 ;
  wire \en[1][1]_i_1__6_n_0 ;
  wire \en[1][1]_i_2__1_n_0 ;
  wire \en[2][0]_i_1__2_n_0 ;
  wire \en[2][0]_i_2__2_n_0 ;
  wire \en[2][1]_i_1__6_n_0 ;
  wire \en[2][1]_i_2__1_n_0 ;
  wire \en[3][0]_i_1__2_n_0 ;
  wire \en[3][0]_i_2__2_n_0 ;
  wire \en[3][0]_i_3__2_n_0 ;
  wire \en[3][1]_i_1__6_n_0 ;
  wire \en[4][0]_i_1__2_n_0 ;
  wire \en[4][0]_i_2__2_n_0 ;
  wire \en[4][1]_i_1__2_n_0 ;
  wire \en[4][1]_i_2__2_n_0 ;
  wire \en[5][0]_i_1__2_n_0 ;
  wire \en[5][0]_i_2__2_n_0 ;
  wire \en[5][0]_i_3__2_n_0 ;
  wire \en[5][1]_i_1__2_n_0 ;
  wire \en[5][1]_i_2__6_n_0 ;
  wire \en[6][0]_i_1__2_n_0 ;
  wire \en[6][0]_i_2__2_n_0 ;
  wire \en[6][1]_i_1__2_n_0 ;
  wire \en[6][1]_i_2__2_n_0 ;
  wire \en[7][0]_i_1__2_n_0 ;
  wire \en[7][0]_i_2__1_n_0 ;
  wire \en[7][1]_i_1__2_n_0 ;
  wire \en[7][1]_i_2__2_n_0 ;
  wire \en[8][0]_i_1__2_n_0 ;
  wire \en[8][0]_i_2__2_n_0 ;
  wire \en[8][0]_i_3__2_n_0 ;
  wire \en[8][1]_i_1__2_n_0 ;
  wire \en[8][1]_i_2__2_n_0 ;
  wire \en[9][0]_i_1__2_n_0 ;
  wire \en[9][0]_i_2__2_n_0 ;
  wire \en[9][0]_i_3__2_n_0 ;
  wire \en[9][1]_i_1__2_n_0 ;
  wire \en[9][1]_i_2__2_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__2_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_fret_i_1__2_n_0 ;
  wire \idx[0]_i_1__6_n_0 ;
  wire \idx[1]_fret__0_i_1__2_n_0 ;
  wire \idx[1]_fret__1_i_1__2_n_0 ;
  wire \idx[1]_fret_i_1__2_n_0 ;
  wire \idx[1]_i_1__2_n_0 ;
  wire \idx[1]_i_2__2_n_0 ;
  wire \idx[2]_i_1__2_n_0 ;
  wire \idx[3]_i_2__2_n_0 ;
  wire \idx[3]_i_3__2_n_0 ;
  wire \idx[3]_i_4__2_n_0 ;
  wire \idx_reg[0]_fret_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret__1_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1__2_n_0;
  wire needService_i_2__2_n_0;
  wire needService_i_3__6_n_0;
  wire p_0_in;
  wire [1:0]p_0_in__0;
  wire [3:0]p_0_in__1;
  wire [4:0]p_0_in__2;
  wire [9:0]p_0_out;
  wire p_1_in__0;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1__2_n_0 ;
  wire \txprbs_counter[1]_i_1__2_n_0 ;
  wire \txprbs_counter[2]_i_1__2_n_0 ;
  wire \txprbs_counter[3]_i_2__2_n_0 ;
  wire \txprbs_counter[3]_i_3__2_n_0 ;
  wire \txprbs_counter[3]_i_4__2_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1__2_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1__2_n_0 ;
  wire \txrate_counter[1]_i_1__2_n_0 ;
  wire \txrate_counter[2]_i_1__2_n_0 ;
  wire \txrate_counter[3]_i_2__2_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1__2_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2__2_n_0 ;
  wire \txrate_state[1]_i_3__2_n_0 ;
  wire \txrate_state[1]_i_4__2_n_0 ;
  wire \txrate_state[2]_i_1__2_n_0 ;
  wire \txrate_state[3]_i_2__2_n_0 ;
  wire \txrate_state[3]_i_3__2_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1__2 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1__2 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1__2 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Command[3]_i_1__2 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[4]),
        .I3(\idx[3]_i_3__2_n_0 ),
        .O(\Command[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2__2 
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2__2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__2_n_0 ),
        .D(\Command[3]_i_2__2_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__157 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(ch3_txmstreset));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__158 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(ch3_txmstdatapathreset));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__159 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__11 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__2 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[0]));
  LUT5 #(
    .INIT(32'hF2002200)) 
    \arb_state[1]_i_1__2 
       (.I0(arb_state[1]),
        .I1(gpoFromGTsync_r[3]),
        .I2(\arb_state[1]_i_2__1_n_0 ),
        .I3(\arb_state_inferred__3/i__n_0 ),
        .I4(arb_state[0]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[1]_i_2__1 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_3__1 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg[1]_fret__1_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg[0]_fret_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_4__1 
       (.I0(\arb_state[1]_i_5__1_n_0 ),
        .I1(\arb_state[1]_i_6__1_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\arb_state[1]_i_7__1_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_5__1 
       (.I0(\en_reg[1]_2 [0]),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[2][0] ),
        .O(\arb_state[1]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_6__1 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[6]_0 [0]),
        .O(\arb_state[1]_i_6__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \arb_state[1]_i_7__1 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[1]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_7__1_n_0 ));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1__2 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__2 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__2_n_0 ),
        .O(p_0_in__2[3]));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_2__2 
       (.I0(gpoFromGTsync_r[3]),
        .I1(arb_state[2]),
        .I2(\arb_state[1]_i_2__1_n_0 ),
        .I3(arb_state[0]),
        .O(\arb_state[3]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__2 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[4]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__2 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__2 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1__2 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1__2 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1__2 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1__2 
       (.I0(\counter[7]_i_3__2_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__2 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__2_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h00010110)) 
    \counter[7]_i_1__2 
       (.I0(arb_state[1]),
        .I1(arb_state[4]),
        .I2(arb_state[0]),
        .I3(arb_state[2]),
        .I4(arb_state[3]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2__2 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__2_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__2 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__2_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__2_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__2_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1__2 
       (.I0(\en[8][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .O(\en[0][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'hFFEF)) 
    \en[0][0]_i_2__6 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .O(\en[0][0]_i_2__6_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1__2 
       (.I0(\en[8][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[10][0]_i_1__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .O(\en[10][0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[10][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .O(p_1_in__0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_3__1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in),
        .O(\en[10][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFFF00000000)) 
    \en[10][1]_i_2__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(p_20_out__0),
        .I5(\idx[3]_i_4__2_n_0 ),
        .O(\en[10][1]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[10][1]_i_3__2 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_20_out__0));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1__2 
       (.I0(\en[9][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[1][0]_i_2__2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[9][0]_i_3__2_n_0 ),
        .O(\en[1][0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[1][1]_i_1__6 
       (.I0(\en[9][0]_i_3__2_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en[1][1]_i_2__1_n_0 ),
        .O(\en[1][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[1][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__2_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1__2 
       (.I0(\en[10][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[2][0]_i_2__2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[10][0]_i_3__1_n_0 ),
        .O(\en[2][0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[2][1]_i_1__6 
       (.I0(\en[10][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__2_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][1] ),
        .I4(\en[2][1]_i_2__1_n_0 ),
        .O(\en[2][1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[2][1]_i_2__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \en[3][0]_i_1__2 
       (.I0(request[3]),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en[3][0]_i_3__2_n_0 ),
        .O(\en[3][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    \en[3][0]_i_2__2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[0] ),
        .O(\en[3][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .O(\en[3][0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hF7F7F700F700F700)) 
    \en[3][1]_i_1__6 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\en[3][0]_i_3__2_n_0 ),
        .I3(\en_reg_n_0_[3][1] ),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(request[3]),
        .O(\en[3][1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1__2 
       (.I0(\en[8][0]_i_3__2_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[4][0]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[8][0]_i_3__2_n_0 ),
        .O(\en[4][0]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__2 
       (.I0(\en[4][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__2_n_0 ),
        .O(\en[4][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[4][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[8][0]_i_3__2_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(p_20_out__0),
        .I2(\en[5][0]_i_3__2_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[5][0]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[9][0]_i_3__2_n_0 ),
        .O(\en[5][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__2 
       (.I0(\en[5][0]_i_1__2_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__6_n_0 ),
        .O(\en[5][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \en[5][1]_i_2__6 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[5][0]_i_3__2_n_0 ),
        .I5(p_20_out__0),
        .O(\en[5][1]_i_2__6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1__2 
       (.I0(\en[10][0]_i_3__1_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[6][0]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[10][0]_i_3__1_n_0 ),
        .O(\en[6][0]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__2 
       (.I0(\en[6][0]_i_1__2_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__2_n_0 ),
        .O(\en[6][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[6][1]_i_2__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \en[7][0]_i_1__2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(p_20_out__0),
        .I5(request[7]),
        .O(\en[7][0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_20_out__0),
        .O(\en[7][0]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__2 
       (.I0(\en[7][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__2_n_0 ),
        .O(\en[7][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[7][1]_i_2__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[5][0]_i_3__2_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \en[8][0]_i_2__2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(p_20_out__0),
        .I4(\en[8][0]_i_3__2_n_0 ),
        .O(\en[8][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3__2 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1__2 
       (.I0(\en[8][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2__2_n_0 ),
        .O(\en[8][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[8][1]_i_2__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[8][0]_i_3__2_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1__2 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3__2_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[9][0]_i_2__2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__2_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .O(\en[9][0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3__2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1__2 
       (.I0(\en[9][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__2_n_0 ),
        .O(\en[9][1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[9][1]_i_2__2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__2_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2__2_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__2_n_0 ),
        .D(\en[0][0]_i_2__6_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__2_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__2_n_0 ),
        .D(\en[10][0]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__2_n_0 ),
        .D(\en[10][1]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__2_n_0 ),
        .D(\en[1][0]_i_2__2_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__6_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__2_n_0 ),
        .D(\en[2][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__2_n_0 ),
        .D(\en[3][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__6_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__2_n_0 ),
        .D(\en[4][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__2_n_0 ),
        .D(\en[5][0]_i_2__2_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__2_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__2_n_0 ),
        .D(\en[6][0]_i_2__2_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__2_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__2_n_0 ),
        .D(\en[7][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1__2_n_0 ),
        .D(\en[8][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1__2_n_0 ),
        .D(\en[9][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1__2_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1__2
       (.I0(\arb_state[1]_i_2__1_n_0 ),
        .I1(\idx[3]_i_3__2_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2__2
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .I4(arb_state[0]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__2_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0D0F0F0)) 
    gpo_i_1__2
       (.I0(gpoFromGTsync_r[3]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \idx[0]_fret_i_1__2 
       (.I0(\en[9][0]_i_1__2_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__2_n_0 ),
        .I3(\idx[1]_fret_i_1__2_n_0 ),
        .I4(\en[8][1]_i_1__2_n_0 ),
        .I5(\idx[0]_i_1__6_n_0 ),
        .O(\idx[0]_fret_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__6 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4__2_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__0_i_1__2 
       (.I0(\en[1][1]_i_1__6_n_0 ),
        .I1(\en[3][1]_i_1__6_n_0 ),
        .I2(\en[0][1]_i_1__2_n_0 ),
        .I3(\idx[1]_i_1__2_n_0 ),
        .I4(\idx[0]_i_1__6_n_0 ),
        .I5(\en[2][1]_i_1__6_n_0 ),
        .O(\idx[1]_fret__0_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__1_i_1__2 
       (.I0(\en[5][1]_i_1__2_n_0 ),
        .I1(\en[7][1]_i_1__2_n_0 ),
        .I2(\en[4][1]_i_1__2_n_0 ),
        .I3(\idx[1]_i_1__2_n_0 ),
        .I4(\idx[0]_i_1__6_n_0 ),
        .I5(\en[6][1]_i_1__2_n_0 ),
        .O(\idx[1]_fret__1_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[1]_fret_i_1__2 
       (.I0(\idx[1]_i_2__2_n_0 ),
        .I1(\idx[2]_i_1__2_n_0 ),
        .I2(\idx[3]_i_2__2_n_0 ),
        .I3(idx),
        .I4(\idx_reg[1]_fret_n_0 ),
        .O(\idx[1]_fret_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1__2 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2__2_n_0 ),
        .O(\idx[1]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2__2 
       (.I0(\idx[3]_i_4__2_n_0 ),
        .I1(\en[9][0]_i_3__2_n_0 ),
        .I2(\en[10][0]_i_3__1_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT5 #(
    .INIT(32'h04404040)) 
    \idx[2]_i_1__2 
       (.I0(\idx[3]_i_4__2_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .O(\idx[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1__2 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3__2_n_0 ),
        .O(idx));
  LUT6 #(
    .INIT(64'hAEEAEAEAEAEAEAEA)) 
    \idx[3]_i_2__2 
       (.I0(\idx[3]_i_4__2_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3__2 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4__2 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    \idx[3]_i_5__2 
       (.I0(needService),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .O(idx1__1));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__6_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE \idx_reg[0]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_fret_i_1__2_n_0 ),
        .Q(\idx_reg[0]_fret_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__2_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__2_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__2_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__1 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__1_i_1__2_n_0 ),
        .Q(\idx_reg[1]_fret__1_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1__2_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2__2_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1__2
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[1]_2 [1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(needService_i_2__2_n_0),
        .I5(needService_i_3__6_n_0),
        .O(needService_i_1__2_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2__2
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__6
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(needService_i_3__6_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__2_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__153 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(ch3_txprbssel[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__154 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(ch3_txprbssel[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__155 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(ch3_txprbssel[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__156 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(ch3_txprbssel[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__145 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(ch3_txrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__146 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(ch3_txrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__147 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(ch3_txrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__148 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(ch3_txrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__149 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(ch3_txrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__150 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(ch3_txrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__151 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(ch3_txrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__152 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(ch3_txrate[7]));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1__2 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3__2_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1__2 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3__2_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1__2 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3__2_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1__2 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2__2 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3__2_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3__2 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4__2_n_0 ),
        .O(\txprbs_counter[3]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4__2 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4__2_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1__2_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1__2_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1__2_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2__2_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1__2 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1__2 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1__2 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1__2_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__2_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1__2 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2__2_n_0 ),
        .O(\txrate_counter[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1__2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1__2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1__2 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2__2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2__2_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1__2_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1__2_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1__2_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2__2_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1__2
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1__2_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1__2_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1__2 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2__2_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__1[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1__2 
       (.I0(\txrate_state[1]_i_2__2_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2__2_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__1[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2__2 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3__2_n_0 ),
        .I5(\txrate_state[1]_i_4__2_n_0 ),
        .O(\txrate_state[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3__2 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4__2 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1__2 
       (.I0(\txrate_state[3]_i_2__2_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1__2 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2__2_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2__2 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3__2_n_0 ),
        .O(\txrate_state[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3__2 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3__2_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1__2_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_tx_function" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function__xdcDup__1
   (out,
    gpo,
    GPI,
    Q,
    ch0_txrate,
    apb3clk,
    ch0_txprbssel,
    gpi,
    ch0_txmstreset,
    ch0_txmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input [7:0]ch0_txrate;
  input apb3clk;
  input [3:0]ch0_txprbssel;
  input [0:0]gpi;
  input ch0_txmstreset;
  input ch0_txmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1_n_0 ;
  wire \Command[1]_i_1_n_0 ;
  wire \Command[2]_i_1_n_0 ;
  wire \Command[3]_i_1_n_0 ;
  wire \Command[3]_i_2_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[1]_i_2_n_0 ;
  wire \arb_state[1]_i_5_n_0 ;
  wire \arb_state[1]_i_6_n_0 ;
  wire \arb_state[1]_i_7_n_0 ;
  wire \arb_state[3]_i_2_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch0_txmstdatapathreset;
  wire ch0_txmstreset;
  wire [3:0]ch0_txprbssel;
  wire [7:0]ch0_txrate;
  wire counter;
  wire \counter[0]_i_1_n_0 ;
  wire \counter[1]_i_1_n_0 ;
  wire \counter[2]_i_1_n_0 ;
  wire \counter[3]_i_1_n_0 ;
  wire \counter[4]_i_1_n_0 ;
  wire \counter[5]_i_1_n_0 ;
  wire \counter[6]_i_1_n_0 ;
  wire \counter[7]_i_2_n_0 ;
  wire \counter[7]_i_3_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1_n_0 ;
  wire \en[0][0]_i_2__3_n_0 ;
  wire \en[0][1]_i_1_n_0 ;
  wire \en[10][0]_i_1_n_0 ;
  wire \en[10][0]_i_3_n_0 ;
  wire \en[10][1]_i_1_n_0 ;
  wire \en[10][1]_i_2_n_0 ;
  wire \en[1][0]_i_1_n_0 ;
  wire \en[1][0]_i_2_n_0 ;
  wire \en[1][1]_i_1__3_n_0 ;
  wire \en[1][1]_i_2_n_0 ;
  wire \en[2][0]_i_1_n_0 ;
  wire \en[2][0]_i_2_n_0 ;
  wire \en[2][1]_i_1__3_n_0 ;
  wire \en[2][1]_i_2_n_0 ;
  wire \en[3][0]_i_1_n_0 ;
  wire \en[3][0]_i_2_n_0 ;
  wire \en[3][0]_i_3_n_0 ;
  wire \en[3][1]_i_1__3_n_0 ;
  wire \en[4][0]_i_1_n_0 ;
  wire \en[4][0]_i_2_n_0 ;
  wire \en[4][1]_i_1_n_0 ;
  wire \en[4][1]_i_2_n_0 ;
  wire \en[5][0]_i_1_n_0 ;
  wire \en[5][0]_i_2_n_0 ;
  wire \en[5][0]_i_3_n_0 ;
  wire \en[5][1]_i_1_n_0 ;
  wire \en[5][1]_i_2__3_n_0 ;
  wire \en[6][0]_i_1_n_0 ;
  wire \en[6][0]_i_2_n_0 ;
  wire \en[6][1]_i_1_n_0 ;
  wire \en[6][1]_i_2_n_0 ;
  wire \en[7][0]_i_1_n_0 ;
  wire \en[7][0]_i_2_n_0 ;
  wire \en[7][1]_i_1_n_0 ;
  wire \en[7][1]_i_2_n_0 ;
  wire \en[8][0]_i_1_n_0 ;
  wire \en[8][0]_i_2_n_0 ;
  wire \en[8][0]_i_3_n_0 ;
  wire \en[8][1]_i_1_n_0 ;
  wire \en[8][1]_i_2_n_0 ;
  wire \en[9][0]_i_1_n_0 ;
  wire \en[9][0]_i_2_n_0 ;
  wire \en[9][0]_i_3_n_0 ;
  wire \en[9][1]_i_1_n_0 ;
  wire \en[9][1]_i_2_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_fret_i_1_n_0 ;
  wire \idx[0]_i_1__3_n_0 ;
  wire \idx[1]_fret__0_i_1_n_0 ;
  wire \idx[1]_fret__1_i_1_n_0 ;
  wire \idx[1]_fret_i_1_n_0 ;
  wire \idx[1]_i_1_n_0 ;
  wire \idx[1]_i_2_n_0 ;
  wire \idx[2]_i_1_n_0 ;
  wire \idx[3]_i_2_n_0 ;
  wire \idx[3]_i_3_n_0 ;
  wire \idx[3]_i_4_n_0 ;
  wire \idx_reg[0]_fret_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret__1_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1_n_0;
  wire needService_i_2_n_0;
  wire needService_i_3__3_n_0;
  wire p_0_in;
  wire [1:0]p_0_in__0;
  wire [3:0]p_0_in__1;
  wire [4:0]p_0_in__2;
  wire [9:0]p_0_out;
  wire p_1_in__0;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1_n_0 ;
  wire \txprbs_counter[1]_i_1_n_0 ;
  wire \txprbs_counter[2]_i_1_n_0 ;
  wire \txprbs_counter[3]_i_2_n_0 ;
  wire \txprbs_counter[3]_i_3_n_0 ;
  wire \txprbs_counter[3]_i_4_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1_n_0 ;
  wire \txrate_counter[1]_i_1_n_0 ;
  wire \txrate_counter[2]_i_1_n_0 ;
  wire \txrate_counter[3]_i_2_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2_n_0 ;
  wire \txrate_state[1]_i_3_n_0 ;
  wire \txrate_state[1]_i_4_n_0 ;
  wire \txrate_state[2]_i_1_n_0 ;
  wire \txrate_state[3]_i_2_n_0 ;
  wire \txrate_state[3]_i_3_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Command[3]_i_1 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[4]),
        .I3(\idx[3]_i_3_n_0 ),
        .O(\Command[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2 
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1_n_0 ),
        .D(\Command[3]_i_2_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__112 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(ch0_txmstreset));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__113 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(ch0_txmstdatapathreset));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__114 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__8 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[0]));
  LUT5 #(
    .INIT(32'hF2002200)) 
    \arb_state[1]_i_1 
       (.I0(arb_state[1]),
        .I1(gpoFromGTsync_r[3]),
        .I2(\arb_state[1]_i_2_n_0 ),
        .I3(\arb_state_inferred__3/i__n_0 ),
        .I4(arb_state[0]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[1]_i_2 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_3 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg[1]_fret__1_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg[0]_fret_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_4 
       (.I0(\arb_state[1]_i_5_n_0 ),
        .I1(\arb_state[1]_i_6_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\arb_state[1]_i_7_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_5 
       (.I0(\en_reg[1]_2 [0]),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[2][0] ),
        .O(\arb_state[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_6 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[6]_0 [0]),
        .O(\arb_state[1]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \arb_state[1]_i_7 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[1]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2_n_0 ),
        .O(p_0_in__2[3]));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_2 
       (.I0(gpoFromGTsync_r[3]),
        .I1(arb_state[2]),
        .I2(\arb_state[1]_i_2_n_0 ),
        .I3(arb_state[0]),
        .O(\arb_state[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[4]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1 
       (.I0(\counter[7]_i_3_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00010110)) 
    \counter[7]_i_1 
       (.I0(arb_state[1]),
        .I1(arb_state[4]),
        .I2(arb_state[0]),
        .I3(arb_state[2]),
        .I4(arb_state[3]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1 
       (.I0(\en[8][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .O(\en[0][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hFFEF)) 
    \en[0][0]_i_2__3 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .O(\en[0][0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1 
       (.I0(\en[8][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[10][0]_i_1 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .O(\en[10][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[10][0]_i_2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .O(p_1_in__0));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in),
        .O(\en[10][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFFF00000000)) 
    \en[10][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(p_20_out__0),
        .I5(\idx[3]_i_4_n_0 ),
        .O(\en[10][1]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[10][1]_i_3 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_20_out__0));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1 
       (.I0(\en[9][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[1][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[9][0]_i_3_n_0 ),
        .O(\en[1][0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[1][1]_i_1__3 
       (.I0(\en[9][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en[1][1]_i_2_n_0 ),
        .O(\en[1][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[1][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1 
       (.I0(\en[10][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[2][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[10][0]_i_3_n_0 ),
        .O(\en[2][0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[2][1]_i_1__3 
       (.I0(\en[10][0]_i_3_n_0 ),
        .I1(\en[3][0]_i_3_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][1] ),
        .I4(\en[2][1]_i_2_n_0 ),
        .O(\en[2][1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[2][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \en[3][0]_i_1 
       (.I0(request[3]),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en[3][0]_i_3_n_0 ),
        .O(\en[3][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    \en[3][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[0] ),
        .O(\en[3][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .O(\en[3][0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hF7F7F700F700F700)) 
    \en[3][1]_i_1__3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\en[3][0]_i_3_n_0 ),
        .I3(\en_reg_n_0_[3][1] ),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(request[3]),
        .O(\en[3][1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1 
       (.I0(\en[8][0]_i_3_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[4][0]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[8][0]_i_3_n_0 ),
        .O(\en[4][0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1 
       (.I0(\en[4][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2_n_0 ),
        .O(\en[4][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[4][1]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[8][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(p_20_out__0),
        .I2(\en[5][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[5][0]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[9][0]_i_3_n_0 ),
        .O(\en[5][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1 
       (.I0(\en[5][0]_i_1_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__3_n_0 ),
        .O(\en[5][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \en[5][1]_i_2__3 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[5][0]_i_3_n_0 ),
        .I5(p_20_out__0),
        .O(\en[5][1]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1 
       (.I0(\en[10][0]_i_3_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[6][0]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[10][0]_i_3_n_0 ),
        .O(\en[6][0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1 
       (.I0(\en[6][0]_i_1_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2_n_0 ),
        .O(\en[6][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[6][1]_i_2 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \en[7][0]_i_1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(p_20_out__0),
        .I5(request[7]),
        .O(\en[7][0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_20_out__0),
        .O(\en[7][0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1 
       (.I0(\en[7][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2_n_0 ),
        .O(\en[7][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[7][1]_i_2 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[5][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \en[8][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(p_20_out__0),
        .I4(\en[8][0]_i_3_n_0 ),
        .O(\en[8][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1 
       (.I0(\en[8][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2_n_0 ),
        .O(\en[8][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[8][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[8][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[9][0]_i_2 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .O(\en[9][0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1 
       (.I0(\en[9][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2_n_0 ),
        .O(\en[9][1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[9][1]_i_2 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1_n_0 ),
        .D(\en[0][0]_i_2__3_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1_n_0 ),
        .D(\en[10][0]_i_1_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1_n_0 ),
        .D(\en[10][1]_i_2_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1_n_0 ),
        .D(\en[1][0]_i_2_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__3_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1_n_0 ),
        .D(\en[2][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1_n_0 ),
        .D(\en[3][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__3_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1_n_0 ),
        .D(\en[4][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1_n_0 ),
        .D(\en[5][0]_i_2_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1_n_0 ),
        .D(\en[6][0]_i_2_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1_n_0 ),
        .D(\en[7][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1_n_0 ),
        .D(\en[8][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1_n_0 ),
        .D(\en[9][0]_i_2_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1
       (.I0(\arb_state[1]_i_2_n_0 ),
        .I1(\idx[3]_i_3_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .I4(arb_state[0]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0D0F0F0)) 
    gpo_i_1
       (.I0(gpoFromGTsync_r[3]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \idx[0]_fret_i_1 
       (.I0(\en[9][0]_i_1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2_n_0 ),
        .I3(\idx[1]_fret_i_1_n_0 ),
        .I4(\en[8][1]_i_1_n_0 ),
        .I5(\idx[0]_i_1__3_n_0 ),
        .O(\idx[0]_fret_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__3 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__0_i_1 
       (.I0(\en[1][1]_i_1__3_n_0 ),
        .I1(\en[3][1]_i_1__3_n_0 ),
        .I2(\en[0][1]_i_1_n_0 ),
        .I3(\idx[1]_i_1_n_0 ),
        .I4(\idx[0]_i_1__3_n_0 ),
        .I5(\en[2][1]_i_1__3_n_0 ),
        .O(\idx[1]_fret__0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__1_i_1 
       (.I0(\en[5][1]_i_1_n_0 ),
        .I1(\en[7][1]_i_1_n_0 ),
        .I2(\en[4][1]_i_1_n_0 ),
        .I3(\idx[1]_i_1_n_0 ),
        .I4(\idx[0]_i_1__3_n_0 ),
        .I5(\en[6][1]_i_1_n_0 ),
        .O(\idx[1]_fret__1_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[1]_fret_i_1 
       (.I0(\idx[1]_i_2_n_0 ),
        .I1(\idx[2]_i_1_n_0 ),
        .I2(\idx[3]_i_2_n_0 ),
        .I3(idx),
        .I4(\idx_reg[1]_fret_n_0 ),
        .O(\idx[1]_fret_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2_n_0 ),
        .O(\idx[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2 
       (.I0(\idx[3]_i_4_n_0 ),
        .I1(\en[9][0]_i_3_n_0 ),
        .I2(\en[10][0]_i_3_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT5 #(
    .INIT(32'h04404040)) 
    \idx[2]_i_1 
       (.I0(\idx[3]_i_4_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .O(\idx[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3_n_0 ),
        .O(idx));
  LUT6 #(
    .INIT(64'hAEEAEAEAEAEAEAEA)) 
    \idx[3]_i_2 
       (.I0(\idx[3]_i_4_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    \idx[3]_i_5 
       (.I0(needService),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .O(idx1__1));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__3_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE \idx_reg[0]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_fret_i_1_n_0 ),
        .Q(\idx_reg[0]_fret_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__1 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__1_i_1_n_0 ),
        .Q(\idx_reg[1]_fret__1_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[1]_2 [1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(needService_i_2_n_0),
        .I5(needService_i_3__3_n_0),
        .O(needService_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__3
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(needService_i_3__3_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__108 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(ch0_txprbssel[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__109 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(ch0_txprbssel[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__110 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(ch0_txprbssel[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__111 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(ch0_txprbssel[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__100 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(ch0_txrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__101 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(ch0_txrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__102 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(ch0_txrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__103 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(ch0_txrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__104 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(ch0_txrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__105 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(ch0_txrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__106 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(ch0_txrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__107 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(ch0_txrate[7]));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4_n_0 ),
        .O(\txprbs_counter[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2_n_0 ),
        .O(\txrate_counter[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__1[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1 
       (.I0(\txrate_state[1]_i_2_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__1[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3_n_0 ),
        .I5(\txrate_state[1]_i_4_n_0 ),
        .O(\txrate_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1 
       (.I0(\txrate_state[3]_i_2_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3_n_0 ),
        .O(\txrate_state[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_tx_function" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function__xdcDup__2
   (out,
    gpo,
    GPI,
    Q,
    ch1_txrate,
    apb3clk,
    ch1_txprbssel,
    gpi,
    ch1_txmstreset,
    ch1_txmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input [7:0]ch1_txrate;
  input apb3clk;
  input [3:0]ch1_txprbssel;
  input [0:0]gpi;
  input ch1_txmstreset;
  input ch1_txmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__0_n_0 ;
  wire \Command[1]_i_1__0_n_0 ;
  wire \Command[2]_i_1__0_n_0 ;
  wire \Command[3]_i_1__0_n_0 ;
  wire \Command[3]_i_2__0_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[1]_i_2__0_n_0 ;
  wire \arb_state[1]_i_5__0_n_0 ;
  wire \arb_state[1]_i_6__0_n_0 ;
  wire \arb_state[1]_i_7__0_n_0 ;
  wire \arb_state[3]_i_2__0_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch1_txmstdatapathreset;
  wire ch1_txmstreset;
  wire [3:0]ch1_txprbssel;
  wire [7:0]ch1_txrate;
  wire counter;
  wire \counter[0]_i_1__0_n_0 ;
  wire \counter[1]_i_1__0_n_0 ;
  wire \counter[2]_i_1__0_n_0 ;
  wire \counter[3]_i_1__0_n_0 ;
  wire \counter[4]_i_1__0_n_0 ;
  wire \counter[5]_i_1__0_n_0 ;
  wire \counter[6]_i_1__0_n_0 ;
  wire \counter[7]_i_2__0_n_0 ;
  wire \counter[7]_i_3__0_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__0_n_0 ;
  wire \en[0][0]_i_2__4_n_0 ;
  wire \en[0][1]_i_1__0_n_0 ;
  wire \en[10][0]_i_1__0_n_0 ;
  wire \en[10][0]_i_3__0_n_0 ;
  wire \en[10][1]_i_1__0_n_0 ;
  wire \en[10][1]_i_2__0_n_0 ;
  wire \en[1][0]_i_1__0_n_0 ;
  wire \en[1][0]_i_2__0_n_0 ;
  wire \en[1][1]_i_1__4_n_0 ;
  wire \en[1][1]_i_2__0_n_0 ;
  wire \en[2][0]_i_1__0_n_0 ;
  wire \en[2][0]_i_2__0_n_0 ;
  wire \en[2][1]_i_1__4_n_0 ;
  wire \en[2][1]_i_2__0_n_0 ;
  wire \en[3][0]_i_1__0_n_0 ;
  wire \en[3][0]_i_2__0_n_0 ;
  wire \en[3][0]_i_3__0_n_0 ;
  wire \en[3][1]_i_1__4_n_0 ;
  wire \en[4][0]_i_1__0_n_0 ;
  wire \en[4][0]_i_2__0_n_0 ;
  wire \en[4][1]_i_1__0_n_0 ;
  wire \en[4][1]_i_2__0_n_0 ;
  wire \en[5][0]_i_1__0_n_0 ;
  wire \en[5][0]_i_2__0_n_0 ;
  wire \en[5][0]_i_3__0_n_0 ;
  wire \en[5][1]_i_1__0_n_0 ;
  wire \en[5][1]_i_2__4_n_0 ;
  wire \en[6][0]_i_1__0_n_0 ;
  wire \en[6][0]_i_2__0_n_0 ;
  wire \en[6][1]_i_1__0_n_0 ;
  wire \en[6][1]_i_2__0_n_0 ;
  wire \en[7][0]_i_1__0_n_0 ;
  wire \en[7][0]_i_2__0_n_0 ;
  wire \en[7][1]_i_1__0_n_0 ;
  wire \en[7][1]_i_2__0_n_0 ;
  wire \en[8][0]_i_1__0_n_0 ;
  wire \en[8][0]_i_2__0_n_0 ;
  wire \en[8][0]_i_3__0_n_0 ;
  wire \en[8][1]_i_1__0_n_0 ;
  wire \en[8][1]_i_2__0_n_0 ;
  wire \en[9][0]_i_1__0_n_0 ;
  wire \en[9][0]_i_2__0_n_0 ;
  wire \en[9][0]_i_3__0_n_0 ;
  wire \en[9][1]_i_1__0_n_0 ;
  wire \en[9][1]_i_2__0_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[10][0] ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__0_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_fret_i_1__0_n_0 ;
  wire \idx[0]_i_1__4_n_0 ;
  wire \idx[1]_fret__0_i_1__0_n_0 ;
  wire \idx[1]_fret__1_i_1__0_n_0 ;
  wire \idx[1]_fret_i_1__0_n_0 ;
  wire \idx[1]_i_1__0_n_0 ;
  wire \idx[1]_i_2__0_n_0 ;
  wire \idx[2]_i_1__0_n_0 ;
  wire \idx[3]_i_2__0_n_0 ;
  wire \idx[3]_i_3__0_n_0 ;
  wire \idx[3]_i_4__0_n_0 ;
  wire \idx_reg[0]_fret_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret__1_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1__0_n_0;
  wire needService_i_2__0_n_0;
  wire needService_i_3__4_n_0;
  wire p_0_in;
  wire [1:0]p_0_in__0;
  wire [3:0]p_0_in__1;
  wire [4:0]p_0_in__2;
  wire [9:0]p_0_out;
  wire p_1_in__0;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1__0_n_0 ;
  wire \txprbs_counter[1]_i_1__0_n_0 ;
  wire \txprbs_counter[2]_i_1__0_n_0 ;
  wire \txprbs_counter[3]_i_2__0_n_0 ;
  wire \txprbs_counter[3]_i_3__0_n_0 ;
  wire \txprbs_counter[3]_i_4__0_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1__0_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1__0_n_0 ;
  wire \txrate_counter[1]_i_1__0_n_0 ;
  wire \txrate_counter[2]_i_1__0_n_0 ;
  wire \txrate_counter[3]_i_2__0_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1__0_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2__0_n_0 ;
  wire \txrate_state[1]_i_3__0_n_0 ;
  wire \txrate_state[1]_i_4__0_n_0 ;
  wire \txrate_state[2]_i_1__0_n_0 ;
  wire \txrate_state[3]_i_2__0_n_0 ;
  wire \txrate_state[3]_i_3__0_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Command[3]_i_1__0 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[4]),
        .I3(\idx[3]_i_3__0_n_0 ),
        .O(\Command[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2__0 
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2__0_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__0_n_0 ),
        .D(\Command[3]_i_2__0_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__127 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(ch1_txmstreset));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__128 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(ch1_txmstdatapathreset));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__129 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__9 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__0 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[0]));
  LUT5 #(
    .INIT(32'hF2002200)) 
    \arb_state[1]_i_1__0 
       (.I0(arb_state[1]),
        .I1(gpoFromGTsync_r[3]),
        .I2(\arb_state[1]_i_2__0_n_0 ),
        .I3(\arb_state_inferred__3/i__n_0 ),
        .I4(arb_state[0]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[1]_i_2__0 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_3__0 
       (.I0(\idx_reg[1]_fret__0_n_0 ),
        .I1(\idx_reg[1]_fret__1_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg[0]_fret_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \arb_state[1]_i_4__0 
       (.I0(\arb_state[1]_i_5__0_n_0 ),
        .I1(\arb_state[1]_i_6__0_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\arb_state[1]_i_7__0_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][0] ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_5__0 
       (.I0(\en_reg[1]_2 [0]),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg_n_0_[2][0] ),
        .O(\arb_state[1]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \arb_state[1]_i_6__0 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg_n_0_[7][0] ),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[6]_0 [0]),
        .O(\arb_state[1]_i_6__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \arb_state[1]_i_7__0 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[1]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\arb_state[1]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1__0 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__0 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[7] ),
        .I3(\arb_state[3]_i_2__0_n_0 ),
        .O(p_0_in__2[3]));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_2__0 
       (.I0(gpoFromGTsync_r[3]),
        .I1(arb_state[2]),
        .I2(\arb_state[1]_i_2__0_n_0 ),
        .I3(arb_state[0]),
        .O(\arb_state[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__0 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[4]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__0 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__0 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1__0 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1__0 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1__0 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1__0 
       (.I0(\counter[7]_i_3__0_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__0 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__0_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00010110)) 
    \counter[7]_i_1__0 
       (.I0(arb_state[1]),
        .I1(arb_state[4]),
        .I2(arb_state[0]),
        .I3(arb_state[2]),
        .I4(arb_state[3]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2__0 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__0_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__0 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__0_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__0_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__0_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1__0 
       (.I0(\en[8][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .O(\en[0][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'hFFEF)) 
    \en[0][0]_i_2__4 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .O(\en[0][0]_i_2__4_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1__0 
       (.I0(\en[8][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[10][0]_i_1__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .O(\en[10][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \en[10][0]_i_2__0 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .O(p_1_in__0));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_i_3__0 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1__0 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in),
        .O(\en[10][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFFF00000000)) 
    \en[10][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(p_20_out__0),
        .I5(\idx[3]_i_4__0_n_0 ),
        .O(\en[10][1]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[10][1]_i_3__0 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_20_out__0));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1__0 
       (.I0(\en[9][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[1][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[9][0]_i_3__0_n_0 ),
        .O(\en[1][0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[1][1]_i_1__4 
       (.I0(\en[9][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [1]),
        .I4(\en[1][1]_i_2__0_n_0 ),
        .O(\en[1][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[1][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg[1]_2 [0]),
        .I5(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1__0 
       (.I0(\en[10][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \en[2][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[10][0]_i_3__0_n_0 ),
        .O(\en[2][0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFF10E00)) 
    \en[2][1]_i_1__4 
       (.I0(\en[10][0]_i_3__0_n_0 ),
        .I1(\en[3][0]_i_3__0_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][1] ),
        .I4(\en[2][1]_i_2__0_n_0 ),
        .O(\en[2][1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFEFFFEFF0000)) 
    \en[2][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[2][0] ),
        .I5(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \en[3][0]_i_1__0 
       (.I0(request[3]),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\en[3][0]_i_3__0_n_0 ),
        .O(\en[3][0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    \en[3][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[0] ),
        .O(\en[3][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .O(\en[3][0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hF7F7F700F700F700)) 
    \en[3][1]_i_1__4 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\en[3][0]_i_3__0_n_0 ),
        .I3(\en_reg_n_0_[3][1] ),
        .I4(\en_reg_n_0_[3][0] ),
        .I5(request[3]),
        .O(\en[3][1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1__0 
       (.I0(\en[8][0]_i_3__0_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[4][0]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[8][0]_i_3__0_n_0 ),
        .O(\en[4][0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__0 
       (.I0(\en[4][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__0_n_0 ),
        .O(\en[4][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[4][1]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[8][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(p_20_out__0),
        .I2(\en[5][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[5][0]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[9][0]_i_3__0_n_0 ),
        .O(\en[5][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__0 
       (.I0(\en[5][0]_i_1__0_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__4_n_0 ),
        .O(\en[5][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEEEEEEE)) 
    \en[5][1]_i_2__4 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\en[5][0]_i_3__0_n_0 ),
        .I5(p_20_out__0),
        .O(\en[5][1]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1__0 
       (.I0(\en[10][0]_i_3__0_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    \en[6][0]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(p_1_in__0),
        .I4(\en[10][0]_i_3__0_n_0 ),
        .O(\en[6][0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__0 
       (.I0(\en[6][0]_i_1__0_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__0_n_0 ),
        .O(\en[6][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[6][1]_i_2__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF20000000)) 
    \en[7][0]_i_1__0 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(p_20_out__0),
        .I5(request[7]),
        .O(\en[7][0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFBFFFFFFFFFFFFFF)) 
    \en[7][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(p_20_out__0),
        .O(\en[7][0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__0 
       (.I0(\en[7][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__0_n_0 ),
        .O(\en[7][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[7][1]_i_2__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[5][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1__0 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \en[8][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(p_20_out__0),
        .I4(\en[8][0]_i_3__0_n_0 ),
        .O(\en[8][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3__0 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1__0 
       (.I0(\en[8][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2__0_n_0 ),
        .O(\en[8][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[8][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[8][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1__0 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \en[9][0]_i_2__0 
       (.I0(p_1_in__0),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .O(\en[9][0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3__0 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1__0 
       (.I0(\en[9][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__0_n_0 ),
        .O(\en[9][1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFFFDFF0000)) 
    \en[9][1]_i_2__0 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\en[9][0]_i_3__0_n_0 ),
        .I3(p_20_out__0),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2__0_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__0_n_0 ),
        .D(\en[0][0]_i_2__4_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__0_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  FDRE \en_reg[10][0] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__0_n_0 ),
        .D(\en[10][0]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[10][0] ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__0_n_0 ),
        .D(\en[10][1]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__0_n_0 ),
        .D(\en[1][0]_i_2__0_n_0 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__4_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__0_n_0 ),
        .D(\en[2][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__0_n_0 ),
        .D(\en[3][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__4_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__0_n_0 ),
        .D(\en[4][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__0_n_0 ),
        .D(\en[5][0]_i_2__0_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__0_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__0_n_0 ),
        .D(\en[6][0]_i_2__0_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__0_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__0_n_0 ),
        .D(\en[7][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1__0_n_0 ),
        .D(\en[8][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1__0_n_0 ),
        .D(\en[9][0]_i_2__0_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1__0_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1__0
       (.I0(\arb_state[1]_i_2__0_n_0 ),
        .I1(\idx[3]_i_3__0_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2__0
       (.I0(arb_state[3]),
        .I1(arb_state[2]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .I4(arb_state[0]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__0_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0D0F0F0)) 
    gpo_i_1__0
       (.I0(gpoFromGTsync_r[3]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \idx[0]_fret_i_1__0 
       (.I0(\en[9][0]_i_1__0_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__0_n_0 ),
        .I3(\idx[1]_fret_i_1__0_n_0 ),
        .I4(\en[8][1]_i_1__0_n_0 ),
        .I5(\idx[0]_i_1__4_n_0 ),
        .O(\idx[0]_fret_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__4 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4__0_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__0_i_1__0 
       (.I0(\en[1][1]_i_1__4_n_0 ),
        .I1(\en[3][1]_i_1__4_n_0 ),
        .I2(\en[0][1]_i_1__0_n_0 ),
        .I3(\idx[1]_i_1__0_n_0 ),
        .I4(\idx[0]_i_1__4_n_0 ),
        .I5(\en[2][1]_i_1__4_n_0 ),
        .O(\idx[1]_fret__0_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hCCAAFFF0CCAA00F0)) 
    \idx[1]_fret__1_i_1__0 
       (.I0(\en[5][1]_i_1__0_n_0 ),
        .I1(\en[7][1]_i_1__0_n_0 ),
        .I2(\en[4][1]_i_1__0_n_0 ),
        .I3(\idx[1]_i_1__0_n_0 ),
        .I4(\idx[0]_i_1__4_n_0 ),
        .I5(\en[6][1]_i_1__0_n_0 ),
        .O(\idx[1]_fret__1_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[1]_fret_i_1__0 
       (.I0(\idx[1]_i_2__0_n_0 ),
        .I1(\idx[2]_i_1__0_n_0 ),
        .I2(\idx[3]_i_2__0_n_0 ),
        .I3(idx),
        .I4(\idx_reg[1]_fret_n_0 ),
        .O(\idx[1]_fret_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1__0 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2__0_n_0 ),
        .O(\idx[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2__0 
       (.I0(\idx[3]_i_4__0_n_0 ),
        .I1(\en[9][0]_i_3__0_n_0 ),
        .I2(\en[10][0]_i_3__0_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h04404040)) 
    \idx[2]_i_1__0 
       (.I0(\idx[3]_i_4__0_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .O(\idx[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1__0 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3__0_n_0 ),
        .O(idx));
  LUT6 #(
    .INIT(64'hAEEAEAEAEAEAEAEA)) 
    \idx[3]_i_2__0 
       (.I0(\idx[3]_i_4__0_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3__0 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4__0 
       (.I0(\en_reg_n_0_[10][0] ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    \idx[3]_i_5__0 
       (.I0(needService),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .O(idx1__1));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__4_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE \idx_reg[0]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_fret_i_1__0_n_0 ),
        .Q(\idx_reg[0]_fret_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__0_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__0_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__0_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__1 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__1_i_1__0_n_0 ),
        .Q(\idx_reg[1]_fret__1_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1__0_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2__0_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1__0
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\en_reg_n_0_[10][0] ),
        .I2(\en_reg[1]_2 [1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(needService_i_2__0_n_0),
        .I5(needService_i_3__4_n_0),
        .O(needService_i_1__0_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2__0
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__4
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[4][0] ),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(needService_i_3__4_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__0_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__123 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(ch1_txprbssel[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__124 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(ch1_txprbssel[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__125 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(ch1_txprbssel[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__126 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(ch1_txprbssel[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__115 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(ch1_txrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__116 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(ch1_txrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__117 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(ch1_txrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__118 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(ch1_txrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__119 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(ch1_txrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__120 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(ch1_txrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__121 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(ch1_txrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__122 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(ch1_txrate[7]));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1__0 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3__0_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1__0 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3__0_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1__0 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3__0_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1__0 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2__0 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3__0_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3__0 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4__0_n_0 ),
        .O(\txprbs_counter[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4__0 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4__0_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1__0_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1__0_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1__0_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2__0_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1__0 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1__0 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1__0 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1__0_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__0_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1__0 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2__0_n_0 ),
        .O(\txrate_counter[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1__0 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1__0 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1__0 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2__0 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2__0_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1__0_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1__0_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1__0_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2__0_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1__0
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1__0_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1__0_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1__0 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2__0_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__1[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1__0 
       (.I0(\txrate_state[1]_i_2__0_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2__0_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__1[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2__0 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3__0_n_0 ),
        .I5(\txrate_state[1]_i_4__0_n_0 ),
        .O(\txrate_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3__0 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4__0 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1__0 
       (.I0(\txrate_state[3]_i_2__0_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1__0 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2__0_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2__0 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3__0_n_0 ),
        .O(\txrate_state[3]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3__0 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3__0_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1__0_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* ORIG_REF_NAME = "system_gt_quad_base_0_0_tx_function" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_system_gt_quad_base_0_0_tx_function__xdcDup__3
   (out,
    gpo,
    GPI,
    Q,
    ch2_txrate,
    apb3clk,
    ch2_txprbssel,
    gpi,
    ch2_txmstreset,
    ch2_txmstdatapathreset,
    rrst,
    D);
  output [2:0]out;
  output [0:0]gpo;
  output [0:0]GPI;
  output [3:0]Q;
  input [7:0]ch2_txrate;
  input apb3clk;
  input [3:0]ch2_txprbssel;
  input [0:0]gpi;
  input ch2_txmstreset;
  input ch2_txmstdatapathreset;
  input rrst;
  input [3:0]D;

  wire \Command[0]_i_1__1_n_0 ;
  wire \Command[1]_i_1__1_n_0 ;
  wire \Command[2]_i_1__1_n_0 ;
  wire \Command[3]_i_1__1_n_0 ;
  wire \Command[3]_i_2__1_n_0 ;
  wire [3:0]D;
  wire [0:0]GPI;
  wire MSTTXRESET_r1;
  wire MSTTXRESET_r2;
  wire MSTTXRESET_sync;
  wire [3:0]Q;
  wire TXDATAPATHRESET_r1;
  wire TXDATAPATHRESET_r2;
  wire TXDATAPATHRESET_sync;
  wire TXLANEDESKEW_r1;
  wire TXLANEDESKEW_r2;
  wire TXLANEDESKEW_sync;
  wire [3:0]TXPRBSSEL_r1;
  wire [3:0]TXPRBSSEL_r2;
  wire [3:0]TXPRBSSEL_sync;
  wire TXPRERATECHANGE_r1;
  wire TXPRERATECHANGE_r2;
  wire TXPRERATECHANGE_sync;
  wire [7:0]TXRATE_r1;
  wire [7:0]TXRATE_r2;
  wire [7:0]TXRATE_sync;
  wire apb3clk;
  wire [4:0]arb_state;
  wire \arb_state[3]_i_2__1_n_0 ;
  wire \arb_state[3]_i_3_n_0 ;
  wire \arb_state_inferred__3/i__n_0 ;
  wire ch2_txmstdatapathreset;
  wire ch2_txmstreset;
  wire [3:0]ch2_txprbssel;
  wire [7:0]ch2_txrate;
  wire counter;
  wire \counter[0]_i_1__1_n_0 ;
  wire \counter[1]_i_1__1_n_0 ;
  wire \counter[2]_i_1__1_n_0 ;
  wire \counter[3]_i_1__1_n_0 ;
  wire \counter[4]_i_1__1_n_0 ;
  wire \counter[5]_i_1__1_n_0 ;
  wire \counter[6]_i_1__1_n_0 ;
  wire \counter[7]_i_2__1_n_0 ;
  wire \counter[7]_i_3__1_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire \counter_reg_n_0_[5] ;
  wire \counter_reg_n_0_[6] ;
  wire \counter_reg_n_0_[7] ;
  wire \en[0][0]_i_1__1_n_0 ;
  wire \en[0][1]_i_1__1_n_0 ;
  wire \en[10][0]_bret_i_1_n_0 ;
  wire \en[10][1]_i_1__1_n_0 ;
  wire \en[10][1]_i_2__1_n_0 ;
  wire \en[1][0]_i_1__1_n_0 ;
  wire \en[1][0]_i_2__1_n_0 ;
  wire \en[1][0]_i_2__1_n_1 ;
  wire \en[1][1]_i_1__5_n_0 ;
  wire \en[2][0]_i_1__1_n_0 ;
  wire \en[2][0]_i_2__1_n_0 ;
  wire \en[2][1]_i_1__5_n_0 ;
  wire \en[3][0]_i_1__1_n_0 ;
  wire \en[3][0]_i_2__1_n_0 ;
  wire \en[3][0]_i_3__1_n_0 ;
  wire \en[3][1]_i_1__5_n_0 ;
  wire \en[4][0]_i_1__1_n_0 ;
  wire \en[4][0]_i_2__1_n_0 ;
  wire \en[4][1]_i_1__1_n_0 ;
  wire \en[4][1]_i_2__1_n_0 ;
  wire \en[5][0]_i_1__1_n_0 ;
  wire \en[5][0]_i_2__1_n_0 ;
  wire \en[5][0]_i_3__1_n_0 ;
  wire \en[5][1]_i_1__1_n_0 ;
  wire \en[5][1]_i_2__5_n_0 ;
  wire \en[6][0]_i_1__1_n_0 ;
  wire \en[6][0]_i_2__1_n_0 ;
  wire \en[6][1]_i_1__1_n_0 ;
  wire \en[6][1]_i_2__1_n_0 ;
  wire \en[7][0]_i_1__1_n_0 ;
  wire \en[7][0]_i_2__2_n_0 ;
  wire \en[7][1]_i_1__1_n_0 ;
  wire \en[7][1]_i_2__1_n_0 ;
  wire \en[8][0]_i_1__1_n_0 ;
  wire \en[8][0]_i_2__1_n_0 ;
  wire \en[8][0]_i_2__1_n_1 ;
  wire \en[8][0]_i_3__1_n_0 ;
  wire \en[8][1]_i_1__1_n_0 ;
  wire \en[8][1]_i_2__1_n_0 ;
  wire \en[9][0]_i_1__1_n_0 ;
  wire \en[9][0]_i_2__1_n_0 ;
  wire \en[9][0]_i_3__1_n_0 ;
  wire \en[9][0]_i_6_n_0 ;
  wire \en[9][0]_i_7_n_0 ;
  wire \en[9][0]_i_8_n_0 ;
  wire \en[9][1]_i_1__1_n_0 ;
  wire \en[9][1]_i_2__1_n_0 ;
  wire [1:0]en__3;
  wire [1:0]\en_reg[0]_3 ;
  wire \en_reg[10][0]_bret__0_n_0 ;
  wire \en_reg[10][0]_bret_n_0 ;
  wire [1:0]\en_reg[1]_2 ;
  wire [1:0]\en_reg[5]_1 ;
  wire [1:0]\en_reg[6]_0 ;
  wire \en_reg_n_0_[10][1] ;
  wire \en_reg_n_0_[2][0] ;
  wire \en_reg_n_0_[2][1] ;
  wire \en_reg_n_0_[3][0] ;
  wire \en_reg_n_0_[3][1] ;
  wire \en_reg_n_0_[4][0] ;
  wire \en_reg_n_0_[4][1] ;
  wire \en_reg_n_0_[7][0] ;
  wire \en_reg_n_0_[7][1] ;
  wire \en_reg_n_0_[8][0] ;
  wire \en_reg_n_0_[8][1] ;
  wire \en_reg_n_0_[9][0] ;
  wire \en_reg_n_0_[9][1] ;
  wire [0:0]gpi;
  wire gpi_5;
  wire gpi_i_1__1_n_0;
  wire [0:0]gpo;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [3:0]gpoFromGTsync_r;
  wire gpoFromGTsync_r1;
  wire gpoFromGTsync_r2;
  wire gpo_4;
  wire idx;
  wire idx1__1;
  wire \idx[0]_fret_i_1__1_n_0 ;
  wire \idx[0]_i_1__5_n_0 ;
  wire \idx[1]_fret__0_i_1__1_n_0 ;
  wire \idx[1]_fret__1_i_1__1_n_0 ;
  wire \idx[1]_fret_i_1__1_n_0 ;
  wire \idx[1]_i_1__1_n_0 ;
  wire \idx[1]_i_2__1_n_0 ;
  wire \idx[2]_i_1__1_n_0 ;
  wire \idx[3]_i_2__1_n_0 ;
  wire \idx[3]_i_3__1_n_0 ;
  wire \idx[3]_i_4__1_n_0 ;
  wire \idx[3]_i_6_n_0 ;
  wire \idx[3]_i_7_n_0 ;
  wire \idx_reg[0]_fret_n_0 ;
  wire \idx_reg[1]_fret__0_n_0 ;
  wire \idx_reg[1]_fret__1_n_0 ;
  wire \idx_reg[1]_fret_n_0 ;
  wire \idx_reg_n_0_[0] ;
  wire \idx_reg_n_0_[1] ;
  wire \idx_reg_n_0_[2] ;
  wire \idx_reg_n_0_[3] ;
  wire needService;
  wire needService_i_1__1_n_0;
  wire needService_i_2__1_n_0;
  wire needService_i_3__5_n_0;
  wire p_0_in;
  wire [1:0]p_0_in__0;
  wire [3:0]p_0_in__1;
  wire [4:0]p_0_in__2;
  wire [9:0]p_0_out;
  wire p_20_out__0;
  wire [9:1]request;
  wire rrst;
  wire txprbs_counter;
  wire \txprbs_counter[0]_i_1__1_n_0 ;
  wire \txprbs_counter[1]_i_1__1_n_0 ;
  wire \txprbs_counter[2]_i_1__1_n_0 ;
  wire \txprbs_counter[3]_i_2__1_n_0 ;
  wire \txprbs_counter[3]_i_3__1_n_0 ;
  wire \txprbs_counter[3]_i_4__1_n_0 ;
  wire [2:0]txprbs_counter__0;
  wire \txprbs_counter_reg_n_0_[3] ;
  wire [1:0]txprbs_state;
  wire txprbssel_en_r1;
  wire txprbssel_en_r10_n_0;
  wire txprbssel_en_r2;
  wire [3:0]txprbssel_r;
  wire \txprbssel_stable[3]_i_1__1_n_0 ;
  wire [3:0]txprbssel_stable__0;
  wire txrate_counter;
  wire \txrate_counter[0]_i_1__1_n_0 ;
  wire \txrate_counter[1]_i_1__1_n_0 ;
  wire \txrate_counter[2]_i_1__1_n_0 ;
  wire \txrate_counter[3]_i_2__1_n_0 ;
  wire [2:0]txrate_counter__0;
  wire \txrate_counter_reg_n_0_[3] ;
  wire txrate_is_zero__0;
  wire txrate_is_zero_i_1__1_n_0;
  wire txrate_is_zero_r1;
  wire txrate_is_zero_r2;
  wire [2:0]txrate_state;
  wire \txrate_state[1]_i_2__1_n_0 ;
  wire \txrate_state[1]_i_3__1_n_0 ;
  wire \txrate_state[1]_i_4__1_n_0 ;
  wire \txrate_state[2]_i_1__1_n_0 ;
  wire \txrate_state[3]_i_2__1_n_0 ;
  wire \txrate_state[3]_i_3__1_n_0 ;
  wire \txrate_state_reg_n_0_[3] ;

  assign out[2:0] = gpoFromGTsync_r[2:0];
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[0]_i_1__1 
       (.I0(\arb_state[3]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\Command[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[1]_i_1__1 
       (.I0(\arb_state[3]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\Command[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Command[2]_i_1__1 
       (.I0(\arb_state[3]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .O(\Command[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \Command[3]_i_1__1 
       (.I0(\idx[3]_i_3__1_n_0 ),
        .I1(arb_state[0]),
        .I2(arb_state[4]),
        .I3(arb_state[1]),
        .O(\Command[3]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Command[3]_i_2__1 
       (.I0(\arb_state[3]_i_2__1_n_0 ),
        .I1(\idx_reg_n_0_[3] ),
        .O(\Command[3]_i_2__1_n_0 ));
  FDRE \Command_reg[0] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(rrst));
  FDRE \Command_reg[1] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(rrst));
  FDRE \Command_reg[2] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(rrst));
  FDRE \Command_reg[3] 
       (.C(apb3clk),
        .CE(\Command[3]_i_1__1_n_0 ),
        .D(\Command[3]_i_2__1_n_0 ),
        .Q(Q[3]),
        .R(rrst));
  FDRE MSTTXRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_sync),
        .Q(MSTTXRESET_r1),
        .R(rrst));
  FDRE MSTTXRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(MSTTXRESET_r1),
        .Q(MSTTXRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__142 MSTTXRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(MSTTXRESET_sync),
        .src_rst(ch2_txmstreset));
  FDRE TXDATAPATHRESET_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_sync),
        .Q(TXDATAPATHRESET_r1),
        .R(rrst));
  FDRE TXDATAPATHRESET_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXDATAPATHRESET_r1),
        .Q(TXDATAPATHRESET_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__143 TXDATAPATHRESET_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXDATAPATHRESET_sync),
        .src_rst(ch2_txmstdatapathreset));
  FDRE TXLANEDESKEW_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_sync),
        .Q(TXLANEDESKEW_r1),
        .R(rrst));
  FDRE TXLANEDESKEW_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXLANEDESKEW_r1),
        .Q(TXLANEDESKEW_r2),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__144 TXLANEDESKEW_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXLANEDESKEW_sync),
        .src_rst(1'b0));
  FDRE \TXPRBSSEL_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[0]),
        .Q(TXPRBSSEL_r1[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[1]),
        .Q(TXPRBSSEL_r1[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[2]),
        .Q(TXPRBSSEL_r1[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_sync[3]),
        .Q(TXPRBSSEL_r1[3]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[0]),
        .Q(TXPRBSSEL_r2[0]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[1]),
        .Q(TXPRBSSEL_r2[1]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[2]),
        .Q(TXPRBSSEL_r2[2]),
        .R(rrst));
  FDRE \TXPRBSSEL_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRBSSEL_r1[3]),
        .Q(TXPRBSSEL_r2[3]),
        .R(rrst));
  FDRE TXPRERATECHANGE_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_sync),
        .Q(TXPRERATECHANGE_r1),
        .R(rrst));
  FDRE TXPRERATECHANGE_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXPRERATECHANGE_r1),
        .Q(TXPRERATECHANGE_r2),
        .R(rrst));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__10 TXPRERATECHANGE_xpm_internal_sync
       (.dest_clk(apb3clk),
        .dest_rst(TXPRERATECHANGE_sync),
        .src_rst(gpi));
  FDRE \TXRATE_r1_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[0]),
        .Q(TXRATE_r1[0]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[1]),
        .Q(TXRATE_r1[1]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[2]),
        .Q(TXRATE_r1[2]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[3]),
        .Q(TXRATE_r1[3]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[4]),
        .Q(TXRATE_r1[4]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[5]),
        .Q(TXRATE_r1[5]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[6]),
        .Q(TXRATE_r1[6]),
        .R(rrst));
  FDRE \TXRATE_r1_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_sync[7]),
        .Q(TXRATE_r1[7]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[0]),
        .Q(TXRATE_r2[0]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[1]),
        .Q(TXRATE_r2[1]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[2]),
        .Q(TXRATE_r2[2]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[3]),
        .Q(TXRATE_r2[3]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[4]),
        .Q(TXRATE_r2[4]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[5]),
        .Q(TXRATE_r2[5]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[6]),
        .Q(TXRATE_r2[6]),
        .R(rrst));
  FDRE \TXRATE_r2_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(TXRATE_r1[7]),
        .Q(TXRATE_r2[7]),
        .R(rrst));
  LUT2 #(
    .INIT(4'hB)) 
    \arb_state[0]_i_1__1 
       (.I0(arb_state[4]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[0]));
  LUT5 #(
    .INIT(32'h8080F080)) 
    \arb_state[1]_i_1__1 
       (.I0(\arb_state[3]_i_2__1_n_0 ),
        .I1(arb_state[0]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .I3(arb_state[1]),
        .I4(gpoFromGTsync_r[3]),
        .O(p_0_in__2[1]));
  LUT4 #(
    .INIT(16'h8880)) 
    \arb_state[2]_i_1__1 
       (.I0(gpoFromGTsync_r[3]),
        .I1(\arb_state_inferred__3/i__n_0 ),
        .I2(arb_state[2]),
        .I3(arb_state[1]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \arb_state[3]_i_1__1 
       (.I0(\arb_state_inferred__3/i__n_0 ),
        .I1(arb_state[0]),
        .I2(\arb_state[3]_i_2__1_n_0 ),
        .I3(\arb_state[3]_i_3_n_0 ),
        .O(p_0_in__2[3]));
  LUT2 #(
    .INIT(4'hE)) 
    \arb_state[3]_i_2__1 
       (.I0(en__3[1]),
        .I1(en__3[0]),
        .O(\arb_state[3]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \arb_state[3]_i_3 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(gpoFromGTsync_r[3]),
        .I3(arb_state[2]),
        .O(\arb_state[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_state[4]_i_1__1 
       (.I0(\counter_reg_n_0_[7] ),
        .I1(arb_state[3]),
        .I2(\arb_state_inferred__3/i__n_0 ),
        .O(p_0_in__2[4]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \arb_state_inferred__3/i_ 
       (.I0(arb_state[0]),
        .I1(arb_state[1]),
        .I2(arb_state[2]),
        .I3(arb_state[3]),
        .I4(arb_state[4]),
        .O(\arb_state_inferred__3/i__n_0 ));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[0]),
        .Q(arb_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[1]),
        .Q(arb_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[2]),
        .Q(arb_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[3]),
        .Q(arb_state[3]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "ARB_START:00001,ARB_WAIT:00010,ARB_REPORT:00100,ARB_WAIT_NXT_REQ:01000,ARB_INC:10000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__2[4]),
        .Q(arb_state[4]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \counter[0]_i_1__1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .O(\counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__1 
       (.I0(arb_state[3]),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .O(\counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[2]_i_1__1 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[2] ),
        .O(\counter[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[3]_i_1__1 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[1] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \counter[4]_i_1__1 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .I4(arb_state[3]),
        .I5(\counter_reg_n_0_[4] ),
        .O(\counter[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \counter[5]_i_1__1 
       (.I0(\counter[7]_i_3__1_n_0 ),
        .I1(arb_state[3]),
        .I2(\counter_reg_n_0_[5] ),
        .O(\counter[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \counter[6]_i_1__1 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__1_n_0 ),
        .I2(arb_state[3]),
        .I3(\counter_reg_n_0_[6] ),
        .O(\counter[6]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h00010006)) 
    \counter[7]_i_1__1 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .I2(arb_state[1]),
        .I3(arb_state[4]),
        .I4(arb_state[0]),
        .O(counter));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \counter[7]_i_2__1 
       (.I0(\counter_reg_n_0_[5] ),
        .I1(\counter[7]_i_3__1_n_0 ),
        .I2(\counter_reg_n_0_[6] ),
        .I3(arb_state[3]),
        .I4(\counter_reg_n_0_[7] ),
        .O(\counter[7]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter[7]_i_3__1 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[7]_i_3__1_n_0 ));
  FDRE \counter_reg[0] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[0]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[0] ),
        .R(rrst));
  FDRE \counter_reg[1] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[1]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[1] ),
        .R(rrst));
  FDRE \counter_reg[2] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[2]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[2] ),
        .R(rrst));
  FDRE \counter_reg[3] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[3]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[3] ),
        .R(rrst));
  FDRE \counter_reg[4] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[4]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[4] ),
        .R(rrst));
  FDRE \counter_reg[5] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[5]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[5] ),
        .R(rrst));
  FDRE \counter_reg[6] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[6]_i_1__1_n_0 ),
        .Q(\counter_reg_n_0_[6] ),
        .R(rrst));
  FDRE \counter_reg[7] 
       (.C(apb3clk),
        .CE(counter),
        .D(\counter[7]_i_2__1_n_0 ),
        .Q(\counter_reg_n_0_[7] ),
        .R(rrst));
  LUT2 #(
    .INIT(4'h1)) 
    \en[0][0]_i_1__1 
       (.I0(\en[8][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .O(\en[0][0]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \en[0][1]_i_1__1 
       (.I0(\en[8][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(\en_reg[0]_3 [1]),
        .O(\en[0][1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[10][0]_bret_i_1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[10][0]_bret_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \en[10][1]_i_1__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[1] ),
        .I3(\idx_reg_n_0_[0] ),
        .I4(\idx_reg_n_0_[2] ),
        .I5(p_0_in),
        .O(\en[10][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFFFF00000000)) 
    \en[10][1]_i_2__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[0] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(\idx[3]_i_4__1_n_0 ),
        .O(\en[10][1]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \en[10][1]_i_3__1 
       (.I0(gpoFromGTsync_r1),
        .I1(gpoFromGTsync_r2),
        .O(p_20_out__0));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[1][0]_i_1__1 
       (.I0(\en[9][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[1]),
        .O(\en[1][0]_i_1__1_n_0 ));
  LUT6_2 #(
    .INIT(64'hFFFFFFFFFFF8FFFF)) 
    \en[1][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[9][0]_i_3__1_n_0 ),
        .O5(\en[1][0]_i_2__1_n_0 ),
        .O6(\en[1][0]_i_2__1_n_1 ));
  LUT5 #(
    .INIT(32'hEEEEE000)) 
    \en[1][1]_i_1__5 
       (.I0(\en[9][0]_i_3__1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[1]),
        .I3(\en_reg[1]_2 [0]),
        .I4(\en_reg[1]_2 [1]),
        .O(\en[1][1]_i_1__5_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \en[2][0]_i_1__1 
       (.I0(\en[10][0]_bret_i_1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[2]),
        .O(\en[2][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF8FF)) 
    \en[2][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_20_out__0),
        .I4(\idx_reg_n_0_[3] ),
        .I5(\en[10][0]_bret_i_1_n_0 ),
        .O(\en[2][0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hEEEEE000)) 
    \en[2][1]_i_1__5 
       (.I0(\en[10][0]_bret_i_1_n_0 ),
        .I1(\en[3][0]_i_3__1_n_0 ),
        .I2(request[2]),
        .I3(\en_reg_n_0_[2][0] ),
        .I4(\en_reg_n_0_[2][1] ),
        .O(\en[2][1]_i_1__5_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \en[3][0]_i_1__1 
       (.I0(request[3]),
        .I1(\idx[3]_i_6_n_0 ),
        .I2(\en[3][0]_i_3__1_n_0 ),
        .O(\en[3][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF8FF)) 
    \en[3][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(p_20_out__0),
        .I4(\idx_reg_n_0_[3] ),
        .I5(\idx[3]_i_6_n_0 ),
        .O(\en[3][0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \en[3][0]_i_3__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(p_20_out__0),
        .O(\en[3][0]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'hFCFCA800)) 
    \en[3][1]_i_1__5 
       (.I0(request[3]),
        .I1(\idx[3]_i_6_n_0 ),
        .I2(\en[3][0]_i_3__1_n_0 ),
        .I3(\en_reg_n_0_[3][0] ),
        .I4(\en_reg_n_0_[3][1] ),
        .O(\en[3][1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[4][0]_i_1__1 
       (.I0(\en[8][0]_i_3__1_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[4]),
        .O(\en[4][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \en[4][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[8][0]_i_3__1_n_0 ),
        .O(\en[4][0]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[4][1]_i_1__1 
       (.I0(\en[4][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[4][1] ),
        .I2(\en[4][1]_i_2__1_n_0 ),
        .O(\en[4][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFDFFFDFFFDF0000)) 
    \en[4][1]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(\en[8][0]_i_3__1_n_0 ),
        .I4(\en_reg_n_0_[4][0] ),
        .I5(\en_reg_n_0_[4][1] ),
        .O(\en[4][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    \en[5][0]_i_1__1 
       (.I0(\idx_reg_n_0_[3] ),
        .I1(p_20_out__0),
        .I2(\en[5][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(request[5]),
        .O(\en[5][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \en[5][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[9][0]_i_3__1_n_0 ),
        .O(\en[5][0]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \en[5][0]_i_3__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[5][0]_i_3__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[5][1]_i_1__1 
       (.I0(\en[5][0]_i_1__1_n_0 ),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en[5][1]_i_2__5_n_0 ),
        .O(\en[5][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEE0E)) 
    \en[5][1]_i_2__5 
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(p_20_out__0),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[3] ),
        .I5(\en[5][0]_i_3__1_n_0 ),
        .O(\en[5][1]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[6][0]_i_1__1 
       (.I0(\en[10][0]_bret_i_1_n_0 ),
        .I1(p_20_out__0),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[6]),
        .O(\en[6][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \en[6][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[10][0]_bret_i_1_n_0 ),
        .O(\en[6][0]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[6][1]_i_1__1 
       (.I0(\en[6][0]_i_1__1_n_0 ),
        .I1(\en_reg[6]_0 [1]),
        .I2(\en[6][1]_i_2__1_n_0 ),
        .O(\en[6][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFDFFFDFFFDF0000)) 
    \en[6][1]_i_2__1 
       (.I0(\idx_reg_n_0_[2] ),
        .I1(\idx_reg_n_0_[3] ),
        .I2(p_20_out__0),
        .I3(\en[10][0]_bret_i_1_n_0 ),
        .I4(\en_reg[6]_0 [0]),
        .I5(\en_reg[6]_0 [1]),
        .O(\en[6][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \en[7][0]_i_1__1 
       (.I0(\idx[3]_i_6_n_0 ),
        .I1(\idx_reg_n_0_[2] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(p_20_out__0),
        .I4(request[7]),
        .O(\en[7][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8FFFFFFFFFF)) 
    \en[7][0]_i_2__2 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx[3]_i_6_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[3] ),
        .I5(p_20_out__0),
        .O(\en[7][0]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[7][1]_i_1__1 
       (.I0(\en[7][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[7][1] ),
        .I2(\en[7][1]_i_2__1_n_0 ),
        .O(\en[7][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFF7FFF70000)) 
    \en[7][1]_i_2__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en[5][0]_i_3__1_n_0 ),
        .I4(\en_reg_n_0_[7][0] ),
        .I5(\en_reg_n_0_[7][1] ),
        .O(\en[7][1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \en[8][0]_i_1__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[0] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[1] ),
        .I5(request[8]),
        .O(\en[8][0]_i_1__1_n_0 ));
  LUT6_2 #(
    .INIT(64'hFFFFFFFFF8FFFFFF)) 
    \en[8][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[8][0]_i_3__1_n_0 ),
        .O5(\en[8][0]_i_2__1_n_0 ),
        .O6(\en[8][0]_i_2__1_n_1 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \en[8][0]_i_3__1 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\en[8][0]_i_3__1_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[8][1]_i_1__1 
       (.I0(\en[8][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[8][1] ),
        .I2(\en[8][1]_i_2__1_n_0 ),
        .O(\en[8][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFF7FFF70000)) 
    \en[8][1]_i_2__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\en[8][0]_i_3__1_n_0 ),
        .I4(\en_reg_n_0_[8][0] ),
        .I5(\en_reg_n_0_[8][1] ),
        .O(\en[8][1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \en[9][0]_i_1__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\en[9][0]_i_3__1_n_0 ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(request[9]),
        .O(\en[9][0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8FFFFFF)) 
    \en[9][0]_i_2__1 
       (.I0(en__3[0]),
        .I1(en__3[1]),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\idx_reg_n_0_[3] ),
        .I4(p_20_out__0),
        .I5(\en[9][0]_i_3__1_n_0 ),
        .O(\en[9][0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \en[9][0]_i_3__1 
       (.I0(\idx_reg_n_0_[1] ),
        .I1(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \en[9][0]_i_4 
       (.I0(\en[9][0]_i_6_n_0 ),
        .I1(\en[9][0]_i_7_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\en[9][0]_i_8_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\idx[3]_i_7_n_0 ),
        .O(en__3[0]));
  LUT6 #(
    .INIT(64'hFCFCFA0AFC0CFA0A)) 
    \en[9][0]_i_5 
       (.I0(\idx_reg[1]_fret__1_n_0 ),
        .I1(\idx_reg[1]_fret__0_n_0 ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg[0]_fret_n_0 ),
        .I4(\idx_reg[1]_fret_n_0 ),
        .I5(\en_reg_n_0_[10][1] ),
        .O(en__3[1]));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \en[9][0]_i_6 
       (.I0(\en_reg_n_0_[2][0] ),
        .I1(\en_reg[0]_3 [0]),
        .I2(\en_reg_n_0_[3][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[1]_2 [0]),
        .O(\en[9][0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \en[9][0]_i_7 
       (.I0(\en_reg[6]_0 [0]),
        .I1(\en_reg_n_0_[4][0] ),
        .I2(\en_reg_n_0_[7][0] ),
        .I3(\idx_reg_n_0_[1] ),
        .I4(\idx_reg_n_0_[0] ),
        .I5(\en_reg[5]_1 [0]),
        .O(\en[9][0]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \en[9][0]_i_8 
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx_reg[1]_fret_n_0 ),
        .I2(\en_reg_n_0_[8][0] ),
        .I3(\idx_reg_n_0_[0] ),
        .O(\en[9][0]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'hE4)) 
    \en[9][1]_i_1__1 
       (.I0(\en[9][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__1_n_0 ),
        .O(\en[9][1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF7FFF7FFF70000)) 
    \en[9][1]_i_2__1 
       (.I0(p_20_out__0),
        .I1(\idx_reg_n_0_[3] ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(\en[9][0]_i_3__1_n_0 ),
        .I4(\en_reg_n_0_[9][0] ),
        .I5(\en_reg_n_0_[9][1] ),
        .O(\en[9][1]_i_2__1_n_0 ));
  FDRE \en_reg[0][0] 
       (.C(apb3clk),
        .CE(\en[0][0]_i_1__1_n_0 ),
        .D(\en[1][0]_i_2__1_n_0 ),
        .Q(\en_reg[0]_3 [0]),
        .R(rrst));
  FDRE \en_reg[0][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[0][1]_i_1__1_n_0 ),
        .Q(\en_reg[0]_3 [1]),
        .R(rrst));
  (* rciTaggedInst = "y" *) 
  (* retimedInstOriginalName = "inst/ch2_tx_function_inst/en_reg[10][0]" *) 
  FDRE \en_reg[10][0]_bret 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__1_n_0 ),
        .D(\en[10][0]_bret_i_1_n_0 ),
        .Q(\en_reg[10][0]_bret_n_0 ),
        .R(rrst));
  (* rciTaggedInst = "y" *) 
  (* retimedInstOriginalName = "inst/ch2_tx_function_inst/en_reg[10][0]" *) 
  FDRE \en_reg[10][0]_bret__0 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__1_n_0 ),
        .D(\en[8][0]_i_2__1_n_0 ),
        .Q(\en_reg[10][0]_bret__0_n_0 ),
        .R(rrst));
  FDRE \en_reg[10][1] 
       (.C(apb3clk),
        .CE(\en[10][1]_i_1__1_n_0 ),
        .D(\en[10][1]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[10][1] ),
        .R(rrst));
  FDRE \en_reg[1][0] 
       (.C(apb3clk),
        .CE(\en[1][0]_i_1__1_n_0 ),
        .D(\en[1][0]_i_2__1_n_1 ),
        .Q(\en_reg[1]_2 [0]),
        .R(rrst));
  FDRE \en_reg[1][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[1][1]_i_1__5_n_0 ),
        .Q(\en_reg[1]_2 [1]),
        .R(rrst));
  FDRE \en_reg[2][0] 
       (.C(apb3clk),
        .CE(\en[2][0]_i_1__1_n_0 ),
        .D(\en[2][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[2][0] ),
        .R(rrst));
  FDRE \en_reg[2][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[2][1]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[2][1] ),
        .R(rrst));
  FDRE \en_reg[3][0] 
       (.C(apb3clk),
        .CE(\en[3][0]_i_1__1_n_0 ),
        .D(\en[3][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[3][0] ),
        .R(rrst));
  FDRE \en_reg[3][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[3][1]_i_1__5_n_0 ),
        .Q(\en_reg_n_0_[3][1] ),
        .R(rrst));
  FDRE \en_reg[4][0] 
       (.C(apb3clk),
        .CE(\en[4][0]_i_1__1_n_0 ),
        .D(\en[4][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[4][0] ),
        .R(rrst));
  FDRE \en_reg[4][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[4][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[4][1] ),
        .R(rrst));
  FDRE \en_reg[5][0] 
       (.C(apb3clk),
        .CE(\en[5][0]_i_1__1_n_0 ),
        .D(\en[5][0]_i_2__1_n_0 ),
        .Q(\en_reg[5]_1 [0]),
        .R(rrst));
  FDRE \en_reg[5][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[5][1]_i_1__1_n_0 ),
        .Q(\en_reg[5]_1 [1]),
        .R(rrst));
  FDRE \en_reg[6][0] 
       (.C(apb3clk),
        .CE(\en[6][0]_i_1__1_n_0 ),
        .D(\en[6][0]_i_2__1_n_0 ),
        .Q(\en_reg[6]_0 [0]),
        .R(rrst));
  FDRE \en_reg[6][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[6][1]_i_1__1_n_0 ),
        .Q(\en_reg[6]_0 [1]),
        .R(rrst));
  FDRE \en_reg[7][0] 
       (.C(apb3clk),
        .CE(\en[7][0]_i_1__1_n_0 ),
        .D(\en[7][0]_i_2__2_n_0 ),
        .Q(\en_reg_n_0_[7][0] ),
        .R(rrst));
  FDRE \en_reg[7][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[7][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[7][1] ),
        .R(rrst));
  FDRE \en_reg[8][0] 
       (.C(apb3clk),
        .CE(\en[8][0]_i_1__1_n_0 ),
        .D(\en[8][0]_i_2__1_n_1 ),
        .Q(\en_reg_n_0_[8][0] ),
        .R(rrst));
  FDRE \en_reg[8][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[8][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[8][1] ),
        .R(rrst));
  FDRE \en_reg[9][0] 
       (.C(apb3clk),
        .CE(\en[9][0]_i_1__1_n_0 ),
        .D(\en[9][0]_i_2__1_n_0 ),
        .Q(\en_reg_n_0_[9][0] ),
        .R(rrst));
  FDRE \en_reg[9][1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\en[9][1]_i_1__1_n_0 ),
        .Q(\en_reg_n_0_[9][1] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hA0A3FFFFA0A30000)) 
    gpi_i_1__1
       (.I0(\arb_state[3]_i_2__1_n_0 ),
        .I1(\idx[3]_i_3__1_n_0 ),
        .I2(arb_state[0]),
        .I3(arb_state[4]),
        .I4(gpi_5),
        .I5(GPI),
        .O(gpi_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gpi_i_2__1
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .I2(arb_state[4]),
        .I3(arb_state[0]),
        .I4(arb_state[1]),
        .O(gpi_5));
  FDRE gpi_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpi_i_1__1_n_0),
        .Q(GPI),
        .R(rrst));
  FDRE gpoFromGTsync_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r[3]),
        .Q(gpoFromGTsync_r1),
        .R(rrst));
  FDRE gpoFromGTsync_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpoFromGTsync_r1),
        .Q(gpoFromGTsync_r2),
        .R(rrst));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(gpoFromGTsync_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(gpoFromGTsync_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(gpoFromGTsync_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \gpoFromGTsync_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(gpoFromGTsync_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF1F0F0F0F0F0D0F0)) 
    gpo_i_1__1
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(gpo),
        .I3(gpoFromGTsync_r[3]),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(gpo_4));
  FDRE gpo_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(gpo_4),
        .Q(gpo),
        .R(rrst));
  LUT6 #(
    .INIT(64'h00E400E400FF0000)) 
    \idx[0]_fret_i_1__1 
       (.I0(\en[9][0]_i_1__1_n_0 ),
        .I1(\en_reg_n_0_[9][1] ),
        .I2(\en[9][1]_i_2__1_n_0 ),
        .I3(\idx[1]_fret_i_1__1_n_0 ),
        .I4(\en[8][1]_i_1__1_n_0 ),
        .I5(\idx[0]_i_1__5_n_0 ),
        .O(\idx[0]_fret_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h10AA)) 
    \idx[0]_i_1__5 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx[3]_i_4__1_n_0 ),
        .I2(idx1__1),
        .I3(idx),
        .O(\idx[0]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \idx[1]_fret__0_i_1__1 
       (.I0(\en[6][1]_i_1__1_n_0 ),
        .I1(\en[4][1]_i_1__1_n_0 ),
        .I2(\en[7][1]_i_1__1_n_0 ),
        .I3(\idx[1]_i_1__1_n_0 ),
        .I4(\idx[0]_i_1__5_n_0 ),
        .I5(\en[5][1]_i_1__1_n_0 ),
        .O(\idx[1]_fret__0_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \idx[1]_fret__1_i_1__1 
       (.I0(\en[2][1]_i_1__5_n_0 ),
        .I1(\en[0][1]_i_1__1_n_0 ),
        .I2(\en[3][1]_i_1__5_n_0 ),
        .I3(\idx[1]_i_1__1_n_0 ),
        .I4(\idx[0]_i_1__5_n_0 ),
        .I5(\en[1][1]_i_1__5_n_0 ),
        .O(\idx[1]_fret__1_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hACFFAC00)) 
    \idx[1]_fret_i_1__1 
       (.I0(\idx[1]_i_2__1_n_0 ),
        .I1(\idx[2]_i_1__1_n_0 ),
        .I2(\idx[3]_i_2__1_n_0 ),
        .I3(idx),
        .I4(\idx_reg[1]_fret_n_0 ),
        .O(\idx[1]_fret_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hE4)) 
    \idx[1]_i_1__1 
       (.I0(idx),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx[1]_i_2__1_n_0 ),
        .O(\idx[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    \idx[1]_i_2__1 
       (.I0(\idx[3]_i_4__1_n_0 ),
        .I1(\en[9][0]_i_3__1_n_0 ),
        .I2(\en[10][0]_bret_i_1_n_0 ),
        .I3(idx1__1),
        .O(\idx[1]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h4100)) 
    \idx[2]_i_1__1 
       (.I0(\idx[3]_i_4__1_n_0 ),
        .I1(\idx[3]_i_6_n_0 ),
        .I2(\idx_reg_n_0_[2] ),
        .I3(idx1__1),
        .O(\idx[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \idx[3]_i_1__1 
       (.I0(arb_state[0]),
        .I1(arb_state[4]),
        .I2(arb_state[1]),
        .I3(\idx[3]_i_3__1_n_0 ),
        .O(idx));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'hEAAEEAEA)) 
    \idx[3]_i_2__1 
       (.I0(\idx[3]_i_4__1_n_0 ),
        .I1(idx1__1),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx[3]_i_6_n_0 ),
        .I4(\idx_reg_n_0_[2] ),
        .O(\idx[3]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_3__1 
       (.I0(arb_state[2]),
        .I1(arb_state[3]),
        .O(\idx[3]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_4__1 
       (.I0(\idx[3]_i_7_n_0 ),
        .I1(\en_reg_n_0_[10][1] ),
        .O(\idx[3]_i_4__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT5 #(
    .INIT(32'hAAAAAA2A)) 
    \idx[3]_i_5__1 
       (.I0(needService),
        .I1(\idx_reg_n_0_[1] ),
        .I2(\idx_reg_n_0_[3] ),
        .I3(\idx_reg_n_0_[2] ),
        .I4(\idx_reg_n_0_[0] ),
        .O(idx1__1));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \idx[3]_i_6 
       (.I0(\idx_reg_n_0_[0] ),
        .I1(\idx_reg_n_0_[1] ),
        .O(\idx[3]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \idx[3]_i_7 
       (.I0(\en_reg[10][0]_bret__0_n_0 ),
        .I1(\en_reg[10][0]_bret_n_0 ),
        .O(\idx[3]_i_7_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_i_1__5_n_0 ),
        .Q(\idx_reg_n_0_[0] ),
        .R(rrst));
  FDRE \idx_reg[0]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[0]_fret_i_1__1_n_0 ),
        .Q(\idx_reg[0]_fret_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_i_1__1_n_0 ),
        .Q(\idx_reg_n_0_[1] ),
        .R(rrst));
  FDRE \idx_reg[1]_fret 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret_i_1__1_n_0 ),
        .Q(\idx_reg[1]_fret_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__0 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__0_i_1__1_n_0 ),
        .Q(\idx_reg[1]_fret__0_n_0 ),
        .R(rrst));
  FDRE \idx_reg[1]_fret__1 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\idx[1]_fret__1_i_1__1_n_0 ),
        .Q(\idx_reg[1]_fret__1_n_0 ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[2] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[2]_i_1__1_n_0 ),
        .Q(\idx_reg_n_0_[2] ),
        .R(rrst));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[3] 
       (.C(apb3clk),
        .CE(idx),
        .D(\idx[3]_i_2__1_n_0 ),
        .Q(\idx_reg_n_0_[3] ),
        .R(rrst));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_1__1
       (.I0(\en_reg_n_0_[8][0] ),
        .I1(\en_reg_n_0_[3][0] ),
        .I2(\en_reg[6]_0 [1]),
        .I3(\en_reg[6]_0 [0]),
        .I4(needService_i_2__1_n_0),
        .I5(needService_i_3__5_n_0),
        .O(needService_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    needService_i_2__1
       (.I0(\en_reg_n_0_[9][0] ),
        .I1(\idx[3]_i_7_n_0 ),
        .I2(\en_reg[0]_3 [0]),
        .I3(\en_reg[0]_3 [1]),
        .I4(\en_reg_n_0_[7][0] ),
        .O(needService_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    needService_i_3__5
       (.I0(\en_reg[5]_1 [0]),
        .I1(\en_reg[5]_1 [1]),
        .I2(\en_reg_n_0_[2][0] ),
        .I3(\en_reg[1]_2 [0]),
        .I4(\en_reg[1]_2 [1]),
        .I5(\en_reg_n_0_[4][0] ),
        .O(needService_i_3__5_n_0));
  FDRE needService_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(needService_i_1__1_n_0),
        .Q(needService),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \request[10]_i_1 
       (.I0(txrate_is_zero_r1),
        .I1(txrate_is_zero_r2),
        .O(p_0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[1]_i_1 
       (.I0(MSTTXRESET_r1),
        .I1(MSTTXRESET_r2),
        .O(p_0_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[2]_i_1 
       (.I0(MSTTXRESET_r2),
        .I1(MSTTXRESET_r1),
        .O(p_0_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[3]_i_1 
       (.I0(TXPRERATECHANGE_r1),
        .I1(TXPRERATECHANGE_r2),
        .O(p_0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[4]_i_1 
       (.I0(TXPRERATECHANGE_r2),
        .I1(TXPRERATECHANGE_r1),
        .O(p_0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[5]_i_1 
       (.I0(TXDATAPATHRESET_r1),
        .I1(TXDATAPATHRESET_r2),
        .O(p_0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[6]_i_1 
       (.I0(TXDATAPATHRESET_r2),
        .I1(TXDATAPATHRESET_r1),
        .O(p_0_out[5]));
  LUT2 #(
    .INIT(4'h2)) 
    \request[7]_i_1 
       (.I0(TXLANEDESKEW_r1),
        .I1(TXLANEDESKEW_r2),
        .O(p_0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[8]_i_1 
       (.I0(txprbssel_en_r1),
        .I1(txprbssel_en_r2),
        .O(p_0_out[7]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \request[9]_i_1 
       (.I0(txprbssel_en_r2),
        .I1(txprbssel_en_r1),
        .O(p_0_out[8]));
  FDRE \request_reg[10] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[9]),
        .Q(p_0_in),
        .R(rrst));
  FDRE \request_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(request[1]),
        .R(rrst));
  FDRE \request_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(request[2]),
        .R(rrst));
  FDRE \request_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[2]),
        .Q(request[3]),
        .R(rrst));
  FDRE \request_reg[4] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[3]),
        .Q(request[4]),
        .R(rrst));
  FDRE \request_reg[5] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[4]),
        .Q(request[5]),
        .R(rrst));
  FDRE \request_reg[6] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[5]),
        .Q(request[6]),
        .R(rrst));
  FDRE \request_reg[7] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[6]),
        .Q(request[7]),
        .R(rrst));
  FDRE \request_reg[8] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[7]),
        .Q(request[8]),
        .R(rrst));
  FDRE \request_reg[9] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_out[8]),
        .Q(request[9]),
        .R(rrst));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__138 \synch_vec_txprbssel[0].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[0]),
        .src_rst(ch2_txprbssel[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__139 \synch_vec_txprbssel[1].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[1]),
        .src_rst(ch2_txprbssel[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__140 \synch_vec_txprbssel[2].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[2]),
        .src_rst(ch2_txprbssel[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__141 \synch_vec_txprbssel[3].TXPRBS_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXPRBSSEL_sync[3]),
        .src_rst(ch2_txprbssel[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__130 \synch_vec_txrate[0].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[0]),
        .src_rst(ch2_txrate[0]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__131 \synch_vec_txrate[1].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[1]),
        .src_rst(ch2_txrate[1]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__132 \synch_vec_txrate[2].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[2]),
        .src_rst(ch2_txrate[2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__133 \synch_vec_txrate[3].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[3]),
        .src_rst(ch2_txrate[3]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__134 \synch_vec_txrate[4].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[4]),
        .src_rst(ch2_txrate[4]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__135 \synch_vec_txrate[5].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[5]),
        .src_rst(ch2_txrate[5]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__136 \synch_vec_txrate[6].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[6]),
        .src_rst(ch2_txrate[6]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__137 \synch_vec_txrate[7].TXRATE_xpm_internal_sync 
       (.dest_clk(apb3clk),
        .dest_rst(TXRATE_sync[7]),
        .src_rst(ch2_txrate[7]));
  LUT3 #(
    .INIT(8'h04)) 
    \txprbs_counter[0]_i_1__1 
       (.I0(txprbs_counter__0[0]),
        .I1(\txprbs_counter[3]_i_3__1_n_0 ),
        .I2(txprbs_state[1]),
        .O(\txprbs_counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT4 #(
    .INIT(16'h0060)) 
    \txprbs_counter[1]_i_1__1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(\txprbs_counter[3]_i_3__1_n_0 ),
        .I3(txprbs_state[1]),
        .O(\txprbs_counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT5 #(
    .INIT(32'h00007800)) 
    \txprbs_counter[2]_i_1__1 
       (.I0(txprbs_counter__0[0]),
        .I1(txprbs_counter__0[1]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter[3]_i_3__1_n_0 ),
        .I4(txprbs_state[1]),
        .O(\txprbs_counter[2]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \txprbs_counter[3]_i_1__1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .O(txprbs_counter));
  LUT6 #(
    .INIT(64'h000000007F800000)) 
    \txprbs_counter[3]_i_2__1 
       (.I0(txprbs_counter__0[1]),
        .I1(txprbs_counter__0[0]),
        .I2(txprbs_counter__0[2]),
        .I3(\txprbs_counter_reg_n_0_[3] ),
        .I4(\txprbs_counter[3]_i_3__1_n_0 ),
        .I5(txprbs_state[1]),
        .O(\txprbs_counter[3]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'h90)) 
    \txprbs_counter[3]_i_3__1 
       (.I0(TXPRBSSEL_r1[3]),
        .I1(TXPRBSSEL_r2[3]),
        .I2(\txprbs_counter[3]_i_4__1_n_0 ),
        .O(\txprbs_counter[3]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \txprbs_counter[3]_i_4__1 
       (.I0(TXPRBSSEL_r1[0]),
        .I1(TXPRBSSEL_r2[0]),
        .I2(TXPRBSSEL_r2[2]),
        .I3(TXPRBSSEL_r1[2]),
        .I4(TXPRBSSEL_r2[1]),
        .I5(TXPRBSSEL_r1[1]),
        .O(\txprbs_counter[3]_i_4__1_n_0 ));
  FDRE \txprbs_counter_reg[0] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[0]_i_1__1_n_0 ),
        .Q(txprbs_counter__0[0]),
        .R(rrst));
  FDRE \txprbs_counter_reg[1] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[1]_i_1__1_n_0 ),
        .Q(txprbs_counter__0[1]),
        .R(rrst));
  FDRE \txprbs_counter_reg[2] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[2]_i_1__1_n_0 ),
        .Q(txprbs_counter__0[2]),
        .R(rrst));
  FDRE \txprbs_counter_reg[3] 
       (.C(apb3clk),
        .CE(txprbs_counter),
        .D(\txprbs_counter[3]_i_2__1_n_0 ),
        .Q(\txprbs_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT3 #(
    .INIT(8'hDF)) 
    \txprbs_state[0]_i_1__1 
       (.I0(txprbs_state[0]),
        .I1(txprbs_state[1]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \txprbs_state[1]_i_1__1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .I2(\txprbs_counter_reg_n_0_[3] ),
        .O(p_0_in__0[1]));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txprbs_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txprbs_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXPRBS_START:01,TXPRBS_STATE1:10" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txprbs_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txprbs_state[1]),
        .R(rrst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    txprbssel_en_r10
       (.I0(txprbssel_r[1]),
        .I1(txprbssel_r[0]),
        .I2(txprbssel_r[3]),
        .I3(txprbssel_r[2]),
        .O(txprbssel_en_r10_n_0));
  FDRE txprbssel_en_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r10_n_0),
        .Q(txprbssel_en_r1),
        .R(rrst));
  FDRE txprbssel_en_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_en_r1),
        .Q(txprbssel_en_r2),
        .R(rrst));
  FDRE \txprbssel_r_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[0]),
        .Q(txprbssel_r[0]),
        .R(rrst));
  FDRE \txprbssel_r_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[1]),
        .Q(txprbssel_r[1]),
        .R(rrst));
  FDRE \txprbssel_r_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[2]),
        .Q(txprbssel_r[2]),
        .R(rrst));
  FDRE \txprbssel_r_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(txprbssel_stable__0[3]),
        .Q(txprbssel_r[3]),
        .R(rrst));
  LUT2 #(
    .INIT(4'h2)) 
    \txprbssel_stable[3]_i_1__1 
       (.I0(txprbs_state[1]),
        .I1(txprbs_state[0]),
        .O(\txprbssel_stable[3]_i_1__1_n_0 ));
  FDRE \txprbssel_stable_reg[0] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[0]),
        .Q(txprbssel_stable__0[0]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[1] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[1]),
        .Q(txprbssel_stable__0[1]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[2] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[2]),
        .Q(txprbssel_stable__0[2]),
        .R(rrst));
  FDRE \txprbssel_stable_reg[3] 
       (.C(apb3clk),
        .CE(\txprbssel_stable[3]_i_1__1_n_0 ),
        .D(TXPRBSSEL_r2[3]),
        .Q(txprbssel_stable__0[3]),
        .R(rrst));
  LUT3 #(
    .INIT(8'h02)) 
    \txrate_counter[0]_i_1__1 
       (.I0(txrate_state[2]),
        .I1(txrate_counter__0[0]),
        .I2(\txrate_state[3]_i_2__1_n_0 ),
        .O(\txrate_counter[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    \txrate_counter[1]_i_1__1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .O(\txrate_counter[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT5 #(
    .INIT(32'h02222000)) 
    \txrate_counter[2]_i_1__1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(txrate_counter__0[0]),
        .I3(txrate_counter__0[1]),
        .I4(txrate_counter__0[2]),
        .O(\txrate_counter[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0114)) 
    \txrate_counter[3]_i_1__1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(txrate_state[0]),
        .O(txrate_counter));
  LUT6 #(
    .INIT(64'h0222222220000000)) 
    \txrate_counter[3]_i_2__1 
       (.I0(txrate_state[2]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(txrate_counter__0[1]),
        .I3(txrate_counter__0[0]),
        .I4(txrate_counter__0[2]),
        .I5(\txrate_counter_reg_n_0_[3] ),
        .O(\txrate_counter[3]_i_2__1_n_0 ));
  FDRE \txrate_counter_reg[0] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[0]_i_1__1_n_0 ),
        .Q(txrate_counter__0[0]),
        .R(rrst));
  FDRE \txrate_counter_reg[1] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[1]_i_1__1_n_0 ),
        .Q(txrate_counter__0[1]),
        .R(rrst));
  FDRE \txrate_counter_reg[2] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[2]_i_1__1_n_0 ),
        .Q(txrate_counter__0[2]),
        .R(rrst));
  FDRE \txrate_counter_reg[3] 
       (.C(apb3clk),
        .CE(txrate_counter),
        .D(\txrate_counter[3]_i_2__1_n_0 ),
        .Q(\txrate_counter_reg_n_0_[3] ),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFFFB0010)) 
    txrate_is_zero_i_1__1
       (.I0(txrate_state[2]),
        .I1(txrate_state[0]),
        .I2(\txrate_state_reg_n_0_[3] ),
        .I3(txrate_state[1]),
        .I4(txrate_is_zero__0),
        .O(txrate_is_zero_i_1__1_n_0));
  FDRE txrate_is_zero_r1_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero__0),
        .Q(txrate_is_zero_r1),
        .R(rrst));
  FDRE txrate_is_zero_r2_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_r1),
        .Q(txrate_is_zero_r2),
        .R(rrst));
  FDRE txrate_is_zero_reg
       (.C(apb3clk),
        .CE(1'b1),
        .D(txrate_is_zero_i_1__1_n_0),
        .Q(txrate_is_zero__0),
        .R(rrst));
  LUT5 #(
    .INIT(32'hFEFFEBEB)) 
    \txrate_state[0]_i_1__1 
       (.I0(\txrate_state_reg_n_0_[3] ),
        .I1(txrate_state[1]),
        .I2(txrate_state[2]),
        .I3(\txrate_state[1]_i_2__1_n_0 ),
        .I4(txrate_state[0]),
        .O(p_0_in__1[0]));
  LUT6 #(
    .INIT(64'h0000000000303088)) 
    \txrate_state[1]_i_1__1 
       (.I0(\txrate_state[1]_i_2__1_n_0 ),
        .I1(txrate_state[0]),
        .I2(\txrate_state[3]_i_2__1_n_0 ),
        .I3(txrate_state[2]),
        .I4(txrate_state[1]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(p_0_in__1[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \txrate_state[1]_i_2__1 
       (.I0(TXRATE_r1[7]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r1[6]),
        .I3(TXRATE_r2[6]),
        .I4(\txrate_state[1]_i_3__1_n_0 ),
        .I5(\txrate_state[1]_i_4__1_n_0 ),
        .O(\txrate_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_3__1 
       (.I0(TXRATE_r2[3]),
        .I1(TXRATE_r1[3]),
        .I2(TXRATE_r1[5]),
        .I3(TXRATE_r2[5]),
        .I4(TXRATE_r1[4]),
        .I5(TXRATE_r2[4]),
        .O(\txrate_state[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \txrate_state[1]_i_4__1 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r1[0]),
        .I2(TXRATE_r1[2]),
        .I3(TXRATE_r2[2]),
        .I4(TXRATE_r1[1]),
        .I5(TXRATE_r2[1]),
        .O(\txrate_state[1]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000510)) 
    \txrate_state[2]_i_1__1 
       (.I0(\txrate_state[3]_i_2__1_n_0 ),
        .I1(\txrate_counter_reg_n_0_[3] ),
        .I2(txrate_state[2]),
        .I3(txrate_state[1]),
        .I4(txrate_state[0]),
        .I5(\txrate_state_reg_n_0_[3] ),
        .O(\txrate_state[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \txrate_state[3]_i_1__1 
       (.I0(txrate_state[1]),
        .I1(\txrate_state[3]_i_2__1_n_0 ),
        .I2(\txrate_counter_reg_n_0_[3] ),
        .I3(txrate_state[2]),
        .I4(\txrate_state_reg_n_0_[3] ),
        .I5(txrate_state[0]),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \txrate_state[3]_i_2__1 
       (.I0(TXRATE_r2[0]),
        .I1(TXRATE_r2[1]),
        .I2(TXRATE_r2[2]),
        .I3(TXRATE_r2[3]),
        .I4(\txrate_state[3]_i_3__1_n_0 ),
        .O(\txrate_state[3]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \txrate_state[3]_i_3__1 
       (.I0(TXRATE_r2[6]),
        .I1(TXRATE_r2[7]),
        .I2(TXRATE_r2[5]),
        .I3(TXRATE_r2[4]),
        .O(\txrate_state[3]_i_3__1_n_0 ));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \txrate_state_reg[0] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[0]),
        .Q(txrate_state[0]),
        .S(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[1] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[1]),
        .Q(txrate_state[1]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[2] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(\txrate_state[2]_i_1__1_n_0 ),
        .Q(txrate_state[2]),
        .R(rrst));
  (* FSM_ENCODED_STATES = "TXRATE_START:00001,TXRATE_STATE1:00010,TXRATE_STATE2:00100,TXRATE_STATE3:01000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \txrate_state_reg[3] 
       (.C(apb3clk),
        .CE(1'b1),
        .D(p_0_in__1[3]),
        .Q(\txrate_state_reg_n_0_[3] ),
        .R(rrst));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "1" *) 
(* INV_DEF_VAL = "1'b1" *) (* RST_ACTIVE_HIGH = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "ASYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* SIM_ASSERT_CHK = "0" *) 
(* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) 
(* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__32
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__33
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__34
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__35
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__36
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__37
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__38
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__39
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__40
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__41
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__42
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__43
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__44
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__45
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__46
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__47
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__48
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__49
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__50
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__51
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__52
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__53
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__54
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__55
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__56
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__57
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__58
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__59
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__60
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__61
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_single__62
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [2:0]syncstages_ff;

  assign dest_out = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* SIM_ASSERT_CHK = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__100
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__101
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__102
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__103
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__104
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__105
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__106
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__107
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__108
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__109
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__110
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__111
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__112
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__113
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__114
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__115
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__116
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__117
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__118
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__119
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__120
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__121
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__122
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__123
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__124
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__125
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__126
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__127
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__128
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__129
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__130
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__131
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__132
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__133
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__134
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__135
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__136
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__137
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__138
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__139
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__140
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__141
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__142
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__143
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__144
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__145
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__146
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__147
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__148
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__149
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__150
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__151
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__152
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__153
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__154
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__155
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__156
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__157
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__158
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__159
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__160
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__161
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__162
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__163
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__164
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__165
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__166
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__167
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__168
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__169
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__170
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__171
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__172
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__173
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__174
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__175
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__176
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__177
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__178
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__179
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__180
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__181
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__182
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__183
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__184
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__185
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__186
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__187
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__188
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__189
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__190
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__191
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__192
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__193
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__194
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__195
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__196
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__197
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "3" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__198
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__10
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__11
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__12
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__13
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__14
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__8
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_xpm_cdc_sync_rst__parameterized0__9
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
